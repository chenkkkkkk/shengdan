{"ast":null,"code":"/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { defineComponent, ref, computed, watch, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, createElementVNode, renderSlot, createElementBlock, Fragment, createCommentVNode, toDisplayString } from 'vue';\nimport '../shared/index.js';\nimport script$1 from './menu-list.js';\nimport script$2 from './menu-grid.js';\nimport _Popup from '../popup/index.js';\nimport config from '../config.js';\nimport { useEmitEvent } from '../shared/useEmitEvent/index.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/render.js';\nimport '@babel/runtime/helpers/typeof';\nimport 'lodash/camelCase';\nimport '../shared/render-tnode.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '../grid/index.js';\nimport '../grid/grid.js';\nimport '../grid/props.js';\nimport '../grid/grid-item.js';\nimport '../badge/index.js';\nimport '../badge/badge.js';\nimport '@babel/runtime/helpers/slicedToArray';\nimport '../badge/props.js';\nimport './style/css.js';\nimport '../badge/type.js';\nimport '../grid/grid-item-props.js';\nimport '../grid/type.js';\nimport '../popup/popup.js';\nimport '../popup/props.js';\nimport '../overlay/index.js';\nimport '../overlay/overlay.js';\nimport '../overlay/props.js';\nimport '../popup/type.js';\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-action-sheet\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    TPopup: _Popup,\n    MenuList: script$1,\n    MenuGrid: script$2\n  },\n  props: {\n    modelValue: Boolean,\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    items: {\n      type: Array,\n      required: true\n    },\n    type: {\n      type: String,\n      default: \"list\"\n    },\n    count: {\n      type: Number,\n      default: 8\n    },\n    showCancel: {\n      type: Boolean,\n      default: true\n    },\n    cancelText: {\n      type: String,\n      default: \"\\u53D6\\u6D88\"\n    }\n  },\n  emits: [\"selected\", \"update:modelValue\", \"cancel\", \"close\"],\n  setup: function setup(props, context) {\n    var emitEvent = useEmitEvent(props, context.emit);\n    var actionItems = ref([]);\n    var currentVisible = computed(function () {\n      return props.modelValue || props.visible;\n    });\n    var rootClasses = computed(function () {\n      var _ref;\n      return _ref = {}, _defineProperty(_ref, \"\".concat(name, \"__panel\"), true), _defineProperty(_ref, \"\".concat(name, \"__panel-list\"), props.type === \"list\"), _defineProperty(_ref, \"\".concat(name, \"__panel-grid\"), props.type === \"grid\"), _ref;\n    });\n    watch(function () {\n      return props.items;\n    }, function (val) {\n      var items = JSON.parse(JSON.stringify(val));\n      items = items.map(function (item) {\n        if (typeof item === \"string\") {\n          return {\n            label: item\n          };\n        }\n        return item;\n      });\n      actionItems.value = items;\n    }, {\n      immediate: true,\n      deep: true\n    });\n    var handleCancel = function handleCancel() {\n      emitEvent(\"cancel\");\n      context.emit(\"update:modelValue\", false);\n    };\n    var handleSelected = function handleSelected(index) {\n      emitEvent(\"selected\", props.items[index], index);\n    };\n    var handleClose = function handleClose() {\n      emitEvent(\"close\");\n      context.emit(\"update:modelValue\", false);\n    };\n    return {\n      name: ref(name),\n      rootClasses: rootClasses,\n      actionItems: actionItems,\n      currentVisible: currentVisible,\n      handleCancel: handleCancel,\n      handleSelected: handleSelected,\n      handleClose: handleClose\n    };\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_menu_list = resolveComponent(\"menu-list\");\n  var _component_menu_grid = resolveComponent(\"menu-grid\");\n  var _component_t_popup = resolveComponent(\"t-popup\");\n  return openBlock(), createBlock(_component_t_popup, {\n    class: normalizeClass(_ctx.name),\n    visible: _ctx.currentVisible,\n    placement: \"bottom\",\n    onClose: _ctx.handleClose\n  }, {\n    default: withCtx(function () {\n      return [createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.rootClasses)\n      }, [_ctx.type === \"list\" ? (openBlock(), createBlock(_component_menu_list, {\n        key: 0,\n        items: _ctx.actionItems,\n        onSelected: _ctx.handleSelected\n      }, {\n        cell: withCtx(function (slotProps) {\n          return [renderSlot(_ctx.$slots, \"cell\", {\n            item: slotProps.item\n          })];\n        }),\n        _: 3\n      }, 8, [\"items\", \"onSelected\"])) : (openBlock(), createBlock(_component_menu_grid, {\n        key: 1,\n        items: _ctx.actionItems,\n        count: _ctx.count,\n        onSelected: _ctx.handleSelected\n      }, {\n        cell: withCtx(function (slotProps) {\n          return [renderSlot(_ctx.$slots, \"cell\", {\n            item: slotProps.item\n          })];\n        }),\n        _: 3\n      }, 8, [\"items\", \"count\", \"onSelected\"])), _ctx.showCancel ? (openBlock(), createElementBlock(Fragment, {\n        key: 2\n      }, [_ctx.type === \"list\" ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(\"\".concat(_ctx.name, \"__separation\"))\n      }, null, 2)) : createCommentVNode(\"\", true), createElementVNode(\"button\", {\n        class: normalizeClass(\"\".concat(_ctx.name, \"__action\")),\n        onClick: _cache[0] || (_cache[0] = function () {\n          return _ctx.handleCancel && _ctx.handleCancel.apply(_ctx, arguments);\n        })\n      }, toDisplayString(_ctx.cancelText), 3)], 64)) : createCommentVNode(\"\", true)], 2)];\n    }),\n    _: 3\n  }, 8, [\"class\", \"visible\", \"onClose\"]);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,IAAQA,SAAWC,OAAXD;AACR,IAAME,OAAUF;AAEhB,aAAeG,eAAgB;EAC7BD;EACAE,UAAY;IACVC;IACAC;IACAC;GACF;EACAC,KAAO;IACLC,UAAY;IAKZC,OAAS;MACPC,IAAM;MACNC,OAAS;KACX;IAKAC,KAAO;MACLF,IAAM;MACNG,QAAU;KACZ;IAKAH,IAAM;MACJA,IAAM;MACNC,OAAS;KACX;IAKAG,KAAO;MACLJ,IAAM;MACNC,OAAS;KACX;IAKAI,UAAY;MACVL,IAAM;MACNC,OAAS;KACX;IAKAK,UAAY;MACVN,IAAM;MACNC,OAAS;IACX;GACF;EACAM,KAAO,GAAC,UAAY,uBAAqB,UAAU,OAAO;EAC1DC,OAAMX,sBAAOY,OAAuB;IAClC,IAAMC,SAAY,gBAAab,KAAO,UAAQc,IAAI;IAC5C,kBAAcC,GAAI,GAAE;IAE1B,IAAMC,iBAAiBC,QAAS;MAAA,OAAMjB,KAAM,eAAcA,MAAME,OAAO;KAAA;IACjE,kBAAce,SAAS;MAAA;MAAA,kDACvBvB,IAAgB,qDAChBA,IAAqB,yBAAMS,IAAS,8CACpCT,IAAqB,yBAAMS,IAAS;IAAA,CACxC;IAEFe,MACE;MAAA,OAAMlB,KAAM;KACZ,YAACmB,GAAQ;MACP,IAAId,QAAQe,IAAK,OAAMA,IAAK,WAAUD,GAAG,CAAC;MAElCd,cAAMgB,GAAI,WAACC,IAAkB;QAC/B,WAAOA,SAAS,QAAU;UACrB;YAAEC,OAAOD;WAAK;QACvB;QAEO;MACT,CAAC;MACDE,YAAYC,KAAQ;IACtB,GACA;MACEC,SAAW;MACXC,IAAM;IACR,EACF;IAEA,IAAMC,eAAe,SAAfA,eAAqB;MACzBf,UAAU,QAAQ;MACVD,aAAK,qBAAqB,KAAK;KACzC;IAEM,qBAAiB,SAAjBiB,eAAkBC,KAAkB;MACxCjB,UAAU,UAAY,QAAMR,KAAM,SAAQyB,KAAK;KACjD;IAEA,IAAMC,cAAc,SAAdA,cAAoB;MACxBlB,UAAU,OAAO;MACTD,aAAK,qBAAqB,KAAK;KACzC;IAEO;MACLlB,MAAMqB,IAAIrB,IAAI;MACdsC;MACAR;MACAR;MACAY;MACAC;MACAE;KACF;EACF;AACF,CAAC;;;;;oBCrJC,cAoBSE;IApBCC,qBAAO,MAAIxC;IAAGQ,SAASiC,IAAc;IAAEC,SAAU;IAAUC,SAAOF,IAAW;;qBACrF;MAAA,OAkBK,CAlBLG,mBAkBK;QAlBCJ,qBAAO,MAAWF;UAELG,KAAGhC,gCAApBoC,YAIWC;;QAJwBnC,OAAO8B,IAAW;QAAGM,YAAUN,IAAc;;QACnEO,MAAIC,OACb,WAA+CC,SADvB;UAAA,QACxBC,WAA+CV;YAA5Bb,MAAMsB,SAAU;;;;oDAIvC,cAIWE;;QAJQzC,OAAO8B,IAAW;QAAG5B,OAAO4B,IAAK;QAAGM,YAAUN,IAAc;;QAClEO,MAAIC,OACb,WAA+CC,SADvB;UAAA,QACxBC,WAA+CV;YAA5Bb,MAAMsB,SAAU;;;;gDAIvBT,KAAU3B,2BAA1BuC,mBAGUC;QAAAC;MAAA,IAFGd,KAAGhC,gCAAd4C,mBAAgE;;QAAnCb,sBAAUC,eAAIzC;mDAC3C4C,mBAAiF;QAAxEJ,gCAAUC,KAAIzC;QAAawD;iBAAOf,KAAYP;QAAA;yBAAKO,IAAW","names":["prefix","config","name","defineComponent","components","TPopup","MenuList","MenuGrid","props","modelValue","visible","type","default","items","required","count","showCancel","cancelText","emits","setup","context","emitEvent","emit","ref","currentVisible","computed","watch","val","JSON","map","item","label","actionItems","value","immediate","deep","handleCancel","handleSelected","index","handleClose","rootClasses","_component_t_popup","class","_ctx","placement","onClose","_createElementVNode","_createBlock","_component_menu_list","onSelected","cell","_withCtx","slotProps","_renderSlot","_component_menu_grid","_createElementBlock","_Fragment","key","onClick"],"sources":["../../src/action-sheet/action-sheet.vue","../../src/action-sheet/action-sheet.vue?vue&type=template&id=82b57fe6&lang.js"],"sourcesContent":["<template>\n  <t-popup :class=\"name\" :visible=\"currentVisible\" placement=\"bottom\" @close=\"handleClose\">\n    <div :class=\"rootClasses\">\n      <!-- @ts-ignore -->\n      <menu-list v-if=\"type === 'list'\" :items=\"actionItems\" @selected=\"handleSelected\">\n        <template #cell=\"slotProps\">\n          <slot name=\"cell\" :item=\"slotProps.item\"></slot>\n        </template>\n      </menu-list>\n\n      <menu-grid v-else :items=\"actionItems\" :count=\"count\" @selected=\"handleSelected\">\n        <template #cell=\"slotProps\">\n          <slot name=\"cell\" :item=\"slotProps.item\"></slot>\n        </template>\n      </menu-grid>\n\n      <template v-if=\"showCancel\">\n        <div v-if=\"type === 'list'\" :class=\"`${name}__separation`\"></div>\n        <button :class=\"`${name}__action`\" @click=\"handleCancel\">{{ cancelText }}</button>\n      </template>\n    </div>\n  </t-popup>\n</template>\n\n<script lang=\"ts\">\nimport { ref, computed, watch, defineComponent, PropType, ComputedRef, SetupContext } from 'vue';\nimport { useEmitEvent } from '../shared';\nimport MenuList from './menu-list.vue';\nimport MenuGrid from './menu-grid.vue';\nimport TPopup from '../popup';\nimport config from '../config';\nimport { ActionSheetItem } from './type';\n\nconst { prefix } = config;\nconst name = `${prefix}-action-sheet`;\n\nexport default defineComponent({\n  name,\n  components: {\n    TPopup,\n    MenuList,\n    MenuGrid,\n  },\n  props: {\n    modelValue: Boolean,\n    /**\n     * @description 是否显示\n     * @attribute visible\n     */\n    visible: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * @description 菜单项\n     * @attribute items\n     */\n    items: {\n      type: Array as PropType<Array<ActionSheetItem | string>>,\n      required: true,\n    },\n    /**\n     * @description 展示类型\n     * @attribute type\n     */\n    type: {\n      type: String,\n      default: 'list',\n    },\n    /**\n     * @description grid时每页显示的数量\n     * @attribute count\n     */\n    count: {\n      type: Number,\n      default: 8,\n    },\n    /**\n     * @description 是否展示【取消】选项\n     * @attribute show-cancel\n     */\n    showCancel: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * @description 【取消】选项的文本\n     * @attribute cancel-text\n     */\n    cancelText: {\n      type: String,\n      default: '取消',\n    },\n  },\n  emits: ['selected', 'update:modelValue', 'cancel', 'close'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const actionItems = ref([]);\n\n    const currentVisible = computed(() => props.modelValue || props.visible) as ComputedRef<boolean>;\n    const rootClasses = computed(() => ({\n      [`${name}__panel`]: true,\n      [`${name}__panel-list`]: props.type === 'list',\n      [`${name}__panel-grid`]: props.type === 'grid',\n    }));\n\n    watch(\n      () => props.items,\n      (val) => {\n        let items = JSON.parse(JSON.stringify(val));\n        // 数据格式处理，统一转为object结构\n        items = items.map((item: unknown) => {\n          if (typeof item === 'string') {\n            return { label: item };\n          }\n\n          return item;\n        });\n        actionItems.value = items;\n      },\n      {\n        immediate: true,\n        deep: true,\n      },\n    );\n\n    const handleCancel = () => {\n      emitEvent('cancel');\n      context.emit('update:modelValue', false);\n    };\n\n    const handleSelected = (index: number) => {\n      emitEvent('selected', props.items[index], index);\n    };\n\n    const handleClose = () => {\n      emitEvent('close');\n      context.emit('update:modelValue', false);\n    };\n\n    return {\n      name: ref(name),\n      rootClasses,\n      actionItems,\n      currentVisible,\n      handleCancel,\n      handleSelected,\n      handleClose,\n    };\n  },\n});\n</script>\n","<template>\n  <t-popup :class=\"name\" :visible=\"currentVisible\" placement=\"bottom\" @close=\"handleClose\">\n    <div :class=\"rootClasses\">\n      <!-- @ts-ignore -->\n      <menu-list v-if=\"type === 'list'\" :items=\"actionItems\" @selected=\"handleSelected\">\n        <template #cell=\"slotProps\">\n          <slot name=\"cell\" :item=\"slotProps.item\"></slot>\n        </template>\n      </menu-list>\n\n      <menu-grid v-else :items=\"actionItems\" :count=\"count\" @selected=\"handleSelected\">\n        <template #cell=\"slotProps\">\n          <slot name=\"cell\" :item=\"slotProps.item\"></slot>\n        </template>\n      </menu-grid>\n\n      <template v-if=\"showCancel\">\n        <div v-if=\"type === 'list'\" :class=\"`${name}__separation`\"></div>\n        <button :class=\"`${name}__action`\" @click=\"handleCancel\">{{ cancelText }}</button>\n      </template>\n    </div>\n  </t-popup>\n</template>\n\n<script lang=\"ts\">\nimport { ref, computed, watch, defineComponent, PropType, ComputedRef, SetupContext } from 'vue';\nimport { useEmitEvent } from '../shared';\nimport MenuList from './menu-list.vue';\nimport MenuGrid from './menu-grid.vue';\nimport TPopup from '../popup';\nimport config from '../config';\nimport { ActionSheetItem } from './type';\n\nconst { prefix } = config;\nconst name = `${prefix}-action-sheet`;\n\nexport default defineComponent({\n  name,\n  components: {\n    TPopup,\n    MenuList,\n    MenuGrid,\n  },\n  props: {\n    modelValue: Boolean,\n    /**\n     * @description 是否显示\n     * @attribute visible\n     */\n    visible: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * @description 菜单项\n     * @attribute items\n     */\n    items: {\n      type: Array as PropType<Array<ActionSheetItem | string>>,\n      required: true,\n    },\n    /**\n     * @description 展示类型\n     * @attribute type\n     */\n    type: {\n      type: String,\n      default: 'list',\n    },\n    /**\n     * @description grid时每页显示的数量\n     * @attribute count\n     */\n    count: {\n      type: Number,\n      default: 8,\n    },\n    /**\n     * @description 是否展示【取消】选项\n     * @attribute show-cancel\n     */\n    showCancel: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * @description 【取消】选项的文本\n     * @attribute cancel-text\n     */\n    cancelText: {\n      type: String,\n      default: '取消',\n    },\n  },\n  emits: ['selected', 'update:modelValue', 'cancel', 'close'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const actionItems = ref([]);\n\n    const currentVisible = computed(() => props.modelValue || props.visible) as ComputedRef<boolean>;\n    const rootClasses = computed(() => ({\n      [`${name}__panel`]: true,\n      [`${name}__panel-list`]: props.type === 'list',\n      [`${name}__panel-grid`]: props.type === 'grid',\n    }));\n\n    watch(\n      () => props.items,\n      (val) => {\n        let items = JSON.parse(JSON.stringify(val));\n        // 数据格式处理，统一转为object结构\n        items = items.map((item: unknown) => {\n          if (typeof item === 'string') {\n            return { label: item };\n          }\n\n          return item;\n        });\n        actionItems.value = items;\n      },\n      {\n        immediate: true,\n        deep: true,\n      },\n    );\n\n    const handleCancel = () => {\n      emitEvent('cancel');\n      context.emit('update:modelValue', false);\n    };\n\n    const handleSelected = (index: number) => {\n      emitEvent('selected', props.items[index], index);\n    };\n\n    const handleClose = () => {\n      emitEvent('close');\n      context.emit('update:modelValue', false);\n    };\n\n    return {\n      name: ref(name),\n      rootClasses,\n      actionItems,\n      currentVisible,\n      handleCancel,\n      handleSelected,\n      handleClose,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}