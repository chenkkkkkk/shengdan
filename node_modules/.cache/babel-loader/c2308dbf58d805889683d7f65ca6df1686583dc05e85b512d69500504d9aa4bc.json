{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport log from '../log/log.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar SIZE_MAP = {\n  B: 1,\n  KB: 1024,\n  MB: 1048576,\n  GB: 1073741824\n};\nfunction returnFileSize(number) {\n  if (number < SIZE_MAP.KB) {\n    return \"\".concat(number, \" Bytes\");\n  }\n  if (number >= SIZE_MAP.KB && number < SIZE_MAP.MB) {\n    return \"\".concat((number / SIZE_MAP.KB).toFixed(1), \" KB\");\n  }\n  if (number >= SIZE_MAP.MB && number < SIZE_MAP.GB) {\n    return \"\".concat((number / SIZE_MAP.MB).toFixed(1), \" MB\");\n  }\n  if (number >= SIZE_MAP.GB) {\n    return \"\".concat((number / SIZE_MAP.GB).toFixed(1), \" GB\");\n  }\n  return \"\";\n}\nfunction getCurrentDate() {\n  var needTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var d = new Date();\n  var month = d.getMonth() + 1;\n  month = month < 10 ? \"0\".concat(month) : month;\n  var date = \"\".concat(d.getFullYear(), \"-\").concat(month, \"-\").concat(d.getDate());\n  var time = \"\".concat(d.getHours(), \":\").concat(d.getMinutes(), \":\").concat(d.getSeconds());\n  if (needTime) return [date, time].join(\" \");\n  return date;\n}\nfunction abridgeName(inputName) {\n  var leftCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  var rightCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 7;\n  var name = inputName;\n  var leftLength = 0;\n  var rightLength = 0;\n  if (!name) return \"\";\n  for (var i = 0; i < name.length; i++) {\n    var w = name[i];\n    var isCn = escape(w).indexOf(\"%u\") === 0;\n    if (i < leftCount * 2 && leftLength < leftCount) {\n      isCn ? leftLength += 1 : leftLength += 2;\n    } else if (i > i - rightCount && rightLength < rightCount) {\n      isCn ? rightLength += 1 : rightLength += 2;\n    }\n  }\n  return name.replace(new RegExp(\"^(.{\".concat(leftLength, \"})(.+)(.{\").concat(rightLength, \"})$\")), \"$1\\u2026$3\");\n}\nfunction getFileSizeText(number) {\n  if (number < 1024) {\n    return \"\".concat(number, \" Bytes\");\n  }\n  if (number >= 1024 && number < 1048576) {\n    return \"\".concat((number / 1024).toFixed(1), \" KB\");\n  }\n  if (number >= 1048576) {\n    return \"\".concat((number / 1048576).toFixed(1), \" MB\");\n  }\n  return \"\";\n}\nfunction isOverSizeLimit(fileSize, sizeLimit, unit) {\n  var units = [\"B\", \"KB\", \"MB\", \"GB\"];\n  var KBIndex = 1;\n  var index = units.indexOf(unit);\n  if (index === -1) {\n    log.warn(\"Upload\", \"`sizeLimit.unit` can only be one of \".concat(units.join()));\n    index = KBIndex;\n  }\n  var num = SIZE_MAP[unit];\n  return fileSize > sizeLimit * num;\n}\nfunction isOverSizeLimit1(fileSize, sizeLimit, unit) {\n  var units = [\"B\", \"KB\", \"MB\", \"GB\"];\n  var KBIndex = 1;\n  var index = units.indexOf(unit);\n  if (index === -1) {\n    console.warn(\"TDesign Upload Warn: `sizeLimit.unit` can only be one of \".concat(units.join()));\n    index = KBIndex;\n  }\n  var num = SIZE_MAP[unit];\n  var limit = index < KBIndex ? sizeLimit / num : sizeLimit * num;\n  return fileSize <= limit;\n}\nvar urlCreator = function urlCreator() {\n  return window.webkitURL || window.URL;\n};\nfunction formatFiles() {\n  var files = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var format = arguments.length > 1 ? arguments[1] : undefined;\n  return files.map(function (fileRaw) {\n    var _urlCreator;\n    var file = typeof format === \"function\" ? format(fileRaw) : fileRaw;\n    var uploadFile = _objectSpread({\n      raw: fileRaw,\n      lastModified: fileRaw.lastModified,\n      name: fileRaw.name,\n      size: fileRaw.size,\n      type: fileRaw.type,\n      percent: 0,\n      status: \"waiting\"\n    }, file);\n    uploadFile.url = (_urlCreator = urlCreator()) === null || _urlCreator === void 0 ? void 0 : _urlCreator.createObjectURL(fileRaw);\n    return uploadFile;\n  });\n}\nfunction getFileUrlByFileRaw(fileRaw) {\n  return new Promise(function (resolve) {\n    if (!fileRaw) {\n      resolve(\"\");\n      return;\n    }\n    var reader = new FileReader();\n    reader.readAsDataURL(fileRaw);\n    reader.onload = function (event) {\n      var _event$target;\n      resolve((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result);\n    };\n  });\n}\nexport { SIZE_MAP, abridgeName, formatFiles, getCurrentDate, getFileSizeText, getFileUrlByFileRaw, isOverSizeLimit, isOverSizeLimit1, returnFileSize, urlCreator };","map":{"version":3,"mappings":"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","names":["SIZE_MAP","B","KB","MB","GB","returnFileSize","number","toFixed","needTime","Date","d","month","date","getFullYear","getDate","getSeconds","time","join","abridgeName","leftCount","rightCount","name","leftLength","rightLength","i","length","w","isCn","escape","RegExp","getFileSizeText","fileSize","unit","units","KBIndex","index","log","warn","num","sizeLimit","console","limit","urlCreator","window","formatFiles","files","format","map","fileRaw","file","uploadFile","raw","lastModified","size","type","percent","status","url","_urlCreator","createObjectURL","getFileUrlByFileRaw","Promise","resolve","FileReader","reader","readAsDataURL","event","target","result"],"sources":["../../../../src/_common/js/upload/utils.ts"],"sourcesContent":["import { SizeUnit, TdUploadFile } from './types';\nimport log from '../log/log';\n\n/**\n * 各个单位和 KB 的关系\n *\n * [*] 表示方法采用这种方式\n * [x] 表示方法不采用这种方式\n *\n * [x] bit      位              b     0 or 1\n * [*] byte     字节            B     8 bits\n * [x] kilobit  千位            kb    1000 bites\n * [*] kilobyte 千字节(二进制)   KB    1024 bytes\n * [x] kilobyte 千字节(十进制)   KB    1000 bytes\n * [x] Megabite 百万位          Mb    1000 kilobits\n * [*] Megabyte 兆字节(二进制)   KB    1024 kilobytes\n * [*] Megabyte 兆字节(十进制)   KB    1000 kilobytes\n * [x] Gigabit  万亿位          Gb    1000 Megabite\n * [*] Gigabyte 吉字节(二进制)   GB    1024 Megabytes\n * [x] Gigabyte 吉字节(十进制)   GB    1000 Megabytes\n */\nexport const SIZE_MAP = {\n  B: 1,\n  KB: 1024,\n  MB: 1048576, // 1024 * 1024\n  GB: 1073741824, // 1024 * 1024 * 1024\n};\n\nexport function returnFileSize(number: number) {\n  if (number < SIZE_MAP.KB) {\n    return `${number} Bytes`;\n  }\n  if (number >= SIZE_MAP.KB && number < SIZE_MAP.MB) {\n    return `${(number / SIZE_MAP.KB).toFixed(1)} KB`;\n  }\n  if (number >= SIZE_MAP.MB && number < SIZE_MAP.GB) {\n    return `${(number / SIZE_MAP.MB).toFixed(1)} MB`;\n  }\n\n  if (number >= SIZE_MAP.GB) {\n    return `${(number / SIZE_MAP.GB).toFixed(1)} GB`;\n  }\n  return '';\n}\n\nexport function getCurrentDate(needTime = false) {\n  const d = new Date();\n  let month: string | number = d.getMonth() + 1;\n  month = month < 10 ? `0${month}` : month;\n  const date = `${d.getFullYear()}-${month}-${d.getDate()}`;\n  const time = `${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`;\n  if (needTime) return [date, time].join(' ');\n  return date;\n}\n\n/**\n * 缩略文件名 ABCDEFG => ABC...FG\n * @param inputName 文件名\n * @param leftCount 左边长度\n * @param rightCount 右边长度\n * @returns 缩略后的文件名\n */\nexport function abridgeName(\n  inputName: string,\n  leftCount = 5,\n  rightCount = 7\n): string {\n  const name = inputName;\n  let leftLength = 0;\n  let rightLength = 0;\n  if (!name) return '';\n  for (let i = 0; i < name.length; i++) {\n    const w = name[i];\n    const isCn = escape(w).indexOf('%u') === 0;\n    if (i < leftCount * 2 && leftLength < leftCount) {\n      // eslint-disable-next-line no-unused-expressions\n      isCn ? (leftLength += 1) : (leftLength += 2);\n    } else if (i > i - rightCount && rightLength < rightCount) {\n      // eslint-disable-next-line no-unused-expressions\n      isCn ? (rightLength += 1) : (rightLength += 2);\n    }\n  }\n  return name.replace(\n    new RegExp(`^(.{${leftLength}})(.+)(.{${rightLength}})$`),\n    '$1…$3'\n  );\n}\n\nexport function getFileSizeText(number: number) {\n  if (number < 1024) {\n    return `${number} Bytes`;\n  }\n  if (number >= 1024 && number < 1048576) {\n    return `${(number / 1024).toFixed(1)} KB`;\n  }\n  if (number >= 1048576) {\n    return `${(number / 1048576).toFixed(1)} MB`;\n  }\n  return '';\n}\n\n/**\n * 大小比较\n * @param size 文件大小，单位：B\n * @param unit 计算机计量单位\n */\nexport function isOverSizeLimit(\n  fileSize: number,\n  sizeLimit: number,\n  unit: SizeUnit\n) {\n  const units = ['B', 'KB', 'MB', 'GB'];\n  const KBIndex = 1;\n  let index = units.indexOf(unit);\n  if (index === -1) {\n    log.warn('Upload', `\\`sizeLimit.unit\\` can only be one of ${units.join()}`);\n    index = KBIndex;\n  }\n  const num = SIZE_MAP[unit];\n  return fileSize > sizeLimit * num;\n}\n\n// vue2临时使用的 sizeLimit 计算\nexport function isOverSizeLimit1(\n  fileSize: number,\n  sizeLimit: number,\n  unit: SizeUnit\n) {\n  // 以 KB 为单位进行比较\n  const units = ['B', 'KB', 'MB', 'GB'];\n  // 各个单位和 KB 的关系\n\n  const KBIndex = 1;\n  let index = units.indexOf(unit);\n  if (index === -1) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `TDesign Upload Warn: \\`sizeLimit.unit\\` can only be one of ${units.join()}`\n    );\n    index = KBIndex;\n  }\n  const num = SIZE_MAP[unit];\n  const limit = index < KBIndex ? sizeLimit / num : sizeLimit * num;\n  return fileSize <= limit;\n}\n\nexport const urlCreator = () => window.webkitURL || window.URL;\n\n/**\n *\n * @param files 待处理文件\n * @param format 格式化规则\n */\nexport function formatFiles(\n  files: File[] = [],\n  format?: (file: File) => TdUploadFile\n) {\n  return files.map((fileRaw) => {\n    const file = typeof format === 'function' ? format(fileRaw) : fileRaw;\n    const uploadFile: TdUploadFile = {\n      raw: fileRaw,\n      lastModified: fileRaw.lastModified,\n      name: fileRaw.name,\n      size: fileRaw.size,\n      type: fileRaw.type,\n      percent: 0,\n      status: 'waiting',\n      ...file,\n    };\n    uploadFile.url = urlCreator()?.createObjectURL(fileRaw);\n    return uploadFile;\n  });\n}\n\nexport function getFileUrlByFileRaw(fileRaw: File): Promise<string> {\n  return new Promise((resolve) => {\n    if (!fileRaw) {\n      resolve('');\n      return;\n    }\n    const reader = new FileReader();\n    reader.readAsDataURL(fileRaw);\n    reader.onload = (event: ProgressEvent<FileReader>) => {\n      resolve(event.target?.result as string);\n    };\n  });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}