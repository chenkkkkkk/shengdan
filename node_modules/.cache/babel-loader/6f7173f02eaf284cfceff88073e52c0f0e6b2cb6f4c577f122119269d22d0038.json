{"ast":null,"code":"/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nfunction toCamel(str) {\n  return str.replace(/^\\S/, function (m) {\n    return m.toUpperCase();\n  });\n}\nvar inBrowser = typeof window !== \"undefined\";\nfunction getCharacterLength(str, maxCharacter) {\n  var hasMaxCharacter = typeof maxCharacter === \"number\";\n  if (!str || str.length === 0) {\n    if (hasMaxCharacter) {\n      return {\n        length: 0,\n        characters: str\n      };\n    }\n    return 0;\n  }\n  var len = 0;\n  for (var i = 0; i < str.length; i++) {\n    var currentStringLength = 0;\n    if (str.charCodeAt(i) > 127 || str.charCodeAt(i) === 94) {\n      currentStringLength = 2;\n    } else {\n      currentStringLength = 1;\n    }\n    if (hasMaxCharacter && len + currentStringLength > maxCharacter) {\n      return {\n        length: len,\n        characters: str.slice(0, i)\n      };\n    }\n    len += currentStringLength;\n  }\n  if (hasMaxCharacter) {\n    return {\n      length: len,\n      characters: str\n    };\n  }\n  return len;\n}\nvar sleep = function sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n};\nexport { getCharacterLength, inBrowser, sleep, toCamel };","map":{"version":3,"mappings":";;;;;;AAAO,SAASA,QAAQC,GAAqB;EAC3C,OAAOA,IAAIC,OAAQ,QAAO,UAACC,CAAM;IAAA,SAAEC,aAAa;GAAA;AAClD;IAEaC,YAAY,OAAOC,MAAW;AAQ3B,4BAAmBL,KAAaM,YAAuB;EAC/D,sBAAkB,OAAOA,YAAiB;EAChD,IAAI,CAACN,OAAOA,GAAI,YAAW,CAAG;IAC5B,IAAIO,eAAiB;MACZ;QACLC,MAAQ;QACRC,UAAY;OACd;IACF;IACO;EACT;EACA,IAAIC,GAAM;EACV,SAASC,CAAI,MAAGA,CAAI,OAAIH,QAAQG,CAAK;IACnC,IAAIC,mBAAsB;IACtB,QAAIC,WAAWF,CAAC,IAAI,OAAOX,GAAI,YAAWW,CAAC,MAAM,EAAI;MACjCC;IACxB,CAAO;MACiBA;IACxB;IACI,uBAAmBF,GAAM,yBAAsBJ,YAAc;MACxD;QACLE,MAAQ;QACRC,UAAY,MAAIK,KAAM,IAAGH,CAAC;OAC5B;IACF;IACOD;EACT;EACA,IAAIH,eAAiB;IACZ;MACLC,MAAQ;MACRC,UAAY;KACd;EACF;EACO;AACT;IAEaM,QAAQ,SAARA,MAASC;EAAA,OAAe,IAAIC,QAAQ,UAACC,OAAY;IAAA,kBAAWA,OAAS,IAAE,CAAC;GAAA;AAAA","names":["toCamel","str","replace","m","toUpperCase","inBrowser","window","maxCharacter","hasMaxCharacter","length","characters","len","i","currentStringLength","charCodeAt","slice","sleep","ms","Promise","resolve"],"sources":["../../src/shared/util.ts"],"sourcesContent":["export function toCamel(str: string): string {\n  return str.replace(/^\\S/, (m) => m.toUpperCase());\n}\n\nexport const inBrowser = typeof window !== 'undefined';\n\n/**\n * 计算字符串字符的长度并可以截取字符串。\n * @param str 传入字符串\n * @param maxCharacter 规定最大字符串长度\n * @returns 当没有传入maxCharacter时返回字符串字符长度，当传入maxCharacter时返回截取之后的字符串和长度。\n */\nexport function getCharacterLength(str: string, maxCharacter?: number) {\n  const hasMaxCharacter = typeof maxCharacter === 'number';\n  if (!str || str.length === 0) {\n    if (hasMaxCharacter) {\n      return {\n        length: 0,\n        characters: str,\n      };\n    }\n    return 0;\n  }\n  let len = 0;\n  for (let i = 0; i < str.length; i++) {\n    let currentStringLength = 0;\n    if (str.charCodeAt(i) > 127 || str.charCodeAt(i) === 94) {\n      currentStringLength = 2;\n    } else {\n      currentStringLength = 1;\n    }\n    if (hasMaxCharacter && len + currentStringLength > maxCharacter) {\n      return {\n        length: len,\n        characters: str.slice(0, i),\n      };\n    }\n    len += currentStringLength;\n  }\n  if (hasMaxCharacter) {\n    return {\n      length: len,\n      characters: str,\n    };\n  }\n  return len;\n}\n\nexport const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms)); // eslint-disable-line\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}