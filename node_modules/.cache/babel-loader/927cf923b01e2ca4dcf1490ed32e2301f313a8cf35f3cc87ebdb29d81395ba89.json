{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport { CloseCircleFilledIcon } from 'tdesign-icons-vue-next';\nimport { defineComponent, ref, toRefs, getCurrentInstance, computed, nextTick, watch, resolveComponent, openBlock, createBlock, normalizeClass, createSlots, withCtx, createElementVNode, createElementBlock, createVNode, createCommentVNode, toDisplayString } from 'vue';\nimport { useFocus } from '@vueuse/core';\nimport _Cell from '../cell/index.js';\nimport config from '../config.js';\nimport InputProps from './props.js';\nimport ClASSNAMES from '../shared/constants.js';\nimport '../shared/index.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { useEmitEvent } from '../shared/useEmitEvent/index.js';\nimport { useDefault } from '../shared/useDefault/index.js';\nimport { renderTNode } from '../shared/render.js';\nimport { getCharacterLength } from '../shared/util.js';\nimport { extendAPI } from '../shared/component.js';\nimport '../cell/cell.js';\nimport '../cell/props.js';\nimport '../shared/functions.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '../shared/useCountDown/utils.js';\nimport 'lodash/camelCase';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/typeof';\nimport './style/css.js';\nimport '../cell/type.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar componentName = \"\".concat(prefix, \"-input\");\nvar script = defineComponent({\n  name: componentName,\n  components: {\n    TNode: TNodeComponent,\n    TCell: _Cell,\n    CloseCircleFilledIcon: CloseCircleFilledIcon\n  },\n  props: InputProps,\n  emits: [\"update:value\", \"update:modelValue\", \"click-icon\", \"focus\", \"blur\", \"change\", \"clear\"],\n  setup: function setup(props, context) {\n    var emitEvent = useEmitEvent(props, context.emit);\n    var inputRef = ref();\n    var _toRefs = toRefs(props),\n      autofocus = _toRefs.autofocus;\n    var internalInstance = getCurrentInstance();\n    var _useDefault = useDefault(props, context.emit, \"value\", \"change\"),\n      _useDefault2 = _slicedToArray(_useDefault, 1),\n      innerValue = _useDefault2[0];\n    var styleLabel = computed(function () {\n      var _ref;\n      return _ref = {}, _defineProperty(_ref, \"\".concat(componentName, \"--label\"), true), _defineProperty(_ref, ClASSNAMES.STATUS.disabled, props.disabled), _ref;\n    });\n    var _useFocus = useFocus(inputRef, {\n        initialValue: props.autofocus\n      }),\n      focused = _useFocus.focused;\n    var labelContent = computed(function () {\n      return renderTNode(internalInstance, \"label\");\n    });\n    var suffixIconContent = computed(function () {\n      return renderTNode(internalInstance, \"suffixIcon\");\n    });\n    var prefixIconContent = computed(function () {\n      return renderTNode(internalInstance, \"prefixIcon\");\n    });\n    var suffixContent = computed(function () {\n      return renderTNode(internalInstance, \"suffix\");\n    });\n    var styleControl = computed(function () {\n      return [\"\".concat(componentName, \"__control\"), _defineProperty({}, \"\".concat(componentName, \"__control--\").concat(props.align), props.align !== \"left\")];\n    });\n    var styleWrapper = computed(function () {\n      var _ref3;\n      return _ref3 = {}, _defineProperty(_ref3, componentName, true), _defineProperty(_ref3, \"\".concat(componentName, \"--size-\").concat(props.size), props.size), _defineProperty(_ref3, \"\".concat(componentName, \"__error\"), !!props.errorMessage), _ref3;\n    });\n    var setInputValue = function setInputValue() {\n      var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      var input = inputRef.value;\n      var sV = String(v);\n      if (!input) {\n        return;\n      }\n      if (input.value !== sV) {\n        input.value = sV;\n      }\n    };\n    var handleInput = function handleInput(e) {\n      var checkInputType = e.inputType && e.inputType === \"insertCompositionText\";\n      if (e.isComposing || checkInputType) return;\n      inputValueChangeHandle(e);\n    };\n    var inputValueChangeHandle = function inputValueChangeHandle(e) {\n      var value = e.target.value;\n      var maxcharacter = props.maxcharacter;\n      if (maxcharacter && maxcharacter > 0 && !Number.isNaN(maxcharacter)) {\n        var _getCharacterLength = getCharacterLength(value, maxcharacter),\n          _getCharacterLength$l = _getCharacterLength.length,\n          length = _getCharacterLength$l === void 0 ? 0 : _getCharacterLength$l,\n          _getCharacterLength$c = _getCharacterLength.characters,\n          characters = _getCharacterLength$c === void 0 ? \"\" : _getCharacterLength$c;\n        innerValue.value = characters;\n      } else {\n        innerValue.value = value;\n      }\n      nextTick(function () {\n        return setInputValue(innerValue.value);\n      });\n    };\n    var focus = function focus() {\n      focused.value = true;\n    };\n    var blur = function blur() {\n      focused.value = false;\n    };\n    extendAPI({\n      focus: focus,\n      blur: blur\n    });\n    var handleClear = function handleClear(e) {\n      innerValue.value = \"\";\n      focused.value = true;\n      emitEvent(\"clear\", {\n        e: e\n      });\n    };\n    var handleFocus = function handleFocus(e) {\n      emitEvent(\"focus\", innerValue.value, {\n        e: e\n      });\n    };\n    var handleBlur = function handleBlur(e) {\n      emitEvent(\"blur\", innerValue.value, {\n        e: e\n      });\n    };\n    var handleCompositionend = function handleCompositionend(e) {\n      inputValueChangeHandle(e);\n    };\n    watch(autofocus, function (autofocus2, prevAutofocus) {\n      if (autofocus2 === true) {\n        nextTick(function () {\n          focused.value = true;\n        });\n      }\n    });\n    return _objectSpread(_objectSpread({\n      componentName: componentName\n    }, toRefs(props)), {}, {\n      styleLabel: styleLabel,\n      styleWrapper: styleWrapper,\n      styleControl: styleControl,\n      suffixContent: suffixContent,\n      suffixIconContent: suffixIconContent,\n      prefixIconContent: prefixIconContent,\n      labelContent: labelContent,\n      innerValue: innerValue,\n      inputRef: inputRef,\n      handleClear: handleClear,\n      handleFocus: handleFocus,\n      handleBlur: handleBlur,\n      handleInput: handleInput,\n      handleCompositionend: handleCompositionend\n    });\n  }\n});\nvar _hoisted_1 = [\"value\", \"name\", \"type\", \"disabled\", \"autocomplete\", \"placeholder\", \"readonly\", \"maxlength\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_node = resolveComponent(\"t-node\");\n  var _component_close_circle_filled_icon = resolveComponent(\"close-circle-filled-icon\");\n  var _component_t_cell = resolveComponent(\"t-cell\");\n  return openBlock(), createBlock(_component_t_cell, {\n    required: _ctx.required,\n    class: normalizeClass(_ctx.styleWrapper)\n  }, createSlots({\n    note: withCtx(function () {\n      return [createElementVNode(\"div\", {\n        class: normalizeClass(\"\".concat(_ctx.componentName, \"__wrap\"))\n      }, [createElementVNode(\"input\", {\n        ref: \"inputRef\",\n        value: _ctx.innerValue,\n        name: _ctx.name,\n        class: normalizeClass(_ctx.styleControl),\n        type: _ctx.type,\n        disabled: _ctx.disabled,\n        autocomplete: _ctx.autocomplete ? \"On\" : \"Off\",\n        placeholder: _ctx.placeholder,\n        readonly: _ctx.readonly,\n        maxlength: _ctx.maxlength || -1,\n        onFocus: _cache[0] || (_cache[0] = function () {\n          return _ctx.handleFocus && _ctx.handleFocus.apply(_ctx, arguments);\n        }),\n        onBlur: _cache[1] || (_cache[1] = function () {\n          return _ctx.handleBlur && _ctx.handleBlur.apply(_ctx, arguments);\n        }),\n        onInput: _cache[2] || (_cache[2] = function () {\n          return _ctx.handleInput && _ctx.handleInput.apply(_ctx, arguments);\n        }),\n        onCompositionend: _cache[3] || (_cache[3] = function () {\n          return _ctx.handleCompositionend && _ctx.handleCompositionend.apply(_ctx, arguments);\n        })\n      }, null, 42, _hoisted_1), _ctx.clearable && _ctx.innerValue && _ctx.innerValue.length > 0 ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(\"\".concat(_ctx.componentName, \"__wrap--icon\")),\n        onClick: _cache[4] || (_cache[4] = function () {\n          return _ctx.handleClear && _ctx.handleClear.apply(_ctx, arguments);\n        })\n      }, [createVNode(_component_close_circle_filled_icon)], 2)) : createCommentVNode(\"\", true), _ctx.suffixContent ? (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        class: normalizeClass(\"\".concat(_ctx.componentName, \"__wrap--suffix\"))\n      }, [createVNode(_component_t_node, {\n        content: _ctx.suffixContent\n      }, null, 8, [\"content\"])], 2)) : createCommentVNode(\"\", true)], 2), _ctx.errorMessage ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(\"\".concat(_ctx.componentName, \"__error-msg\"))\n      }, toDisplayString(_ctx.errorMessage), 3)) : createCommentVNode(\"\", true)];\n    }),\n    _: 2\n  }, [_ctx.labelContent ? {\n    name: \"title\",\n    fn: withCtx(function () {\n      return [createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.styleLabel)\n      }, [createVNode(_component_t_node, {\n        content: _ctx.labelContent\n      }, null, 8, [\"content\"])], 2)];\n    }),\n    key: \"0\"\n  } : void 0, _ctx.prefixIconContent ? {\n    name: \"leftIcon\",\n    fn: withCtx(function () {\n      return [createVNode(_component_t_node, {\n        content: _ctx.prefixIconContent\n      }, null, 8, [\"content\"])];\n    }),\n    key: \"1\"\n  } : void 0, _ctx.suffixIconContent ? {\n    name: \"rightIcon\",\n    fn: withCtx(function () {\n      return [createVNode(_component_t_node, {\n        content: _ctx.suffixIconContent\n      }, null, 8, [\"content\"])];\n    }),\n    key: \"2\"\n  } : void 0]), 1032, [\"required\", \"class\"]);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":"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","names":["prefix","config","componentName","defineComponent","name","components","TNode","TCell","CloseCircleFilledIcon","props","emits","setup","context","emitEvent","emit","inputRef","ref","toRefs","autofocus","internalInstance","getCurrentInstance","useDefault","_useDefault2","innerValue","computed","ClASSNAMES","STATUS","useFocus","initialValue","focused","labelContent","renderTNode","suffixIconContent","prefixIconContent","suffixContent","align","size","setInputValue","v","input","String","value","sV","handleInput","e","checkInputType","inputType","isComposing","inputValueChangeHandle","maxcharacter","Number","getCharacterLength","_getCharacterLength$l","length","_getCharacterLength$c","characters","nextTick","focus","blur","extendAPI","handleClear","handleFocus","handleBlur","handleCompositionend","watch","prevAutofocus","styleLabel","styleWrapper","styleControl","_component_t_cell","required","_ctx","class","note","_createElementVNode","type","disabled","autocomplete","placeholder","readonly","maxlength","onFocus","onBlur","onInput","onCompositionend","onClick","_createVNode","_component_close_circle_filled_icon","_createElementBlock","_component_t_node","content"],"sources":["../../src/input/input.vue","../../src/input/input.vue?vue&type=template&id=7976e3cc&lang.js"],"sourcesContent":["<template>\n  <t-cell :required=\"required\" :class=\"styleWrapper\">\n    <template v-if=\"labelContent\" #title>\n      <div :class=\"styleLabel\">\n        <t-node :content=\"labelContent\"></t-node>\n      </div>\n    </template>\n    <template v-if=\"prefixIconContent\" #leftIcon>\n      <t-node :content=\"prefixIconContent\"></t-node>\n    </template>\n    <template #note>\n      <div :class=\"`${componentName}__wrap`\">\n        <input\n          ref=\"inputRef\"\n          :value=\"innerValue\"\n          :name=\"name\"\n          :class=\"styleControl\"\n          :type=\"type\"\n          :disabled=\"disabled\"\n          :autocomplete=\"autocomplete ? 'On' : 'Off'\"\n          :placeholder=\"placeholder\"\n          :readonly=\"readonly\"\n          :maxlength=\"maxlength || -1\"\n          @focus=\"handleFocus\"\n          @blur=\"handleBlur\"\n          @input=\"handleInput\"\n          @compositionend=\"handleCompositionend\"\n        />\n        <div\n          v-if=\"clearable && innerValue && innerValue.length > 0\"\n          :class=\"`${componentName}__wrap--icon`\"\n          @click=\"handleClear\"\n        >\n          <close-circle-filled-icon />\n        </div>\n        <div v-if=\"suffixContent\" :class=\"`${componentName}__wrap--suffix`\">\n          <t-node :content=\"suffixContent\" />\n        </div>\n      </div>\n      <div v-if=\"errorMessage\" :class=\"`${componentName}__error-msg`\">{{ errorMessage }}</div>\n    </template>\n    <template v-if=\"suffixIconContent\" #rightIcon>\n      <t-node :content=\"suffixIconContent\"></t-node>\n    </template>\n  </t-cell>\n</template>\n\n<script lang=\"ts\">\nimport { CloseCircleFilledIcon } from 'tdesign-icons-vue-next';\nimport { ref, computed, defineComponent, getCurrentInstance, toRefs, SetupContext, nextTick, watch } from 'vue';\nimport { useFocus } from '@vueuse/core';\nimport TCell from '../cell';\nimport config from '../config';\nimport InputProps from './props';\nimport ClASSNAMES from '../shared/constants';\nimport { InputValue, TdInputProps } from './type';\nimport { useEmitEvent, getCharacterLength, renderTNode, TNode, useDefault, extendAPI } from '../shared';\n\nconst { prefix } = config;\nconst componentName = `${prefix}-input`;\n\nexport default defineComponent({\n  name: componentName,\n  components: {\n    TNode,\n    TCell,\n    CloseCircleFilledIcon,\n  },\n  props: InputProps,\n  emits: ['update:value', 'update:modelValue', 'click-icon', 'focus', 'blur', 'change', 'clear'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const inputRef = ref();\n    const { autofocus } = toRefs(props);\n    const internalInstance = getCurrentInstance();\n    const [innerValue] = useDefault<string, TdInputProps>(props, context.emit, 'value', 'change');\n\n    const styleLabel = computed(() => ({\n      [`${componentName}--label`]: true,\n      [ClASSNAMES.STATUS.disabled]: props.disabled,\n    }));\n    const { focused } = useFocus(inputRef, { initialValue: props.autofocus });\n\n    const labelContent = computed(() => renderTNode(internalInstance, 'label'));\n    const suffixIconContent = computed(() => renderTNode(internalInstance, 'suffixIcon'));\n    const prefixIconContent = computed(() => renderTNode(internalInstance, 'prefixIcon'));\n    const suffixContent = computed(() => renderTNode(internalInstance, 'suffix'));\n\n    const styleControl = computed(() => [\n      `${componentName}__control`,\n      {\n        [`${componentName}__control--${props.align}`]: props.align !== 'left',\n      },\n    ]);\n\n    const styleWrapper = computed(() => ({\n      [componentName]: true,\n      [`${componentName}--size-${props.size}`]: props.size,\n      [`${componentName}__error`]: !!props.errorMessage,\n    }));\n\n    const setInputValue = (v: InputValue = '') => {\n      const input = inputRef.value as HTMLInputElement;\n      const sV = String(v);\n      if (!input) {\n        return;\n      }\n      if (input.value !== sV) {\n        input.value = sV;\n      }\n    };\n\n    const handleInput = (e: any) => {\n      // 中文输入的时候inputType是insertCompositionText所以中文输入的时候禁止触发。\n      const checkInputType = e.inputType && e.inputType === 'insertCompositionText';\n      if (e.isComposing || checkInputType) return;\n      inputValueChangeHandle(e);\n    };\n\n    const inputValueChangeHandle = (e: Event) => {\n      const { value } = e.target as HTMLInputElement;\n      const { maxcharacter } = props;\n      if (maxcharacter && maxcharacter > 0 && !Number.isNaN(maxcharacter)) {\n        const { length = 0, characters = '' } = getCharacterLength(value, maxcharacter) as {\n          length: number;\n          characters: string;\n        };\n        innerValue.value = characters;\n      } else {\n        innerValue.value = value;\n      }\n      nextTick(() => setInputValue(innerValue.value));\n    };\n\n    const focus = () => {\n      focused.value = true;\n    };\n\n    const blur = () => {\n      focused.value = false;\n      // inputRef.value?.blur();\n    };\n\n    extendAPI({ focus, blur });\n\n    const handleClear = (e: MouseEvent) => {\n      innerValue.value = '';\n      focused.value = true;\n      emitEvent('clear', { e });\n    };\n    const handleFocus = (e: FocusEvent) => {\n      emitEvent('focus', innerValue.value, { e });\n    };\n    const handleBlur = (e: FocusEvent) => {\n      emitEvent('blur', innerValue.value, { e });\n    };\n\n    const handleCompositionend = (e: InputEvent | CompositionEvent) => {\n      inputValueChangeHandle(e as InputEvent);\n    };\n\n    watch(autofocus, (autofocus, prevAutofocus) => {\n      if (autofocus === true) {\n        nextTick(() => {\n          focused.value = true;\n        });\n      }\n    });\n\n    return {\n      componentName,\n      ...toRefs(props),\n      styleLabel,\n      styleWrapper,\n      styleControl,\n      suffixContent,\n      suffixIconContent,\n      prefixIconContent,\n      labelContent,\n      innerValue,\n      inputRef,\n      handleClear,\n      handleFocus,\n      handleBlur,\n      handleInput,\n      handleCompositionend,\n    };\n  },\n});\n</script>\n","<template>\n  <t-cell :required=\"required\" :class=\"styleWrapper\">\n    <template v-if=\"labelContent\" #title>\n      <div :class=\"styleLabel\">\n        <t-node :content=\"labelContent\"></t-node>\n      </div>\n    </template>\n    <template v-if=\"prefixIconContent\" #leftIcon>\n      <t-node :content=\"prefixIconContent\"></t-node>\n    </template>\n    <template #note>\n      <div :class=\"`${componentName}__wrap`\">\n        <input\n          ref=\"inputRef\"\n          :value=\"innerValue\"\n          :name=\"name\"\n          :class=\"styleControl\"\n          :type=\"type\"\n          :disabled=\"disabled\"\n          :autocomplete=\"autocomplete ? 'On' : 'Off'\"\n          :placeholder=\"placeholder\"\n          :readonly=\"readonly\"\n          :maxlength=\"maxlength || -1\"\n          @focus=\"handleFocus\"\n          @blur=\"handleBlur\"\n          @input=\"handleInput\"\n          @compositionend=\"handleCompositionend\"\n        />\n        <div\n          v-if=\"clearable && innerValue && innerValue.length > 0\"\n          :class=\"`${componentName}__wrap--icon`\"\n          @click=\"handleClear\"\n        >\n          <close-circle-filled-icon />\n        </div>\n        <div v-if=\"suffixContent\" :class=\"`${componentName}__wrap--suffix`\">\n          <t-node :content=\"suffixContent\" />\n        </div>\n      </div>\n      <div v-if=\"errorMessage\" :class=\"`${componentName}__error-msg`\">{{ errorMessage }}</div>\n    </template>\n    <template v-if=\"suffixIconContent\" #rightIcon>\n      <t-node :content=\"suffixIconContent\"></t-node>\n    </template>\n  </t-cell>\n</template>\n\n<script lang=\"ts\">\nimport { CloseCircleFilledIcon } from 'tdesign-icons-vue-next';\nimport { ref, computed, defineComponent, getCurrentInstance, toRefs, SetupContext, nextTick, watch } from 'vue';\nimport { useFocus } from '@vueuse/core';\nimport TCell from '../cell';\nimport config from '../config';\nimport InputProps from './props';\nimport ClASSNAMES from '../shared/constants';\nimport { InputValue, TdInputProps } from './type';\nimport { useEmitEvent, getCharacterLength, renderTNode, TNode, useDefault, extendAPI } from '../shared';\n\nconst { prefix } = config;\nconst componentName = `${prefix}-input`;\n\nexport default defineComponent({\n  name: componentName,\n  components: {\n    TNode,\n    TCell,\n    CloseCircleFilledIcon,\n  },\n  props: InputProps,\n  emits: ['update:value', 'update:modelValue', 'click-icon', 'focus', 'blur', 'change', 'clear'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const inputRef = ref();\n    const { autofocus } = toRefs(props);\n    const internalInstance = getCurrentInstance();\n    const [innerValue] = useDefault<string, TdInputProps>(props, context.emit, 'value', 'change');\n\n    const styleLabel = computed(() => ({\n      [`${componentName}--label`]: true,\n      [ClASSNAMES.STATUS.disabled]: props.disabled,\n    }));\n    const { focused } = useFocus(inputRef, { initialValue: props.autofocus });\n\n    const labelContent = computed(() => renderTNode(internalInstance, 'label'));\n    const suffixIconContent = computed(() => renderTNode(internalInstance, 'suffixIcon'));\n    const prefixIconContent = computed(() => renderTNode(internalInstance, 'prefixIcon'));\n    const suffixContent = computed(() => renderTNode(internalInstance, 'suffix'));\n\n    const styleControl = computed(() => [\n      `${componentName}__control`,\n      {\n        [`${componentName}__control--${props.align}`]: props.align !== 'left',\n      },\n    ]);\n\n    const styleWrapper = computed(() => ({\n      [componentName]: true,\n      [`${componentName}--size-${props.size}`]: props.size,\n      [`${componentName}__error`]: !!props.errorMessage,\n    }));\n\n    const setInputValue = (v: InputValue = '') => {\n      const input = inputRef.value as HTMLInputElement;\n      const sV = String(v);\n      if (!input) {\n        return;\n      }\n      if (input.value !== sV) {\n        input.value = sV;\n      }\n    };\n\n    const handleInput = (e: any) => {\n      // 中文输入的时候inputType是insertCompositionText所以中文输入的时候禁止触发。\n      const checkInputType = e.inputType && e.inputType === 'insertCompositionText';\n      if (e.isComposing || checkInputType) return;\n      inputValueChangeHandle(e);\n    };\n\n    const inputValueChangeHandle = (e: Event) => {\n      const { value } = e.target as HTMLInputElement;\n      const { maxcharacter } = props;\n      if (maxcharacter && maxcharacter > 0 && !Number.isNaN(maxcharacter)) {\n        const { length = 0, characters = '' } = getCharacterLength(value, maxcharacter) as {\n          length: number;\n          characters: string;\n        };\n        innerValue.value = characters;\n      } else {\n        innerValue.value = value;\n      }\n      nextTick(() => setInputValue(innerValue.value));\n    };\n\n    const focus = () => {\n      focused.value = true;\n    };\n\n    const blur = () => {\n      focused.value = false;\n      // inputRef.value?.blur();\n    };\n\n    extendAPI({ focus, blur });\n\n    const handleClear = (e: MouseEvent) => {\n      innerValue.value = '';\n      focused.value = true;\n      emitEvent('clear', { e });\n    };\n    const handleFocus = (e: FocusEvent) => {\n      emitEvent('focus', innerValue.value, { e });\n    };\n    const handleBlur = (e: FocusEvent) => {\n      emitEvent('blur', innerValue.value, { e });\n    };\n\n    const handleCompositionend = (e: InputEvent | CompositionEvent) => {\n      inputValueChangeHandle(e as InputEvent);\n    };\n\n    watch(autofocus, (autofocus, prevAutofocus) => {\n      if (autofocus === true) {\n        nextTick(() => {\n          focused.value = true;\n        });\n      }\n    });\n\n    return {\n      componentName,\n      ...toRefs(props),\n      styleLabel,\n      styleWrapper,\n      styleControl,\n      suffixContent,\n      suffixIconContent,\n      prefixIconContent,\n      labelContent,\n      innerValue,\n      inputRef,\n      handleClear,\n      handleFocus,\n      handleBlur,\n      handleInput,\n      handleCompositionend,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}