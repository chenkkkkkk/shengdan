{"ast":null,"code":"/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport { calculateNodeSize } from './helper.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '@babel/runtime/helpers/objectWithoutProperties';\nimport '@babel/runtime/helpers/slicedToArray';\nimport '@babel/runtime/helpers/defineProperty';\nvar TEXTAREA_STYLE = \"\\n  min-height:0 !important;\\n  max-height:none !important;\\n  height:0 !important;\\n  visibility:hidden !important;\\n  overflow:hidden !important;\\n  position:absolute !important;\\n  z-index:-1000 !important;\\n  top:0 !important;\\n  right:0 !important\\n\";\nvar hiddenTextarea;\nfunction calcTextareaHeight(targetElement) {\n  var _hiddenTextarea, _hiddenTextarea$paren;\n  var minRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var maxRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement(\"textarea\");\n    document.body.appendChild(hiddenTextarea);\n  }\n  var _calculateNodeSize = calculateNodeSize(targetElement),\n    paddingSize = _calculateNodeSize.paddingSize,\n    borderSize = _calculateNodeSize.borderSize,\n    boxSizing = _calculateNodeSize.boxSizing,\n    sizingStyle = _calculateNodeSize.sizingStyle;\n  hiddenTextarea.setAttribute(\"style\", \"\".concat(sizingStyle, \";\").concat(TEXTAREA_STYLE));\n  hiddenTextarea.value = targetElement.value || targetElement.placeholder || \"\";\n  var height = hiddenTextarea.scrollHeight;\n  var result = {};\n  var isBorderbox = boxSizing === \"border-box\";\n  var isContentbox = boxSizing === \"content-box\";\n  if (isBorderbox) {\n    height += borderSize;\n  } else if (isContentbox) {\n    height -= paddingSize;\n  }\n  hiddenTextarea.value = \"\";\n  var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n  (_hiddenTextarea = hiddenTextarea) === null || _hiddenTextarea === void 0 ? void 0 : (_hiddenTextarea$paren = _hiddenTextarea.parentNode) === null || _hiddenTextarea$paren === void 0 ? void 0 : _hiddenTextarea$paren.removeChild(hiddenTextarea);\n  hiddenTextarea = null;\n  var calcHeight = function calcHeight(rows) {\n    var rowsHeight = singleRowHeight * rows;\n    if (isBorderbox) {\n      rowsHeight = rowsHeight + paddingSize + borderSize;\n    }\n    return rowsHeight;\n  };\n  if (minRows !== null) {\n    var minHeight = calcHeight(minRows);\n    height = Math.max(minHeight, height);\n    result.minHeight = \"\".concat(minHeight, \"px\");\n  }\n  if (maxRows !== null) {\n    height = Math.min(calcHeight(maxRows), height);\n  }\n  result.height = \"\".concat(height, \"px\");\n  return result;\n}\nexport { calcTextareaHeight as default };","map":{"version":3,"mappings":";;;;;;;;;;;AASA,IAAMA,cAAiB;AAYvB,IAAIC;AAEJ,SAASC,kBACP,gBAGoB;EAAA;EAAA,IAFpBC,OAAqB;EAAA,IACrBC,8EAAqB,IACD;EACpB,IAAI,CAACH,cAAgB;IACFA,0BAASI,cAAc,UAAU;IACzCC,cAAKC,YAAYN,cAAc;EAC1C;EAEM,IAKFO,uCAAkBC,aAAa;IAJjCC;IACAC;IACAC;IACAC;EAGFZ,eAAea,YAAa,oBAAYD,yBAAeb,cAAgB;EACvEC,eAAec,KAAQ,iBAAcA,KAAS,kBAAcC,WAAe;EAE3E,IAAIC,SAAShB,cAAe;EAC5B,IAAMiB,SAA6B,EAAC;EACpC,IAAMC,cAAcP,SAAc;EAClC,IAAMQ,eAAeR,SAAc;EAEnC,IAAIO,WAAa;IACLF;aACDG,YAAc;IACbH;EACZ;EAEAhB,eAAec,KAAQ;EACjB,sBAAkBd,eAAeoB,YAAe;EACtC,uNAAYC,aAAYrB,cAAc;EAErCA;EAEX,iBAAa,SAAbsB,WAAcC,IAAiB;IACnC,IAAIC,aAAaC,eAAkB;IACnC,IAAIP,WAAa;MACfM,aAAaA,aAAaf,WAAc;IAC1C;IACO;GACT;EAEA,IAAIP,YAAY,IAAM;IACd,gBAAYoB,WAAWpB,OAAO;IAC3Bc,cAAKU,GAAI,YAAWV,MAAM;IACnCC,OAAOU,YAAeA;EACxB;EACA,IAAIxB,YAAY,IAAM;IACpBa,SAASY,IAAK,KAAIN,UAAW,QAAO,GAAGN,MAAM;EAC/C;EACAC,OAAOD,SAAYA;EACZ;AACT","names":["TEXTAREA_STYLE","hiddenTextarea","calcTextareaHeight","minRows","maxRows","createElement","document","appendChild","calculateNodeSize","targetElement","paddingSize","borderSize","boxSizing","sizingStyle","setAttribute","value","placeholder","height","result","isBorderbox","isContentbox","scrollHeight","removeChild","calcHeight","rows","rowsHeight","singleRowHeight","max","minHeight","Math"],"sources":["../../../../src/_common/js/utils/calcTextareaHeight.ts"],"sourcesContent":["import { calculateNodeSize } from './helper';\n\ntype CalculateStyleType = {\n  height?: string,\n  minHeight?: string\n};\n\ntype LimitType = number | null;\n\nconst TEXTAREA_STYLE = `\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n`;\n\nlet hiddenTextarea: HTMLTextAreaElement;\n\nfunction calcTextareaHeight(\n  targetElement: HTMLTextAreaElement,\n  minRows: LimitType = 1,\n  maxRows: LimitType = null,\n): CalculateStyleType {\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea');\n    document.body.appendChild(hiddenTextarea);\n  }\n\n  const {\n    paddingSize,\n    borderSize,\n    boxSizing,\n    sizingStyle,\n  } = calculateNodeSize(targetElement);\n\n  hiddenTextarea.setAttribute('style', `${sizingStyle};${TEXTAREA_STYLE}`);\n  hiddenTextarea.value = targetElement.value || targetElement.placeholder || '';\n\n  let height = hiddenTextarea.scrollHeight;\n  const result: CalculateStyleType = {};\n  const isBorderbox = boxSizing === 'border-box';\n  const isContentbox = boxSizing === 'content-box';\n\n  if (isBorderbox) {\n    height += borderSize;\n  } else if (isContentbox) {\n    height -= paddingSize;\n  }\n\n  hiddenTextarea.value = '';\n  const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n  hiddenTextarea?.parentNode?.removeChild(hiddenTextarea);\n  // @ts-ignore\n  hiddenTextarea = null;\n\n  const calcHeight = (rows: number) => {\n    let rowsHeight = singleRowHeight * rows;\n    if (isBorderbox) {\n      rowsHeight = rowsHeight + paddingSize + borderSize;\n    }\n    return rowsHeight;\n  };\n\n  if (minRows !== null) {\n    const minHeight = calcHeight(minRows);\n    height = Math.max(minHeight, height);\n    result.minHeight = `${minHeight}px`;\n  }\n  if (maxRows !== null) {\n    height = Math.min(calcHeight(maxRows), height);\n  }\n  result.height = `${height}px`;\n  return result;\n}\n\nexport default calcTextareaHeight;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}