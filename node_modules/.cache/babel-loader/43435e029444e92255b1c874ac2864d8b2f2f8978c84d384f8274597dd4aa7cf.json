{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { LoadingIcon, CheckCircleIcon, ErrorCircleIcon } from 'tdesign-icons-vue-next';\nimport { defineComponent, getCurrentInstance, computed, h, ref, toRefs, resolveComponent, openBlock, createElementBlock, createVNode, normalizeProps, guardReactiveProps, createElementVNode, normalizeClass, createCommentVNode } from 'vue';\nimport '../shared/index.js';\nimport Overlay from '../overlay/index.js';\nimport ToastProps from './props.js';\nimport config from '../config.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { renderTNode } from '../shared/render.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useEmitEvent/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/typeof';\nimport '../overlay/overlay.js';\nimport '../overlay/props.js';\nimport './style/css.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-toast\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    TOverlay: Overlay,\n    TNode: TNodeComponent\n  },\n  props: ToastProps,\n  setup: function setup(props) {\n    var toastTypeIcon = {\n      loading: LoadingIcon,\n      success: CheckCircleIcon,\n      fail: ErrorCircleIcon\n    };\n    var internalInstance = getCurrentInstance();\n    var messageContent = computed(function () {\n      return renderTNode(internalInstance, \"message\");\n    });\n    var iconContent = computed(function () {\n      var iconNode = renderTNode(internalInstance, \"icon\");\n      if (iconNode === void 0 && props.theme) {\n        iconNode = h(toastTypeIcon[props.theme]);\n      }\n      return iconNode;\n    });\n    var classes = computed(function () {\n      var _ref;\n      return [\"\".concat(name), (_ref = {}, _defineProperty(_ref, \"\".concat(name, \"--\").concat(props.direction), props.direction), _defineProperty(_ref, \"\".concat(name, \"--text\"), !iconContent.value), _defineProperty(_ref, \"\".concat(name, \"--icononly\"), !messageContent.value && iconContent.value), _defineProperty(_ref, \"\".concat(name, \"--top\"), props.placement === \"top\"), _defineProperty(_ref, \"\".concat(name, \"--middle\"), props.placement === \"middle\"), _defineProperty(_ref, \"\".concat(name, \"--bottom\"), props.placement === \"bottom\"), _ref)];\n    });\n    var customOverlayProps = computed(function () {\n      var toastOverlayProps = {\n        preventScrollThrough: props.preventScrollThrough,\n        visible: props.showOverlay\n      };\n      return _objectSpread(_objectSpread({}, props.overlayProps), toastOverlayProps);\n    });\n    return _objectSpread({\n      name: ref(name),\n      classes: classes,\n      iconContent: iconContent,\n      messageContent: messageContent,\n      customOverlayProps: customOverlayProps\n    }, toRefs(props));\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_overlay = resolveComponent(\"t-overlay\");\n  var _component_t_node = resolveComponent(\"t-node\");\n  return openBlock(), createElementBlock(\"div\", null, [createVNode(_component_t_overlay, normalizeProps(guardReactiveProps(_ctx.customOverlayProps)), null, 16), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.classes)\n  }, [createVNode(_component_t_node, {\n    content: _ctx.iconContent\n  }, null, 8, [\"content\"]), _ctx.messageContent ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__text\"))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.messageContent\n  }, null, 8, [\"content\"])], 2)) : createCommentVNode(\"\", true)], 2)]);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAQA,SAAWC,OAAXD;AACR,IAAME,OAAUF;AAEhB,aAAeG,eAAgB;EAC7BD;EACAE,YAAY;IAAEC;IAAUC,KAAM,EAANA;GAAM;EAC9BC,KAAO;EACPC,sBAAMD,KAAO;IACX,IAAME,aAAgB;MACpBC,OAAS;MACTC,OAAS;MACTC,IAAM;KACR;IACA,IAAMC,mBAAmBC,kBAAmB;IAC5C,IAAMC,iBAAiBC,QAAS;MAAA,OAAMC,WAAY,mBAAkB,SAAS,CAAC;KAAA;IACxE,kBAAcD,SAAS,YAAM;MAC7B,eAAWC,WAAY,mBAAkB,MAAM;MAC/C,iBAAa,KAAa,WAAMC,KAAO;QAC9BC,aAAEV,aAAc,OAAMS,KAAM;MACzC;MACO;IACT,CAAC;IAEK,cAAUF,SAAS;MAAA;MAAA,OAAM,WAC1Bd,mDAEGA,IAAS,qBAAMkB,UAAcb,OAAM,6CACnCL,IAAe,cAACmB,WAAY,OAC5BnB,wCAAmB,gBAACa,eAAeO,SAASD,WAAY,OACxDnB,sCAAc,kBAAMqB,SAAc,6CAClCrB,IAAiB,qBAAMqB,SAAc,cACrCrB,sCAAiB,qBAAMqB,SAAc,cAE5C;KAAA;IAEK,yBAAqBP,SAAS,YAAM;MACxC,IAAMQ,iBAAoB;QACxBC,sBAAsBlB,KAAM;QAC5BmB,SAASnB,KAAM;OACjB;MAEO,uCACFA,KAAM,gBACNiB;IAEP,CAAC;IAEM;MACLtB,MAAMyB,IAAIzB,IAAI;MACd0B;MACAP;MACAN;MACAc;KACGC,SAAOvB,KAAK;EAEnB;AACF,CAAC;;;;sBC3ECwB,kBAQK,eAPHC,YAAwCC,wDAArBC,KAAkBL,iCACrCM,mBAKK;IALCC,qBAAO,MAAOR;MAClBI,YAAuCK;IAA9BC,OAAS,OAAWjB;GAAA,yBAClBa,IAAc,gCAAzBH,mBAEK;;IAFuBK,sBAAUF,eAAIhC;MACxC8B,YAA0CK;IAAjCC,OAAS,OAAcvB;GAAA","names":["prefix","config","name","defineComponent","components","TOverlay","TNode","props","setup","toastTypeIcon","loading","success","fail","internalInstance","getCurrentInstance","messageContent","computed","renderTNode","theme","iconNode","direction","iconContent","value","placement","toastOverlayProps","preventScrollThrough","visible","ref","classes","customOverlayProps","toRefs","_createElementBlock","_createVNode","_component_t_overlay","_ctx","_createElementVNode","class","_component_t_node","content"],"sources":["../../src/toast/toast.vue","../../src/toast/toast.vue?vue&type=template&id=0bd1ff37&lang.js"],"sourcesContent":["<template>\n  <div>\n    <t-overlay v-bind=\"customOverlayProps\" />\n    <div :class=\"classes\">\n      <t-node :content=\"iconContent\"></t-node>\n      <div v-if=\"messageContent\" :class=\"`${name}__text`\">\n        <t-node :content=\"messageContent\"></t-node>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { LoadingIcon, CheckCircleIcon, ErrorCircleIcon } from 'tdesign-icons-vue-next';\nimport { computed, toRefs, ref, defineComponent, getCurrentInstance, h } from 'vue';\nimport { renderTNode, TNode } from '../shared';\nimport TOverlay from '../overlay';\nimport ToastProps from './props';\nimport config from '../config';\n\nconst { prefix } = config;\nconst name = `${prefix}-toast`;\n\nexport default defineComponent({\n  name,\n  components: { TOverlay, TNode },\n  props: ToastProps,\n  setup(props) {\n    const toastTypeIcon = {\n      loading: LoadingIcon,\n      success: CheckCircleIcon,\n      fail: ErrorCircleIcon,\n    };\n    const internalInstance = getCurrentInstance();\n    const messageContent = computed(() => renderTNode(internalInstance, 'message'));\n    const iconContent = computed(() => {\n      let iconNode = renderTNode(internalInstance, 'icon');\n      if (iconNode === undefined && props.theme) {\n        iconNode = h(toastTypeIcon[props.theme]);\n      }\n      return iconNode;\n    });\n\n    const classes = computed(() => [\n      `${name}`,\n      {\n        [`${name}--${props.direction}`]: props.direction,\n        [`${name}--text`]: !iconContent.value,\n        [`${name}--icononly`]: !messageContent.value && iconContent.value,\n        [`${name}--top`]: props.placement === 'top',\n        [`${name}--middle`]: props.placement === 'middle',\n        [`${name}--bottom`]: props.placement === 'bottom',\n      },\n    ]);\n\n    const customOverlayProps = computed(() => {\n      const toastOverlayProps = {\n        preventScrollThrough: props.preventScrollThrough,\n        visible: props.showOverlay,\n      };\n\n      return {\n        ...props.overlayProps,\n        ...toastOverlayProps,\n      };\n    });\n\n    return {\n      name: ref(name),\n      classes,\n      iconContent,\n      messageContent,\n      customOverlayProps,\n      ...toRefs(props),\n    };\n  },\n});\n</script>\n","<template>\n  <div>\n    <t-overlay v-bind=\"customOverlayProps\" />\n    <div :class=\"classes\">\n      <t-node :content=\"iconContent\"></t-node>\n      <div v-if=\"messageContent\" :class=\"`${name}__text`\">\n        <t-node :content=\"messageContent\"></t-node>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { LoadingIcon, CheckCircleIcon, ErrorCircleIcon } from 'tdesign-icons-vue-next';\nimport { computed, toRefs, ref, defineComponent, getCurrentInstance, h } from 'vue';\nimport { renderTNode, TNode } from '../shared';\nimport TOverlay from '../overlay';\nimport ToastProps from './props';\nimport config from '../config';\n\nconst { prefix } = config;\nconst name = `${prefix}-toast`;\n\nexport default defineComponent({\n  name,\n  components: { TOverlay, TNode },\n  props: ToastProps,\n  setup(props) {\n    const toastTypeIcon = {\n      loading: LoadingIcon,\n      success: CheckCircleIcon,\n      fail: ErrorCircleIcon,\n    };\n    const internalInstance = getCurrentInstance();\n    const messageContent = computed(() => renderTNode(internalInstance, 'message'));\n    const iconContent = computed(() => {\n      let iconNode = renderTNode(internalInstance, 'icon');\n      if (iconNode === undefined && props.theme) {\n        iconNode = h(toastTypeIcon[props.theme]);\n      }\n      return iconNode;\n    });\n\n    const classes = computed(() => [\n      `${name}`,\n      {\n        [`${name}--${props.direction}`]: props.direction,\n        [`${name}--text`]: !iconContent.value,\n        [`${name}--icononly`]: !messageContent.value && iconContent.value,\n        [`${name}--top`]: props.placement === 'top',\n        [`${name}--middle`]: props.placement === 'middle',\n        [`${name}--bottom`]: props.placement === 'bottom',\n      },\n    ]);\n\n    const customOverlayProps = computed(() => {\n      const toastOverlayProps = {\n        preventScrollThrough: props.preventScrollThrough,\n        visible: props.showOverlay,\n      };\n\n      return {\n        ...props.overlayProps,\n        ...toastOverlayProps,\n      };\n    });\n\n    return {\n      name: ref(name),\n      classes,\n      iconContent,\n      messageContent,\n      customOverlayProps,\n      ...toRefs(props),\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}