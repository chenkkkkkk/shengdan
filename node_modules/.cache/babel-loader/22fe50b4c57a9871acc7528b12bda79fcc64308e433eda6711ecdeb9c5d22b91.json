{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport { defineComponent, computed, toRefs, openBlock, createElementBlock, normalizeClass, toDisplayString, createCommentVNode, createElementVNode, normalizeStyle } from 'vue';\nimport '../shared/index.js';\nimport config from '../config.js';\nimport SwitchProps from './props.js';\nimport ClASSNAMES from '../shared/constants.js';\nimport { useDefault } from '../shared/useDefault/index.js';\nimport { useToggle } from '../shared/useToggle/index.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/render.js';\nimport '@babel/runtime/helpers/typeof';\nimport 'lodash/camelCase';\nimport '../shared/render-tnode.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useEmitEvent/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-switch\");\nvar script = defineComponent({\n  name: name,\n  props: SwitchProps,\n  emits: [\"change\", \"update:value\", \"update:modelValue\"],\n  setup: function setup(props, context) {\n    var switchValues = props.customValue || [true, false];\n    var _useDefault = useDefault(props, context.emit, \"value\", \"change\"),\n      _useDefault2 = _slicedToArray(_useDefault, 1),\n      innerValue = _useDefault2[0];\n    var _useToggle = useToggle(switchValues, innerValue.value),\n      state = _useToggle.state,\n      toggle = _useToggle.toggle;\n    var classes = computed(function () {\n      var _ref;\n      return [\"\".concat(name), (_ref = {}, _defineProperty(_ref, ClASSNAMES.STATUS.checked, innerValue.value === switchValues[0]), _defineProperty(_ref, ClASSNAMES.STATUS.disabled, props.disabled), _ref)];\n    });\n    var backgroundColor = computed(function () {\n      if (!props.disabled && props.colors) {\n        return \"background-color: \".concat(innerValue.value === switchValues[0] ? props.colors[0] : props.colors[1]);\n      }\n      return \"\";\n    });\n    function handleToggle(event) {\n      event.preventDefault();\n      if (props.disabled) {\n        return;\n      }\n      toggle();\n      innerValue.value = state.value;\n    }\n    return _objectSpread(_objectSpread({\n      name: name,\n      classes: classes,\n      backgroundColor: backgroundColor\n    }, toRefs(props)), {}, {\n      handleToggle: handleToggle\n    });\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"span\", {\n    class: normalizeClass(_ctx.classes)\n  }, [_ctx.label ? (openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__text\"))\n  }, toDisplayString(_ctx.label), 3)) : createCommentVNode(\"\", true), createElementVNode(\"span\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__node\")),\n    style: normalizeStyle(_ctx.backgroundColor),\n    onClick: _cache[0] || (_cache[0] = function () {\n      return _ctx.handleToggle && _ctx.handleToggle.apply(_ctx, arguments);\n    })\n  }, null, 6)], 2);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,IAAQA,SAAWC,OAAXD;AACR,IAAME,OAAUF;AAEhB,aAAeG,eAAgB;EAC7BD;EACAE,KAAO;EACPC,KAAO,GAAC,QAAU,kBAAgB,mBAAmB;EACrDC,OAAMF,sBAAOG,OAAuB;IAClC,IAAMC,YAAe,SAAMC,WAAe,KAAC,MAAM,KAAK;IAChD,IAAeC,yBAAuCN,OAAOG,OAAQ,OAAM,SAAS,QAAQ;MAAAI;MAA3FC,UAAU;IACjB,iBAA0BC,SAAuB,eAAcD,WAAWE,KAAK;MAAvEC,KAAO,cAAPA,KAAO;MAAAC;IACT,cAAUC,SAAS;MAAA;MAAA,OAAM,WAC1Bf,yCAEAgB,UAAW,QAAOC,OAAU,aAAWL,UAAUN,YAAa,IAC9DU,mCAAWE,MAAO,WAAWhB,KAAM,UAEvC;KAAA;IAEK,sBAAkBa,SAAS,YAAM;MACrC,IAAI,CAACb,MAAMiB,QAAY,UAAMC,MAAQ;QAC5B,OAAqBV,uCAAWE,KAAU,kBAAa,KAAKV,KAAM,QAAO,CAAK,UAAMkB,MAAO;MACpG;MACO;IACT,CAAC;IAED,SAASC,aAAaC,KAAc;MAClCA,MAAMC,cAAe;MACrB,IAAIrB,MAAMiB,QAAU;QAClB;MACF;MACOL;MACPJ,WAAWE,QAAQC,KAAM;IAC3B;IACO;MACLb;MACAwB;MACAC;KACGC,SAAOxB,KAAK;MACfmB;IAAA;EAEJ;AACF,CAAC;;oBC1DC,qBAKM;IALCM,qBAAO,MAAOH;MACPI,IAAK,uBAAjBC,mBAEM;;IAFcF,sBAAUC,eAAI5B;qBAC7B4B,iDAELE,mBAAqF;IAA9EH,gCAAUC,KAAI5B;IAAW+B,qBAAO,MAAeN;IAAGO;aAAOJ,KAAYP;IAAA","names":["prefix","config","name","defineComponent","props","emits","setup","context","switchValues","customValue","useDefault","_useDefault2","innerValue","useToggle","value","state","toggle","computed","ClASSNAMES","checked","STATUS","disabled","colors","handleToggle","event","preventDefault","classes","backgroundColor","toRefs","class","_ctx","_createElementBlock","_createElementVNode","style","onClick"],"sources":["../../src/switch/switch.vue","../../src/switch/switch.vue?vue&type=template&id=8006e8e6&lang.js"],"sourcesContent":["<template>\n  <span :class=\"classes\">\n    <span v-if=\"label\" :class=\"`${name}__text`\">\n      {{ label }}\n    </span>\n    <span :class=\"`${name}__node`\" :style=\"backgroundColor\" @click=\"handleToggle\"> </span>\n  </span>\n</template>\n\n<script lang=\"ts\">\nimport { computed, toRefs, defineComponent, SetupContext } from 'vue';\nimport { useToggle, useDefault } from '../shared';\nimport config from '../config';\nimport SwitchProps from './props';\nimport ClASSNAMES from '../shared/constants';\nimport { SwitchValue, TdSwitchProps } from './type';\n\nconst { prefix } = config;\nconst name = `${prefix}-switch`;\n\nexport default defineComponent({\n  name,\n  props: SwitchProps,\n  emits: ['change', 'update:value', 'update:modelValue'],\n  setup(props, context: SetupContext) {\n    const switchValues = props.customValue || [true, false];\n    const [innerValue] = useDefault<SwitchValue, TdSwitchProps>(props, context.emit, 'value', 'change');\n    const { state, toggle } = useToggle<SwitchValue>(switchValues, innerValue.value);\n    const classes = computed(() => [\n      `${name}`,\n      {\n        [ClASSNAMES.STATUS.checked]: innerValue.value === switchValues[0],\n        [ClASSNAMES.STATUS.disabled]: props.disabled,\n      },\n    ]);\n\n    const backgroundColor = computed(() => {\n      if (!props.disabled && props.colors) {\n        return `background-color: ${innerValue.value === switchValues[0] ? props.colors[0] : props.colors[1]}`;\n      }\n      return ``;\n    });\n\n    function handleToggle(event: Event) {\n      event.preventDefault();\n      if (props.disabled) {\n        return;\n      }\n      toggle();\n      innerValue.value = state.value;\n    }\n    return {\n      name,\n      classes,\n      backgroundColor,\n      ...toRefs(props),\n      handleToggle,\n    };\n  },\n});\n</script>\n","<template>\n  <span :class=\"classes\">\n    <span v-if=\"label\" :class=\"`${name}__text`\">\n      {{ label }}\n    </span>\n    <span :class=\"`${name}__node`\" :style=\"backgroundColor\" @click=\"handleToggle\"> </span>\n  </span>\n</template>\n\n<script lang=\"ts\">\nimport { computed, toRefs, defineComponent, SetupContext } from 'vue';\nimport { useToggle, useDefault } from '../shared';\nimport config from '../config';\nimport SwitchProps from './props';\nimport ClASSNAMES from '../shared/constants';\nimport { SwitchValue, TdSwitchProps } from './type';\n\nconst { prefix } = config;\nconst name = `${prefix}-switch`;\n\nexport default defineComponent({\n  name,\n  props: SwitchProps,\n  emits: ['change', 'update:value', 'update:modelValue'],\n  setup(props, context: SetupContext) {\n    const switchValues = props.customValue || [true, false];\n    const [innerValue] = useDefault<SwitchValue, TdSwitchProps>(props, context.emit, 'value', 'change');\n    const { state, toggle } = useToggle<SwitchValue>(switchValues, innerValue.value);\n    const classes = computed(() => [\n      `${name}`,\n      {\n        [ClASSNAMES.STATUS.checked]: innerValue.value === switchValues[0],\n        [ClASSNAMES.STATUS.disabled]: props.disabled,\n      },\n    ]);\n\n    const backgroundColor = computed(() => {\n      if (!props.disabled && props.colors) {\n        return `background-color: ${innerValue.value === switchValues[0] ? props.colors[0] : props.colors[1]}`;\n      }\n      return ``;\n    });\n\n    function handleToggle(event: Event) {\n      event.preventDefault();\n      if (props.disabled) {\n        return;\n      }\n      toggle();\n      innerValue.value = state.value;\n    }\n    return {\n      name,\n      classes,\n      backgroundColor,\n      ...toRefs(props),\n      handleToggle,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}