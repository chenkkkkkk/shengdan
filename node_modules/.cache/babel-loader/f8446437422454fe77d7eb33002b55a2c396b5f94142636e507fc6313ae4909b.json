{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { defineComponent, getCurrentInstance, computed, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createVNode, createCommentVNode } from 'vue';\nimport '../shared/index.js';\nimport BadgeProps from './props.js';\nimport config from '../config.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { renderContent, renderTNode } from '../shared/render.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useEmitEvent/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/typeof';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar name = \"\".concat(config.prefix, \"-badge\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    TNode: TNodeComponent\n  },\n  props: BadgeProps,\n  setup: function setup(props) {\n    var internalInstance = getCurrentInstance();\n    var badgeContent = computed(function () {\n      return renderContent(internalInstance, \"default\", \"content\");\n    });\n    var countContent = computed(function () {\n      if (props.dot) {\n        return \"\";\n      }\n      if (typeof props.count === \"function\") {\n        return renderTNode(internalInstance, \"count\");\n      }\n      var count = Number(props.count);\n      if (isNaN(count)) {\n        return props.count;\n      }\n      return count > props.maxCount ? \"\".concat(props.maxCount, \"+\") : count;\n    });\n    var isIndependent = computed(function () {\n      return badgeContent.value === void 0;\n    });\n    var showDot = computed(function () {\n      return props.dot || props.count !== 0 || props.showZero;\n    });\n    var badgeClasses = computed(function () {\n      var _ref;\n      return _ref = {}, _defineProperty(_ref, \"\".concat(name), true), _defineProperty(_ref, \"\".concat(name, \"__ribbon--outer\"), props.shape === \"ribbon\"), _ref;\n    });\n    var badgeInnerClasses = computed(function () {\n      var _ref2;\n      return _ref2 = {}, _defineProperty(_ref2, \"\".concat(name, \"__inner\"), true), _defineProperty(_ref2, \"\".concat(name, \"--has-children\"), !isIndependent.value), _defineProperty(_ref2, \"\".concat(name, \"--\").concat(props.size), props.size), _defineProperty(_ref2, \"\".concat(name, \"--\").concat(props.shape), props.shape && !props.dot), _defineProperty(_ref2, \"\".concat(name, \"--dot\"), props.dot), _ref2;\n    });\n    var badgeStyles = computed(function () {\n      if (!props.offset) {\n        return {\n          background: props.color\n        };\n      }\n      var _props$offset = _slicedToArray(props.offset, 2),\n        xOffset = _props$offset[0],\n        yOffset = _props$offset[1];\n      xOffset = isNaN(Number(xOffset)) ? xOffset : \"\".concat(xOffset, \"px\");\n      yOffset = isNaN(Number(yOffset)) ? yOffset : \"\".concat(yOffset, \"px\");\n      return {\n        background: props.color,\n        right: xOffset,\n        top: yOffset\n      };\n    });\n    return _objectSpread(_objectSpread({\n      badgeContent: badgeContent,\n      showDot: showDot,\n      badgeStyles: badgeStyles,\n      badgeClasses: badgeClasses,\n      badgeInnerClasses: badgeInnerClasses\n    }, toRefs(props)), {}, {\n      countContent: countContent\n    });\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_node = resolveComponent(\"t-node\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.badgeClasses)\n  }, [_ctx.showDot ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.badgeInnerClasses),\n    style: normalizeStyle(_ctx.badgeStyles)\n  }, [createVNode(_component_t_node, {\n    content: _ctx.countContent\n  }, null, 8, [\"content\"])], 6)) : createCommentVNode(\"\", true), createVNode(_component_t_node, {\n    content: _ctx.badgeContent\n  }, null, 8, [\"content\"])], 2);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA,IAAMA,iBAAUC,MAAO;AAEvB,aAAeC,eAAgB;EAC7BF;EACAG,YAAY;IAAEC,KAAM,EAANA;GAAM;EACpBC,KAAO;EACPC,sBAAMD,KAAO;IACX,IAAME,mBAAmBC,kBAAmB;IAC5C,IAAMC,eAAeC,QAAS;MAAA,OAAMC,cAAcJ,gBAAkB,aAAW,SAAS,CAAC;KAAA;IACnF,mBAAeG,SAAS,YAAM;MAClC,IAAIL,MAAMO,GAAK;QACN;MACT;MACI,WAAOP,KAAM,WAAU,UAAY;QAC9B,mBAAYE,kBAAkB,OAAO;MAC9C;MACM,YAAQM,MAAO,OAAMC,KAAK;MAC5B,UAAMA,KAAK,CAAG;QAChB,OAAOT,KAAM;MACf;MACA,OAAOS,KAAQ,SAAMC,QAAW,aAAGV,MAAMU,QAAc;IACzD,CAAC;IAED,IAAMC,aAAgB,YAAS;MAAA,OAAMP,aAAaQ,UAAU,KAAS;KAAA;IAG/D,cAAUP,SAAS;MAAA,OAAML,MAAMO,OAAOP,KAAM,WAAU,CAAK,UAAMa,QAAQ;KAAA;IAGzE,mBAAeR,SAAS;MAAA;MAAA,OACxBV,+CAAS,QACTA,sCAAwB,4BAAMmB,KAAU;IAAA,CAC5C;IAGI,wBAAoBT,SAAS;MAAA;MAAA,oDAC7BV,IAAgB,sDAChBA,IAAuB,sBAACgB,aAAc,0CACtChB,IAAS,qBAAMoB,OAASf,KAAM,MAC9BL,uCAAS,qBAAMmB,MAAUd,OAAM,UAAS,CAACA,KAAM,wCAC/CL,MAAcK,eAAM;IAAA,CACxB;IAGI,kBAAcK,SAAS,YAAM;MAC7B,KAACL,MAAMgB,MAAQ;QACV;UAAEC,UAAY,QAAMC;SAAM;MACnC;MACA,IAAiDlB,oCAAM;QAAlDmB;QAASC,OAAO;MACrBD,UAAUE,MAAMb,MAAO,QAAO,CAAC,IAAIW,UAAaA;MAChDC,UAAUC,MAAMb,MAAO,QAAO,CAAC,IAAIY,UAAaA;MACzC;QACLH,YAAYjB,KAAM;QAClBsB,KAAO;QACPC,GAAK;OACP;IACF,CAAC;IAEM;MACLnB;MACAoB;MACAC;MACAC;MACAC;KACGC,SAAO5B,KAAK;MACf6B;IAAA;EAEJ;AACF,CAAC;;;oBClFC,qBAKK;IALCC,qBAAO,MAAYJ;MACZK,IAAO,yBAAlBC,mBAEK;;IAFgBF,qBAAO,MAAiBH;IAAGM,qBAAO,MAAWR;MAChES,YAAwCC;IAA/BC,OAAS,OAAYP;GAAA,8DAEhCK,YAAwCC;IAA/BC,OAAS,OAAYhC;EAAA","names":["name","config","defineComponent","components","TNode","props","setup","internalInstance","getCurrentInstance","badgeContent","computed","renderContent","dot","Number","count","maxCount","isIndependent","value","showZero","shape","size","offset","background","color","xOffset","yOffset","isNaN","right","top","showDot","badgeStyles","badgeClasses","badgeInnerClasses","toRefs","countContent","class","_ctx","_createElementBlock","style","_createVNode","_component_t_node","content"],"sources":["../../src/badge/badge.vue","../../src/badge/badge.vue?vue&type=template&id=12fcd826&lang.js"],"sourcesContent":["<template>\n  <div :class=\"badgeClasses\">\n    <div v-if=\"showDot\" :class=\"badgeInnerClasses\" :style=\"badgeStyles\">\n      <t-node :content=\"countContent\"></t-node>\n    </div>\n    <t-node :content=\"badgeContent\"></t-node>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, toRefs } from 'vue';\nimport { renderContent, renderTNode, TNode } from '../shared';\nimport BadgeProps from './props';\nimport config from '../config';\n\nconst name = `${config.prefix}-badge`;\n\nexport default defineComponent({\n  name,\n  components: { TNode },\n  props: BadgeProps,\n  setup(props) {\n    const internalInstance = getCurrentInstance();\n    const badgeContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const countContent = computed(() => {\n      if (props.dot) {\n        return '';\n      }\n      if (typeof props.count === 'function') {\n        return renderTNode(internalInstance, 'count');\n      }\n      const count = Number(props.count);\n      if (isNaN(count)) {\n        return props.count;\n      }\n      return count > props.maxCount ? `${props.maxCount}+` : count;\n    });\n    // 是否独立使用\n    const isIndependent = computed(() => badgeContent.value === undefined);\n\n    // 是否展示红点角标\n    const showDot = computed(() => props.dot || props.count !== 0 || props.showZero);\n\n    // 徽标外层样式类\n    const badgeClasses = computed(() => ({\n      [`${name}`]: true,\n      [`${name}__ribbon--outer`]: props.shape === 'ribbon',\n    }));\n\n    // 徽标内层样式类\n    const badgeInnerClasses = computed(() => ({\n      [`${name}__inner`]: true,\n      [`${name}--has-children`]: !isIndependent.value,\n      [`${name}--${props.size}`]: props.size,\n      [`${name}--${props.shape}`]: props.shape && !props.dot,\n      [`${name}--dot`]: props.dot,\n    }));\n\n    // 徽标自定义样式\n    const badgeStyles = computed(() => {\n      if (!props.offset) {\n        return { background: props.color };\n      }\n      let [xOffset, yOffset]: Array<string | number> = props.offset;\n      xOffset = isNaN(Number(xOffset)) ? xOffset : `${xOffset}px`;\n      yOffset = isNaN(Number(yOffset)) ? yOffset : `${yOffset}px`;\n      return {\n        background: props.color,\n        right: xOffset,\n        top: yOffset,\n      };\n    });\n\n    return {\n      badgeContent,\n      showDot,\n      badgeStyles,\n      badgeClasses,\n      badgeInnerClasses,\n      ...toRefs(props),\n      countContent,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"badgeClasses\">\n    <div v-if=\"showDot\" :class=\"badgeInnerClasses\" :style=\"badgeStyles\">\n      <t-node :content=\"countContent\"></t-node>\n    </div>\n    <t-node :content=\"badgeContent\"></t-node>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, toRefs } from 'vue';\nimport { renderContent, renderTNode, TNode } from '../shared';\nimport BadgeProps from './props';\nimport config from '../config';\n\nconst name = `${config.prefix}-badge`;\n\nexport default defineComponent({\n  name,\n  components: { TNode },\n  props: BadgeProps,\n  setup(props) {\n    const internalInstance = getCurrentInstance();\n    const badgeContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const countContent = computed(() => {\n      if (props.dot) {\n        return '';\n      }\n      if (typeof props.count === 'function') {\n        return renderTNode(internalInstance, 'count');\n      }\n      const count = Number(props.count);\n      if (isNaN(count)) {\n        return props.count;\n      }\n      return count > props.maxCount ? `${props.maxCount}+` : count;\n    });\n    // 是否独立使用\n    const isIndependent = computed(() => badgeContent.value === undefined);\n\n    // 是否展示红点角标\n    const showDot = computed(() => props.dot || props.count !== 0 || props.showZero);\n\n    // 徽标外层样式类\n    const badgeClasses = computed(() => ({\n      [`${name}`]: true,\n      [`${name}__ribbon--outer`]: props.shape === 'ribbon',\n    }));\n\n    // 徽标内层样式类\n    const badgeInnerClasses = computed(() => ({\n      [`${name}__inner`]: true,\n      [`${name}--has-children`]: !isIndependent.value,\n      [`${name}--${props.size}`]: props.size,\n      [`${name}--${props.shape}`]: props.shape && !props.dot,\n      [`${name}--dot`]: props.dot,\n    }));\n\n    // 徽标自定义样式\n    const badgeStyles = computed(() => {\n      if (!props.offset) {\n        return { background: props.color };\n      }\n      let [xOffset, yOffset]: Array<string | number> = props.offset;\n      xOffset = isNaN(Number(xOffset)) ? xOffset : `${xOffset}px`;\n      yOffset = isNaN(Number(yOffset)) ? yOffset : `${yOffset}px`;\n      return {\n        background: props.color,\n        right: xOffset,\n        top: yOffset,\n      };\n    });\n\n    return {\n      badgeContent,\n      showDot,\n      badgeStyles,\n      badgeClasses,\n      badgeInnerClasses,\n      ...toRefs(props),\n      countContent,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}