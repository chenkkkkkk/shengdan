{"ast":null,"code":"/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport { defineComponent, toRefs, ref, computed, watch, resolveComponent, openBlock, createBlock, withCtx, createElementVNode, normalizeClass, createElementBlock, Fragment, renderList, resolveDynamicComponent, createCommentVNode, toDisplayString } from 'vue';\nimport _Popup from '../popup/index.js';\nimport config from '../config.js';\nimport '../shared/index.js';\nimport DrawerProps from './props.js';\nimport { useEmitEvent } from '../shared/useEmitEvent/index.js';\nimport '../popup/popup.js';\nimport '@babel/runtime/helpers/defineProperty';\nimport '@babel/runtime/helpers/slicedToArray';\nimport '../popup/props.js';\nimport '../overlay/index.js';\nimport '../overlay/overlay.js';\nimport '../overlay/props.js';\nimport './style/css.js';\nimport '../shared/component.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/constants.js';\nimport '../shared/render.js';\nimport '@babel/runtime/helpers/typeof';\nimport 'lodash/camelCase';\nimport '../shared/render-tnode.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '../popup/type.js';\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-drawer\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    TPopup: _Popup\n  },\n  props: DrawerProps,\n  emits: [\"update:visible\", \"itemClick\", \"overlayClick\"],\n  setup: function setup(props, context) {\n    var emitEvent = useEmitEvent(props, context.emit);\n    var _toRefs = toRefs(props),\n      visible = _toRefs.visible,\n      items = _toRefs.items,\n      placement = _toRefs.placement,\n      showOverlay = _toRefs.showOverlay,\n      zIndex = _toRefs.zIndex,\n      closeOnOverlayClick = _toRefs.closeOnOverlayClick;\n    var open = ref(visible.value || false);\n    var dSideBarClassName = computed(function () {\n      return \"\".concat(name, \"__sidebar\");\n    });\n    var dSideBarItemClassName = computed(function () {\n      return \"\".concat(name, \"__sidebar-item\");\n    });\n    var dSideBarItemIconClassName = computed(function () {\n      return \"\".concat(name, \"__sidebar-item-icon\");\n    });\n    var dSideBarItemTitleClassName = computed(function () {\n      return \"\".concat(name, \"__sidebar-item-title\");\n    });\n    watch(open, function () {\n      emitEvent(\"update:visible\", open.value);\n    });\n    watch(visible, function () {\n      open.value = visible.value;\n    });\n    var onItemClick = function onItemClick(index, item, context2) {\n      emitEvent(\"itemClick\", index, item, context2);\n    };\n    var onVisibleChange = function onVisibleChange(visible2) {\n      if (showOverlay.value) {\n        emitEvent(\"overlayClick\", {\n          visible: visible2\n        });\n      }\n    };\n    var onClose = function onClose() {\n      emitEvent(\"close\", {\n        trigger: \"overlay\"\n      });\n    };\n    return {\n      items: items,\n      placement: placement,\n      showOverlay: showOverlay,\n      zIndex: zIndex,\n      closeOnOverlayClick: closeOnOverlayClick,\n      open: open,\n      dSideBarClassName: dSideBarClassName,\n      dSideBarItemClassName: dSideBarItemClassName,\n      dSideBarItemIconClassName: dSideBarItemIconClassName,\n      dSideBarItemTitleClassName: dSideBarItemTitleClassName,\n      onItemClick: onItemClick,\n      onVisibleChange: onVisibleChange,\n      onClose: onClose\n    };\n  }\n});\nvar _hoisted_1 = [\"onClick\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_popup = resolveComponent(\"t-popup\");\n  return openBlock(), createBlock(_component_t_popup, {\n    modelValue: _ctx.open,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return _ctx.open = $event;\n    }),\n    placement: _ctx.placement,\n    \"show-overlay\": _ctx.showOverlay,\n    \"z-index\": _ctx.zIndex,\n    \"close-on-overlay-click\": _ctx.closeOnOverlayClick,\n    onVisibleChange: _ctx.onVisibleChange,\n    onClose: _ctx.onClose\n  }, {\n    default: withCtx(function () {\n      return [createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.dSideBarClassName)\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, function (item, index) {\n        return openBlock(), createElementBlock(\"div\", {\n          key: item.title,\n          class: normalizeClass(_ctx.dSideBarItemClassName),\n          onClick: function onClick($event) {\n            return _ctx.onItemClick(index, item, {\n              e: $event\n            });\n          }\n        }, [!!item.icon ? (openBlock(), createElementBlock(\"span\", {\n          key: 0,\n          class: normalizeClass(_ctx.dSideBarItemIconClassName)\n        }, [(openBlock(), createBlock(resolveDynamicComponent(item.icon)))], 2)) : createCommentVNode(\"\", true), createElementVNode(\"div\", {\n          class: normalizeClass(_ctx.dSideBarItemTitleClassName)\n        }, toDisplayString(item.title), 3)], 10, _hoisted_1);\n      }), 128))], 2)];\n    }),\n    _: 1\n  }, 8, [\"modelValue\", \"placement\", \"show-overlay\", \"z-index\", \"close-on-overlay-click\", \"onVisibleChange\", \"onClose\"]);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,IAAQA,SAAWC,OAAXD;AACR,IAAME,OAAUF;AAEhB,aAAeG,eAAgB;EAC7BD;EACAE,YAAY;IAAEC,MAAO,EAAPA;GAAO;EACrBC,KAAO;EACPC,KAAO,GAAC,gBAAkB,eAAa,cAAc;EACrDC,OAAMF,sBAAOG,OAAuB;IAClC,IAAMC,SAAY,gBAAaJ,KAAO,UAAQK,IAAI;IAC5C,IAA0EC,iBAAON,KAAK;MAApFO;MAASC,KAAO,WAAPA,KAAO;MAAAC;MAAWC;MAAaC,MAAQ,WAARA,MAAQ;MAAAC;IACxD,IAAMC,IAAO,OAAIN,OAAQ,UAAS,KAAK;IAEvC,IAAMO,iBAAoB,YAAS;MAAA,iBAASlB,IAAe;IAAA;IAC3D,IAAMmB,qBAAwB,YAAS;MAAA,iBAASnB,IAAoB;IAAA;IACpE,IAAMoB,yBAA4B,YAAS;MAAA,iBAASpB,IAAyB;IAAA;IAC7E,IAAMqB,0BAA6B,YAAS;MAAA,iBAASrB,IAA0B;IAAA;IAE/EsB,MAAML,MAAM,YAAM;MACNT,4BAAkBS,KAAKM,KAAK;IACxC,CAAC;IAEDD,MAAMX,SAAS,YAAM;MACnBM,KAAKM,QAAQZ,OAAQ;IACvB,CAAC;IAED,IAAMa,WAA4C,YAA5CA,WAA4C,CAACC,KAAe,QAAkBlB,QAA+B;MACvGC,uBAAaiB,KAAO,QAAMlB,QAAO;KAC7C;IAEM,sBAAkB,SAAlBmB,gBAAmBf,QAAqB;MAC5C,IAAIG,YAAYS,KAAO;QACrBf,UAAU,cAAgB;UAAEG;QAAQ,CAAC;MACvC;KACF;IAEA,IAAMgB,UAAU,SAAVA,UAAgB;MACpBnB,UAAU,OAAS;QAAEoB,OAAS;MAAU,CAAC;KAC3C;IAEO;MACLhB;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAG;MACAE;MACAC;KACF;EACF;AACF,CAAC;;;;oBCvFC,cAoBSE;gBAnBEC,IAAI;;aAAJA,KAAIb;KAAA;IACZJ,WAAWiB,IAAS;IACpB,gBAAcA,IAAW;IACzB,WAASA,IAAM;IACf,0BAAwBA,IAAmB;IAC3CJ,iBAAgBI,IAAe;IAC/BH,SAAOG,IAAO;;qBAEf;MAAA,OAUK,CAVLC,mBAUK;QAVCC,qBAAO,MAAiBd;WAC5Be,mCAQK,WAPqB,6BAAhB,gBAAMR,KAAK;0BADrB,qBAQK;UANFS,KAAKC,IAAK;UACVH,qBAAO,MAAqBb;UAC5BiB;mBAAON,IAAW,aAACL,OAAOU;eAAW;YAAK;UAAA;YAE7B,OAAKE,qBAAnBC,mBAAyG;;UAA/EN,qBAAO,MAAyBZ;wBAAE,cAAuCmB,uBAAvB,MAAKF,IAAI,0CACrFN,mBAA8D;UAAxDC,qBAAO,MAA0BX;QAAK,uBAAK,MAAI","names":["prefix","config","name","defineComponent","components","TPopup","props","emits","setup","context","emitEvent","emit","toRefs","visible","items","placement","showOverlay","zIndex","closeOnOverlayClick","open","dSideBarClassName","dSideBarItemClassName","dSideBarItemIconClassName","dSideBarItemTitleClassName","watch","value","onItemClick","index","onVisibleChange","onClose","trigger","_component_t_popup","_ctx","_createElementVNode","class","_openBlock","key","item","onClick","icon","_createElementBlock","_resolveDynamicComponent"],"sources":["../../src/drawer/drawer.vue","../../src/drawer/drawer.vue?vue&type=template&id=60effec5&lang.js"],"sourcesContent":["<template>\n  <t-popup\n    v-model=\"open\"\n    :placement=\"placement\"\n    :show-overlay=\"showOverlay\"\n    :z-index=\"zIndex\"\n    :close-on-overlay-click=\"closeOnOverlayClick\"\n    @visible-change=\"onVisibleChange\"\n    @close=\"onClose\"\n  >\n    <div :class=\"dSideBarClassName\">\n      <div\n        v-for=\"(item, index) in items\"\n        :key=\"item.title\"\n        :class=\"dSideBarItemClassName\"\n        @click=\"onItemClick(index, item, { e: $event })\"\n      >\n        <span v-if=\"!!item.icon\" :class=\"dSideBarItemIconClassName\"><component :is=\"item.icon\"></component></span>\n        <div :class=\"dSideBarItemTitleClassName\">{{ item.title }}</div>\n      </div>\n    </div>\n  </t-popup>\n</template>\n\n<script lang=\"ts\">\nimport { ref, watch, toRefs, computed, SetupContext, defineComponent } from 'vue';\nimport TPopup from '../popup';\nimport config from '../config';\nimport { useEmitEvent } from '../shared';\nimport DrawerProps from './props';\nimport { DrawerItem, TdDrawerProps } from './type';\n\nconst { prefix } = config;\nconst name = `${prefix}-drawer`;\n\nexport default defineComponent({\n  name,\n  components: { TPopup },\n  props: DrawerProps,\n  emits: ['update:visible', 'itemClick', 'overlayClick'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const { visible, items, placement, showOverlay, zIndex, closeOnOverlayClick } = toRefs(props);\n    const open = ref(visible.value || false);\n\n    const dSideBarClassName = computed(() => `${name}__sidebar`);\n    const dSideBarItemClassName = computed(() => `${name}__sidebar-item`);\n    const dSideBarItemIconClassName = computed(() => `${name}__sidebar-item-icon`);\n    const dSideBarItemTitleClassName = computed(() => `${name}__sidebar-item-title`);\n\n    watch(open, () => {\n      emitEvent('update:visible', open.value);\n    });\n\n    watch(visible, () => {\n      open.value = visible.value;\n    });\n\n    const onItemClick: TdDrawerProps['onItemClick'] = (index: number, item: DrawerItem, context: { e: MouseEvent }) => {\n      emitEvent('itemClick', index, item, context);\n    };\n\n    const onVisibleChange = (visible: boolean) => {\n      if (showOverlay.value) {\n        emitEvent('overlayClick', { visible });\n      }\n    };\n\n    const onClose = () => {\n      emitEvent('close', { trigger: 'overlay' });\n    };\n\n    return {\n      items,\n      placement,\n      showOverlay,\n      zIndex,\n      closeOnOverlayClick,\n      open,\n      dSideBarClassName,\n      dSideBarItemClassName,\n      dSideBarItemIconClassName,\n      dSideBarItemTitleClassName,\n      onItemClick,\n      onVisibleChange,\n      onClose,\n    };\n  },\n});\n</script>\n","<template>\n  <t-popup\n    v-model=\"open\"\n    :placement=\"placement\"\n    :show-overlay=\"showOverlay\"\n    :z-index=\"zIndex\"\n    :close-on-overlay-click=\"closeOnOverlayClick\"\n    @visible-change=\"onVisibleChange\"\n    @close=\"onClose\"\n  >\n    <div :class=\"dSideBarClassName\">\n      <div\n        v-for=\"(item, index) in items\"\n        :key=\"item.title\"\n        :class=\"dSideBarItemClassName\"\n        @click=\"onItemClick(index, item, { e: $event })\"\n      >\n        <span v-if=\"!!item.icon\" :class=\"dSideBarItemIconClassName\"><component :is=\"item.icon\"></component></span>\n        <div :class=\"dSideBarItemTitleClassName\">{{ item.title }}</div>\n      </div>\n    </div>\n  </t-popup>\n</template>\n\n<script lang=\"ts\">\nimport { ref, watch, toRefs, computed, SetupContext, defineComponent } from 'vue';\nimport TPopup from '../popup';\nimport config from '../config';\nimport { useEmitEvent } from '../shared';\nimport DrawerProps from './props';\nimport { DrawerItem, TdDrawerProps } from './type';\n\nconst { prefix } = config;\nconst name = `${prefix}-drawer`;\n\nexport default defineComponent({\n  name,\n  components: { TPopup },\n  props: DrawerProps,\n  emits: ['update:visible', 'itemClick', 'overlayClick'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const { visible, items, placement, showOverlay, zIndex, closeOnOverlayClick } = toRefs(props);\n    const open = ref(visible.value || false);\n\n    const dSideBarClassName = computed(() => `${name}__sidebar`);\n    const dSideBarItemClassName = computed(() => `${name}__sidebar-item`);\n    const dSideBarItemIconClassName = computed(() => `${name}__sidebar-item-icon`);\n    const dSideBarItemTitleClassName = computed(() => `${name}__sidebar-item-title`);\n\n    watch(open, () => {\n      emitEvent('update:visible', open.value);\n    });\n\n    watch(visible, () => {\n      open.value = visible.value;\n    });\n\n    const onItemClick: TdDrawerProps['onItemClick'] = (index: number, item: DrawerItem, context: { e: MouseEvent }) => {\n      emitEvent('itemClick', index, item, context);\n    };\n\n    const onVisibleChange = (visible: boolean) => {\n      if (showOverlay.value) {\n        emitEvent('overlayClick', { visible });\n      }\n    };\n\n    const onClose = () => {\n      emitEvent('close', { trigger: 'overlay' });\n    };\n\n    return {\n      items,\n      placement,\n      showOverlay,\n      zIndex,\n      closeOnOverlayClick,\n      open,\n      dSideBarClassName,\n      dSideBarItemClassName,\n      dSideBarItemIconClassName,\n      dSideBarItemTitleClassName,\n      onItemClick,\n      onVisibleChange,\n      onClose,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}