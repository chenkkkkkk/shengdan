{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { useSwipe, onClickOutside } from '@vueuse/core';\nimport { defineComponent, getCurrentInstance, computed, ref, reactive, onMounted, watch, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, withModifiers, createVNode, Fragment, renderList, createBlock, withCtx, createTextVNode, toDisplayString } from 'vue';\nimport props from './props.js';\nimport config from '../config.js';\nimport _Button from '../button/index.js';\nimport '../shared/index.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { useEmitEvent } from '../shared/useEmitEvent/index.js';\nimport { renderContent, renderTNode } from '../shared/render.js';\nimport '../button/button.js';\nimport 'tdesign-icons-vue-next';\nimport '../shared/constants.js';\nimport '../button/props.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/typeof';\nimport './style/css.js';\nimport '../button/type.js';\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-swipe-cell\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    TNode: TNodeComponent,\n    TButton: _Button\n  },\n  props: props,\n  emits: [\"click\", \"change\"],\n  setup: function setup(props2, context) {\n    var emitEvent = useEmitEvent(props2, context.emit);\n    var internalInstance = getCurrentInstance();\n    var swipeContent = computed(function () {\n      return renderContent(internalInstance, \"default\", \"content\");\n    });\n    var swipeLeftMenu = computed(function () {\n      return renderTNode(internalInstance, \"left\");\n    });\n    var swipeRightMenu = computed(function () {\n      return renderTNode(internalInstance, \"right\");\n    });\n    var leftRef = ref();\n    var rightRef = ref();\n    var swipeCell = ref();\n    var _useSwipe = useSwipe(swipeCell, {\n        threshold: 0,\n        onSwipeStart: function onSwipeStart(e) {\n          initData.moving = true;\n          initData.pos = 0;\n        },\n        onSwipe: function onSwipe(e) {\n          if (props2.disabled) {\n            return;\n          }\n          if (initData.moving && initData.status === \"close\") {\n            initData.moving = false;\n          }\n          var pos = 0;\n          if (lengthX.value < 0) {\n            if (initData.leftWidth === 0) {\n              initData.moving = false;\n              return;\n            }\n            pos = Math.min(Math.abs(lengthX.value), initData.leftWidth > 0 ? initData.leftWidth + spring : 0);\n          } else {\n            if (initData.rightWidth === 0) {\n              initData.moving = false;\n              return;\n            }\n            pos = Math.max(-lengthX.value, -(initData.rightWidth > 0 ? initData.rightWidth + spring : 0));\n          }\n          if (initData.status === \"close\") {\n            initData.pos = pos;\n          }\n        },\n        onSwipeEnd: function onSwipeEnd(e) {\n          end();\n        }\n      }),\n      lengthX = _useSwipe.lengthX;\n    var distance = 0;\n    var autoBack = true;\n    var threshold = 0.5;\n    var spring = 0;\n    var initData = reactive({\n      moving: false,\n      leftWidth: 0,\n      rightWidth: 0,\n      pos: 0,\n      status: \"close\"\n    });\n    var classes = computed(function () {\n      return [\"\".concat(name)];\n    });\n    onMounted(function () {\n      var _leftRef$value, _rightRef$value;\n      var leftWidth = (_leftRef$value = leftRef.value) === null || _leftRef$value === void 0 ? void 0 : _leftRef$value.clientWidth;\n      var rightWidth = (_rightRef$value = rightRef.value) === null || _rightRef$value === void 0 ? void 0 : _rightRef$value.clientWidth;\n      initData.leftWidth = leftWidth > 0 ? leftWidth + distance : 0;\n      initData.rightWidth = rightWidth > 0 ? rightWidth + distance : 0;\n      renderMenuStatus();\n    });\n    watch(function () {\n      return props2.expanded;\n    }, function () {\n      return renderMenuStatus();\n    });\n    onClickOutside(swipeCell, function (event) {\n      close();\n    });\n    var renderMenuStatus = function renderMenuStatus() {\n      if (props2.expanded && props2.expanded === \"left\") {\n        if (initData.leftWidth) {\n          open(\"toRight\");\n        }\n      }\n      if (props2.expanded && props2.expanded === \"right\") {\n        if (initData.rightWidth) {\n          open(\"toLeft\");\n        }\n      }\n    };\n    var end = function end() {\n      if (props2.disabled) {\n        return;\n      }\n      if (lengthX.value < 0 && initData.pos > initData.leftWidth * threshold) {\n        open(\"toRight\");\n      } else if (lengthX.value > 0 && -initData.pos > initData.rightWidth * threshold) {\n        open(\"toLeft\");\n      } else {\n        close(\"force\");\n      }\n    };\n    var open = function open(direction) {\n      if (initData.status === \"open\") {\n        return;\n      }\n      initData.moving = true;\n      initData.status = \"open\";\n      if (direction === \"toLeft\") {\n        initData.pos = -initData.rightWidth;\n        if (initData.rightWidth) {\n          emitEvent(\"change\", \"right\");\n        }\n      } else {\n        initData.pos = initData.leftWidth;\n        if (initData.leftWidth) {\n          emitEvent(\"change\", \"left\");\n        }\n      }\n    };\n    var close = function close(type) {\n      if (initData.status === \"close\" && type !== \"force\") {\n        return;\n      }\n      initData.moving = true;\n      initData.status = \"close\";\n      initData.pos = 0;\n      emitEvent(\"change\", void 0);\n    };\n    var handleClickBtn = function handleClickBtn(_ref) {\n      var action = _ref.action,\n        source = _ref.source;\n      if (autoBack) {\n        close();\n      }\n      if (action.onClick) {\n        action.onClick();\n        return;\n      }\n      emitEvent(\"click\", {\n        action: action,\n        source: source\n      });\n    };\n    return _objectSpread$1(_objectSpread$1({}, toRefs(props2)), {}, {\n      swipeContent: swipeContent,\n      swipeLeftMenu: swipeLeftMenu,\n      swipeRightMenu: swipeRightMenu,\n      initData: initData,\n      classes: classes,\n      swipeCell: swipeCell,\n      leftRef: leftRef,\n      rightRef: rightRef,\n      handleClickBtn: handleClickBtn,\n      end: end\n    });\n  }\n});\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _normalizeClass2;\n  var _component_t_node = resolveComponent(\"t-node\");\n  var _component_t_button = resolveComponent(\"t-button\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.classes),\n    onTouchend: _cache[2] || (_cache[2] = function () {\n      return _ctx.end && _ctx.end.apply(_ctx, arguments);\n    }),\n    onTouchcancel: _cache[3] || (_cache[3] = function () {\n      return _ctx.end && _ctx.end.apply(_ctx, arguments);\n    }),\n    onMouseup: _cache[4] || (_cache[4] = function () {\n      return _ctx.end && _ctx.end.apply(_ctx, arguments);\n    })\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass((_normalizeClass2 = {}, _defineProperty(_normalizeClass2, _ctx.classes + \"__wrapper\", true), _defineProperty(_normalizeClass2, \"moving\", _ctx.initData.moving), _normalizeClass2)),\n    style: normalizeStyle({\n      transform: \"translate3d(\".concat(_ctx.initData.pos, \"px,0,0)\")\n    })\n  }, [createElementVNode(\"div\", {\n    ref: \"leftRef\",\n    class: normalizeClass(_ctx.classes + \"__left\"),\n    style: normalizeStyle({\n      width: _ctx.initData.leftWidth ? \"\".concat(_ctx.initData.leftWidth, \"px\") : \"auto\"\n    }),\n    onTouchstartPassive: _cache[0] || (_cache[0] = withModifiers(function () {}, [\"stop\"]))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.swipeLeftMenu\n  }, null, 8, [\"content\"]), (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.left, function (btn, index) {\n    return openBlock(), createBlock(_component_t_button, {\n      key: index,\n      class: normalizeClass(btn.className || \"\"),\n      style: normalizeStyle(btn.style || \"height: 100%\"),\n      onClick: function onClick($event) {\n        return _ctx.handleClickBtn({\n          action: _objectSpread({}, btn),\n          source: \"left\"\n        });\n      }\n    }, {\n      default: withCtx(function () {\n        return [createTextVNode(toDisplayString(btn.text), 1)];\n      }),\n      _: 2\n    }, 1032, [\"class\", \"style\", \"onClick\"]);\n  }), 128))], 38), createElementVNode(\"div\", {\n    ref: \"swipeCell\",\n    class: normalizeClass(_ctx.classes + \"__content\")\n  }, [createVNode(_component_t_node, {\n    content: _ctx.swipeContent\n  }, null, 8, [\"content\"])], 2), createElementVNode(\"div\", {\n    ref: \"rightRef\",\n    class: normalizeClass(_ctx.classes + \"__right\"),\n    style: normalizeStyle({\n      width: _ctx.initData.rightWidth ? \"\".concat(_ctx.initData.rightWidth, \"px\") : \"auto\"\n    }),\n    onTouchstartPassive: _cache[1] || (_cache[1] = withModifiers(function () {}, [\"stop\"]))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.swipeRightMenu\n  }, null, 8, [\"content\"]), (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.right, function (btn, index) {\n    return openBlock(), createBlock(_component_t_button, {\n      key: index,\n      class: normalizeClass(btn.className || \"\"),\n      style: normalizeStyle(btn.style || \"height: 100%\"),\n      onClick: function onClick($event) {\n        return _ctx.handleClickBtn({\n          action: _objectSpread({}, btn),\n          source: \"right\"\n        });\n      }\n    }, {\n      default: withCtx(function () {\n        return [createTextVNode(toDisplayString(btn.text), 1)];\n      }),\n      _: 2\n    }, 1032, [\"class\", \"style\", \"onClick\"]);\n  }), 128))], 38)], 6)], 34);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":"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","names":["prefix","config","name","defineComponent","components","TNode","TButton","props","emits","setup","context","emitEvent","emit","internalInstance","getCurrentInstance","swipeContent","computed","renderContent","swipeLeftMenu","renderTNode","swipeRightMenu","leftRef","ref","rightRef","swipeCell","useSwipe","threshold","onSwipeStart","e","initData","moving","pos","onSwipe","disabled","value","leftWidth","Math","lengthX","spring","rightWidth","status","onSwipeEnd","end","distance","autoBack","reactive","classes","onMounted","_leftRef$value","clientWidth","_rightRef$value","renderMenuStatus","watch","onClickOutside","event","close","open","direction","type","handleClickBtn","_ref","action","source","onClick","toRefs","class","onTouchend","_ctx","onTouchcancel","onMouseup","_createElementVNode","style","_normalizeStyle","transform","_createVNode","_component_t_node","content","_openBlock","index","_component_t_button","btn","$event","_createTextVNode"],"sources":["../../src/swipe-cell/swipe-cell.vue","../../src/swipe-cell/swipe-cell.vue?vue&type=template&id=ac4d8054&lang.js"],"sourcesContent":["<template>\n  <div :class=\"classes\" @touchend=\"end\" @touchcancel=\"end\" @mouseup=\"end\">\n    <div\n      :class=\"{ [classes + '__wrapper']: true, moving: initData.moving }\"\n      :style=\"{ transform: `translate3d(${initData.pos}px,0,0)` }\"\n    >\n      <div\n        ref=\"leftRef\"\n        :class=\"classes + '__left'\"\n        :style=\"{ width: initData.leftWidth ? `${initData.leftWidth}px` : 'auto' }\"\n        @touchstart.stop.passive\n      >\n        <t-node :content=\"swipeLeftMenu\"></t-node>\n        <template v-for=\"(btn, index) of left\" :key=\"index\">\n          <t-button\n            :class=\"btn.className || ''\"\n            :style=\"btn.style || 'height: 100%'\"\n            @click=\"\n              handleClickBtn({\n                action: { ...btn },\n                source: 'left',\n              })\n            \"\n          >\n            {{ btn.text }}\n          </t-button>\n        </template>\n      </div>\n      <div ref=\"swipeCell\" :class=\"classes + '__content'\">\n        <t-node :content=\"swipeContent\"></t-node>\n      </div>\n      <div\n        ref=\"rightRef\"\n        :class=\"classes + '__right'\"\n        :style=\"{ width: initData.rightWidth ? `${initData.rightWidth}px` : 'auto' }\"\n        @touchstart.stop.passive\n      >\n        <t-node :content=\"swipeRightMenu\"></t-node>\n        <template v-for=\"(btn, index) of right\" :key=\"index\">\n          <t-button\n            :class=\"btn.className || ''\"\n            :style=\"btn.style || 'height: 100%'\"\n            @click=\"\n              handleClickBtn({\n                action: { ...btn },\n                source: 'right',\n              })\n            \"\n          >\n            {{ btn.text }}\n          </t-button>\n        </template>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { onClickOutside, useSwipe } from '@vueuse/core';\nimport {\n  ref,\n  watch,\n  toRefs,\n  reactive,\n  computed,\n  onMounted,\n  SetupContext,\n  defineComponent,\n  getCurrentInstance,\n} from 'vue';\nimport props from './props';\nimport config from '../config';\nimport TButton from '../button';\nimport { SwipeActionItem } from './type';\nimport { renderContent, renderTNode, TNode, useEmitEvent } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-swipe-cell`;\n\nexport interface SwipeInitData {\n  moving: boolean;\n  leftWidth: number;\n  rightWidth: number;\n  pos: number;\n  status: 'open' | 'close';\n}\n\nexport default defineComponent({\n  name,\n  components: { TNode, TButton },\n  props,\n  emits: ['click', 'change'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const internalInstance = getCurrentInstance();\n    const swipeContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const swipeLeftMenu = computed(() => renderTNode(internalInstance, 'left'));\n    const swipeRightMenu = computed(() => renderTNode(internalInstance, 'right'));\n    const leftRef = ref<HTMLElement>();\n    const rightRef = ref<HTMLElement>();\n    const swipeCell = ref<HTMLElement>();\n    const { lengthX } = useSwipe(swipeCell, {\n      threshold: 0,\n      onSwipeStart: (e: TouchEvent) => {\n        initData.moving = true;\n        initData.pos = 0;\n      },\n      onSwipe: (e: TouchEvent) => {\n        if (props.disabled) {\n          return;\n        }\n        if (initData.moving && initData.status === 'close') {\n          initData.moving = false;\n        }\n        let pos = 0;\n        if (lengthX.value < 0) {\n          if (initData.leftWidth === 0) {\n            initData.moving = false;\n            return;\n          }\n          pos = Math.min(Math.abs(lengthX.value), initData.leftWidth > 0 ? initData.leftWidth + spring : 0);\n        } else {\n          if (initData.rightWidth === 0) {\n            initData.moving = false;\n            return;\n          }\n          pos = Math.max(-lengthX.value, -(initData.rightWidth > 0 ? initData.rightWidth + spring : 0));\n        }\n        if (initData.status === 'close') {\n          initData.pos = pos;\n        }\n      },\n      onSwipeEnd: (e: TouchEvent) => {\n        end();\n      },\n    });\n    const distance = 0; // distance 滑动多少距离后开始显示菜\n    const autoBack = true; // autoBack 点击菜单后是否收回菜\n    const threshold = 0.5; // threshold 滑动宽度的百分之多少自动打开菜单，否则收回\n    const spring = 0; // 回弹距离\n    const initData: SwipeInitData = reactive({\n      moving: false,\n      leftWidth: 0, // 左边菜单的宽度\n      rightWidth: 0, // 右边菜单的宽度\n      pos: 0, // 移动的距离\n      status: 'close', // 菜单的状态，默认close\n    });\n    const classes = computed(() => [`${name}`]);\n    onMounted(() => {\n      const leftWidth = leftRef.value?.clientWidth as number;\n      const rightWidth = rightRef.value?.clientWidth as number;\n      initData.leftWidth = leftWidth > 0 ? leftWidth + distance : 0;\n      initData.rightWidth = rightWidth > 0 ? rightWidth + distance : 0;\n      renderMenuStatus();\n    });\n    watch(\n      () => props.expanded,\n      () => renderMenuStatus(),\n    );\n    onClickOutside(swipeCell, (event) => {\n      close();\n    });\n    const renderMenuStatus = () => {\n      if (props.expanded && props.expanded === 'left') {\n        if (initData.leftWidth) {\n          open('toRight');\n        }\n      }\n      if (props.expanded && props.expanded === 'right') {\n        if (initData.rightWidth) {\n          open('toLeft');\n        }\n      }\n    };\n    const end = () => {\n      if (props.disabled) {\n        return;\n      }\n      if (lengthX.value < 0 && initData.pos > initData.leftWidth * threshold) {\n        open('toRight');\n      } else if (lengthX.value > 0 && -initData.pos > initData.rightWidth * threshold) {\n        open('toLeft');\n      } else {\n        close('force');\n      }\n    };\n    const open = (direction: 'toRight' | 'toLeft') => {\n      if (initData.status === 'open') {\n        return;\n      }\n      initData.moving = true;\n      initData.status = 'open';\n      if (direction === 'toLeft') {\n        initData.pos = -initData.rightWidth;\n        if (initData.rightWidth) {\n          emitEvent('change', 'right');\n        }\n      } else {\n        initData.pos = initData.leftWidth;\n        if (initData.leftWidth) {\n          emitEvent('change', 'left');\n        }\n      }\n    };\n    const close = (type?: string) => {\n      if (initData.status === 'close' && type !== 'force') {\n        return;\n      }\n      initData.moving = true;\n      initData.status = 'close';\n      initData.pos = 0;\n      emitEvent('change', undefined);\n    };\n    const handleClickBtn = ({ action, source }: { action: SwipeActionItem; source: String }) => {\n      if (autoBack) {\n        close();\n      }\n      if (action.onClick) {\n        action.onClick();\n        return;\n      }\n      emitEvent('click', { action, source });\n    };\n    return {\n      ...toRefs(props),\n      swipeContent,\n      swipeLeftMenu,\n      swipeRightMenu,\n      initData,\n      classes,\n      swipeCell,\n      leftRef,\n      rightRef,\n      handleClickBtn,\n      end,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"classes\" @touchend=\"end\" @touchcancel=\"end\" @mouseup=\"end\">\n    <div\n      :class=\"{ [classes + '__wrapper']: true, moving: initData.moving }\"\n      :style=\"{ transform: `translate3d(${initData.pos}px,0,0)` }\"\n    >\n      <div\n        ref=\"leftRef\"\n        :class=\"classes + '__left'\"\n        :style=\"{ width: initData.leftWidth ? `${initData.leftWidth}px` : 'auto' }\"\n        @touchstart.stop.passive\n      >\n        <t-node :content=\"swipeLeftMenu\"></t-node>\n        <template v-for=\"(btn, index) of left\" :key=\"index\">\n          <t-button\n            :class=\"btn.className || ''\"\n            :style=\"btn.style || 'height: 100%'\"\n            @click=\"\n              handleClickBtn({\n                action: { ...btn },\n                source: 'left',\n              })\n            \"\n          >\n            {{ btn.text }}\n          </t-button>\n        </template>\n      </div>\n      <div ref=\"swipeCell\" :class=\"classes + '__content'\">\n        <t-node :content=\"swipeContent\"></t-node>\n      </div>\n      <div\n        ref=\"rightRef\"\n        :class=\"classes + '__right'\"\n        :style=\"{ width: initData.rightWidth ? `${initData.rightWidth}px` : 'auto' }\"\n        @touchstart.stop.passive\n      >\n        <t-node :content=\"swipeRightMenu\"></t-node>\n        <template v-for=\"(btn, index) of right\" :key=\"index\">\n          <t-button\n            :class=\"btn.className || ''\"\n            :style=\"btn.style || 'height: 100%'\"\n            @click=\"\n              handleClickBtn({\n                action: { ...btn },\n                source: 'right',\n              })\n            \"\n          >\n            {{ btn.text }}\n          </t-button>\n        </template>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { onClickOutside, useSwipe } from '@vueuse/core';\nimport {\n  ref,\n  watch,\n  toRefs,\n  reactive,\n  computed,\n  onMounted,\n  SetupContext,\n  defineComponent,\n  getCurrentInstance,\n} from 'vue';\nimport props from './props';\nimport config from '../config';\nimport TButton from '../button';\nimport { SwipeActionItem } from './type';\nimport { renderContent, renderTNode, TNode, useEmitEvent } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-swipe-cell`;\n\nexport interface SwipeInitData {\n  moving: boolean;\n  leftWidth: number;\n  rightWidth: number;\n  pos: number;\n  status: 'open' | 'close';\n}\n\nexport default defineComponent({\n  name,\n  components: { TNode, TButton },\n  props,\n  emits: ['click', 'change'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const internalInstance = getCurrentInstance();\n    const swipeContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const swipeLeftMenu = computed(() => renderTNode(internalInstance, 'left'));\n    const swipeRightMenu = computed(() => renderTNode(internalInstance, 'right'));\n    const leftRef = ref<HTMLElement>();\n    const rightRef = ref<HTMLElement>();\n    const swipeCell = ref<HTMLElement>();\n    const { lengthX } = useSwipe(swipeCell, {\n      threshold: 0,\n      onSwipeStart: (e: TouchEvent) => {\n        initData.moving = true;\n        initData.pos = 0;\n      },\n      onSwipe: (e: TouchEvent) => {\n        if (props.disabled) {\n          return;\n        }\n        if (initData.moving && initData.status === 'close') {\n          initData.moving = false;\n        }\n        let pos = 0;\n        if (lengthX.value < 0) {\n          if (initData.leftWidth === 0) {\n            initData.moving = false;\n            return;\n          }\n          pos = Math.min(Math.abs(lengthX.value), initData.leftWidth > 0 ? initData.leftWidth + spring : 0);\n        } else {\n          if (initData.rightWidth === 0) {\n            initData.moving = false;\n            return;\n          }\n          pos = Math.max(-lengthX.value, -(initData.rightWidth > 0 ? initData.rightWidth + spring : 0));\n        }\n        if (initData.status === 'close') {\n          initData.pos = pos;\n        }\n      },\n      onSwipeEnd: (e: TouchEvent) => {\n        end();\n      },\n    });\n    const distance = 0; // distance 滑动多少距离后开始显示菜\n    const autoBack = true; // autoBack 点击菜单后是否收回菜\n    const threshold = 0.5; // threshold 滑动宽度的百分之多少自动打开菜单，否则收回\n    const spring = 0; // 回弹距离\n    const initData: SwipeInitData = reactive({\n      moving: false,\n      leftWidth: 0, // 左边菜单的宽度\n      rightWidth: 0, // 右边菜单的宽度\n      pos: 0, // 移动的距离\n      status: 'close', // 菜单的状态，默认close\n    });\n    const classes = computed(() => [`${name}`]);\n    onMounted(() => {\n      const leftWidth = leftRef.value?.clientWidth as number;\n      const rightWidth = rightRef.value?.clientWidth as number;\n      initData.leftWidth = leftWidth > 0 ? leftWidth + distance : 0;\n      initData.rightWidth = rightWidth > 0 ? rightWidth + distance : 0;\n      renderMenuStatus();\n    });\n    watch(\n      () => props.expanded,\n      () => renderMenuStatus(),\n    );\n    onClickOutside(swipeCell, (event) => {\n      close();\n    });\n    const renderMenuStatus = () => {\n      if (props.expanded && props.expanded === 'left') {\n        if (initData.leftWidth) {\n          open('toRight');\n        }\n      }\n      if (props.expanded && props.expanded === 'right') {\n        if (initData.rightWidth) {\n          open('toLeft');\n        }\n      }\n    };\n    const end = () => {\n      if (props.disabled) {\n        return;\n      }\n      if (lengthX.value < 0 && initData.pos > initData.leftWidth * threshold) {\n        open('toRight');\n      } else if (lengthX.value > 0 && -initData.pos > initData.rightWidth * threshold) {\n        open('toLeft');\n      } else {\n        close('force');\n      }\n    };\n    const open = (direction: 'toRight' | 'toLeft') => {\n      if (initData.status === 'open') {\n        return;\n      }\n      initData.moving = true;\n      initData.status = 'open';\n      if (direction === 'toLeft') {\n        initData.pos = -initData.rightWidth;\n        if (initData.rightWidth) {\n          emitEvent('change', 'right');\n        }\n      } else {\n        initData.pos = initData.leftWidth;\n        if (initData.leftWidth) {\n          emitEvent('change', 'left');\n        }\n      }\n    };\n    const close = (type?: string) => {\n      if (initData.status === 'close' && type !== 'force') {\n        return;\n      }\n      initData.moving = true;\n      initData.status = 'close';\n      initData.pos = 0;\n      emitEvent('change', undefined);\n    };\n    const handleClickBtn = ({ action, source }: { action: SwipeActionItem; source: String }) => {\n      if (autoBack) {\n        close();\n      }\n      if (action.onClick) {\n        action.onClick();\n        return;\n      }\n      emitEvent('click', { action, source });\n    };\n    return {\n      ...toRefs(props),\n      swipeContent,\n      swipeLeftMenu,\n      swipeRightMenu,\n      initData,\n      classes,\n      swipeCell,\n      leftRef,\n      rightRef,\n      handleClickBtn,\n      end,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}