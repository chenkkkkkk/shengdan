{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { defineComponent, computed, getCurrentInstance, resolveComponent, openBlock, createBlock, mergeProps, withCtx, createCommentVNode, createElementBlock, normalizeClass, toDisplayString } from 'vue';\nimport '../shared/index.js';\nimport props from './props.js';\nimport config from '../config.js';\nimport _Button from '../button/index.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { useEmitEvent } from '../shared/useEmitEvent/index.js';\nimport { renderTNode } from '../shared/render.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/typeof';\nimport '../button/button.js';\nimport 'tdesign-icons-vue-next';\nimport '../button/props.js';\nimport './style/css.js';\nimport '../button/type.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-fab\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    TNode: TNodeComponent,\n    TButton: _Button\n  },\n  props: props,\n  emits: [\"click\"],\n  setup: function setup(props2, context) {\n    var emitEvent = useEmitEvent(props2, context.emit);\n    var classes = computed(function () {\n      var _ref;\n      return _ref = {}, _defineProperty(_ref, \"\".concat(name), true), _defineProperty(_ref, \"\".concat(name, \"--icononly\"), props2.icon && !props2.text), _ref;\n    });\n    var onClick = function onClick(e) {\n      return emitEvent(\"click\", {\n        e: e\n      });\n    };\n    var baseButtonProps = {\n      size: \"middle\",\n      shape: \"round\",\n      theme: \"primary\"\n    };\n    var customButtonProps = computed(function () {\n      return _objectSpread(_objectSpread({}, baseButtonProps), props2.buttonProps);\n    });\n    var internalInstance = getCurrentInstance();\n    var iconTNode = computed(function () {\n      return renderTNode(internalInstance, \"icon\");\n    });\n    return {\n      name: name,\n      classes: classes,\n      iconTNode: iconTNode,\n      customButtonProps: customButtonProps,\n      onClick: onClick\n    };\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_node = resolveComponent(\"t-node\");\n  var _component_t_button = resolveComponent(\"t-button\");\n  return openBlock(), createBlock(_component_t_button, mergeProps(_ctx.customButtonProps, {\n    class: _ctx.classes,\n    style: _ctx.style,\n    onClick: _ctx.onClick\n  }), {\n    default: withCtx(function () {\n      return [_ctx.iconTNode ? (openBlock(), createBlock(_component_t_node, {\n        key: 0,\n        content: _ctx.iconTNode\n      }, null, 8, [\"content\"])) : createCommentVNode(\"\", true), _ctx.text ? (openBlock(), createElementBlock(\"span\", {\n        key: 1,\n        class: normalizeClass(\"\".concat(_ctx.name, \"__text\"))\n      }, toDisplayString(_ctx.text), 3)) : createCommentVNode(\"\", true)];\n    }),\n    _: 1\n  }, 16, [\"class\", \"style\", \"onClick\"]);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA,IAAQA,SAAWC,OAAXD;AACR,IAAME,OAAUF;AAEhB,aAAeG,eAAgB;EAC7BD;EACAE,YAAY;IAAEC;IAAOC,OAAQ,EAARA;GAAQ;EAC7BC;EACAC,OAAO,CAAC,OAAO;EACfC,OAAMF,uBAAOG,OAAuB;IAClC,IAAMC,SAAY,gBAAaJ,MAAO,UAAQK,IAAI;IAE5C,cAAUC,SAAS;MAAA;MAAA,kDACnBX,IAAS,0CACTA,qBAAmBK,MAAM,SAAQ,CAACA,MAAM;IAAA,CAC5C;IAEF,IAAMO,UAAU,SAAVA,QAAWC;MAAA,OAAkBJ,UAAU,OAAS;QAAEI;MAAE,CAAC;IAAA;IAE3D,IAAMC,eAAkB;MACtBC,IAAM;MACNC,KAAO;MACPC,KAAO;KACT;IACM,wBAAoBN,SAAS;MAAA,uCAAaG,eAAmC,GAAGT,MAAM;IAAA,CAAc;IAE1G,IAAMa,mBAAmBC,kBAAmB;IAC5C,IAAMC,YAAYT,QAAS;MAAA,OAAMU,WAAY,mBAAkB,MAAM,CAAC;KAAA;IAE/D;MACLrB;MACAsB;MACAF;MACAG;MACAX;KACF;EACF;AACF,CAAC;;;;oBCjDC,cAGUY,mBAHV,aAGUC,KAHyBF;IAAGG,OAAOD,IAAO;IAAGE,OAAOF,IAAK;IAAGb,SAAOa,IAAO;;qBAClF;MAAA,OAA+C,CAAjCA,IAAS,2BAAvBG,YAA+CC;;QAArBC,SAASL,IAAS;gEAChCA,IAAI,sBAAhBM,mBAA2D;;QAAxCL,sBAAUD,eAAIzB;yBAAayB,IAAK","names":["prefix","config","name","defineComponent","components","TNode","TButton","props","emits","setup","context","emitEvent","emit","computed","onClick","e","baseButtonProps","size","shape","theme","internalInstance","getCurrentInstance","iconTNode","renderTNode","classes","customButtonProps","_component_t_button","_ctx","class","style","_createBlock","_component_t_node","content","_createElementBlock"],"sources":["../../src/fab/fab.vue","../../src/fab/fab.vue?vue&type=template&id=237d41d9&lang.js"],"sourcesContent":["<template>\n  <t-button v-bind=\"customButtonProps\" :class=\"classes\" :style=\"style\" @click=\"onClick\">\n    <t-node v-if=\"iconTNode\" :content=\"iconTNode\" />\n    <span v-if=\"text\" :class=\"`${name}__text`\">{{ text }}</span>\n  </t-button>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, SetupContext, getCurrentInstance } from 'vue';\nimport { renderTNode, TNode, useEmitEvent } from '../shared';\nimport props from './props';\nimport config from '../config';\nimport TButton, { TdButtonProps } from '../button';\n\nconst { prefix } = config;\nconst name = `${prefix}-fab`;\n\nexport default defineComponent({\n  name,\n  components: { TNode, TButton },\n  props,\n  emits: ['click'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n\n    const classes = computed(() => ({\n      [`${name}`]: true,\n      [`${name}--icononly`]: props.icon && !props.text,\n    }));\n\n    const onClick = (e: MouseEvent) => emitEvent('click', { e });\n\n    const baseButtonProps = {\n      size: 'middle',\n      shape: 'round',\n      theme: 'primary',\n    };\n    const customButtonProps = computed(() => ({ ...(baseButtonProps as TdButtonProps), ...props.buttonProps }));\n\n    const internalInstance = getCurrentInstance();\n    const iconTNode = computed(() => renderTNode(internalInstance, 'icon'));\n\n    return {\n      name,\n      classes,\n      iconTNode,\n      customButtonProps,\n      onClick,\n    };\n  },\n});\n</script>\n","<template>\n  <t-button v-bind=\"customButtonProps\" :class=\"classes\" :style=\"style\" @click=\"onClick\">\n    <t-node v-if=\"iconTNode\" :content=\"iconTNode\" />\n    <span v-if=\"text\" :class=\"`${name}__text`\">{{ text }}</span>\n  </t-button>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, SetupContext, getCurrentInstance } from 'vue';\nimport { renderTNode, TNode, useEmitEvent } from '../shared';\nimport props from './props';\nimport config from '../config';\nimport TButton, { TdButtonProps } from '../button';\n\nconst { prefix } = config;\nconst name = `${prefix}-fab`;\n\nexport default defineComponent({\n  name,\n  components: { TNode, TButton },\n  props,\n  emits: ['click'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n\n    const classes = computed(() => ({\n      [`${name}`]: true,\n      [`${name}--icononly`]: props.icon && !props.text,\n    }));\n\n    const onClick = (e: MouseEvent) => emitEvent('click', { e });\n\n    const baseButtonProps = {\n      size: 'middle',\n      shape: 'round',\n      theme: 'primary',\n    };\n    const customButtonProps = computed(() => ({ ...(baseButtonProps as TdButtonProps), ...props.buttonProps }));\n\n    const internalInstance = getCurrentInstance();\n    const iconTNode = computed(() => renderTNode(internalInstance, 'icon'));\n\n    return {\n      name,\n      classes,\n      iconTNode,\n      customButtonProps,\n      onClick,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}