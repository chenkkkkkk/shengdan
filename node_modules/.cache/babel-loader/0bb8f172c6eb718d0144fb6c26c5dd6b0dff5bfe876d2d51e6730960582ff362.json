{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport { defineComponent, ref, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, Fragment, renderList, createVNode, withCtx, createBlock, createCommentVNode } from 'vue';\nimport config from '../config.js';\nimport { Grid, GridItem } from '../grid/index.js';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport '../grid/grid.js';\nimport '../grid/props.js';\nimport '../grid/grid-item.js';\nimport '../badge/index.js';\nimport '../badge/badge.js';\nimport '@babel/runtime/helpers/slicedToArray';\nimport '../shared/index.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/render.js';\nimport '@babel/runtime/helpers/typeof';\nimport 'lodash/camelCase';\nimport '../shared/render-tnode.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport '../shared/useEmitEvent/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '../badge/props.js';\nimport './style/css.js';\nimport '../badge/type.js';\nimport '../grid/grid-item-props.js';\nimport '../grid/type.js';\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-action-sheet\");\nvar script = defineComponent({\n  components: {\n    TGrid: Grid,\n    TGridItem: GridItem\n  },\n  props: {\n    items: {\n      type: Array,\n      required: true\n    },\n    count: {\n      type: Number,\n      default: 8\n    }\n  },\n  emits: [\"selected\"],\n  setup: function setup(props, context) {\n    var containerWrapper = ref(null);\n    var moveOffset = ref(0);\n    var currentIndex = ref(0);\n    var useTransition = ref(true);\n    var startX = 0;\n    var startOffset = 0;\n    var canMove = true;\n    var wrapperStyle = computed(function () {\n      return {\n        transform: \"translate3d(\".concat(moveOffset.value, \"px, 0, 0)\"),\n        transition: useTransition.value ? \"transform 300ms\" : \"all\"\n      };\n    });\n    var gridColumn = computed(function () {\n      return Math.ceil(props.count / 2);\n    });\n    var pageNum = computed(function () {\n      return Math.ceil(props.items.length / props.count);\n    });\n    var actionItems = computed(function () {\n      var res = [];\n      for (var i = 0; i < pageNum.value; i++) {\n        var temp = props.items.slice(i * props.count, (i + 1) * props.count);\n        res.push(temp);\n      }\n      return res;\n    });\n    var handleSelected = function handleSelected(index) {\n      context.emit(\"selected\", index);\n    };\n    var moveByIndex = function moveByIndex(index) {\n      useTransition.value = true;\n      if (containerWrapper.value) {\n        moveOffset.value = pageNum.value > 1 ? index * containerWrapper.value.offsetWidth * -1 : 0;\n      }\n    };\n    var getMaxOffset = function getMaxOffset() {\n      if (!containerWrapper.value) return 0;\n      return (pageNum.value - 1) * containerWrapper.value.offsetWidth;\n    };\n    var handleTouchstart = function handleTouchstart(e) {\n      canMove = true;\n      useTransition.value = false;\n      startX = e.touches[0].clientX;\n      startOffset = startX - moveOffset.value;\n    };\n    var handleTouchmove = function handleTouchmove(e) {\n      var clientX = e.touches[0].clientX;\n      var minOffset = 0;\n      var maxOffset = getMaxOffset();\n      if (Math.abs(clientX - startX) < 15) return;\n      moveOffset.value = clientX - startOffset;\n      if (moveOffset.value > minOffset) {\n        moveOffset.value = minOffset;\n        canMove = false;\n      }\n      if (Math.abs(moveOffset.value) >= maxOffset) {\n        moveOffset.value = maxOffset * -1;\n        canMove = false;\n      }\n    };\n    var handleTouchend = function handleTouchend(e) {\n      if (!canMove) return;\n      var distance = e.changedTouches[0].clientX - startX;\n      var targetIndex = Math.abs(distance) > 50 ? currentIndex.value + (distance < 0 ? 1 : -1) : currentIndex.value;\n      currentIndex.value = targetIndex;\n      moveByIndex(targetIndex);\n    };\n    return {\n      name: ref(name),\n      gridColumn: gridColumn,\n      pageNum: pageNum,\n      actionItems: actionItems,\n      currentIndex: currentIndex,\n      containerWrapper: containerWrapper,\n      wrapperStyle: wrapperStyle,\n      handleSelected: handleSelected,\n      handleTouchstart: handleTouchstart,\n      handleTouchmove: handleTouchmove,\n      handleTouchend: handleTouchend\n    };\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_grid_item = resolveComponent(\"t-grid-item\");\n  var _component_t_grid = resolveComponent(\"t-grid\");\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"containerWrapper\",\n    class: normalizeClass(\"\".concat(_ctx.name, \"__menu-wrapper\"))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__menu-slider\")),\n    style: normalizeStyle(_ctx.wrapperStyle),\n    onTouchstart: _cache[0] || (_cache[0] = function () {\n      return _ctx.handleTouchstart && _ctx.handleTouchstart.apply(_ctx, arguments);\n    }),\n    onTouchmove: _cache[1] || (_cache[1] = function () {\n      return _ctx.handleTouchmove && _ctx.handleTouchmove.apply(_ctx, arguments);\n    }),\n    onTouchend: _cache[2] || (_cache[2] = function () {\n      return _ctx.handleTouchend && _ctx.handleTouchend.apply(_ctx, arguments);\n    })\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.actionItems, function (Items, i) {\n    return openBlock(), createElementBlock(\"div\", {\n      key: i,\n      class: normalizeClass(\"\".concat(_ctx.name, \"__menu\"))\n    }, [createVNode(_component_t_grid, {\n      column: _ctx.gridColumn\n    }, {\n      default: withCtx(function () {\n        return [(openBlock(true), createElementBlock(Fragment, null, renderList(Items, function (item, index) {\n          return openBlock(), createBlock(_component_t_grid_item, {\n            key: index,\n            text: item.label,\n            image: item.icon,\n            onClick: function onClick($event) {\n              return _ctx.handleSelected(i * _ctx.count + index);\n            }\n          }, null, 8, [\"text\", \"image\", \"onClick\"]);\n        }), 128))];\n      }),\n      _: 2\n    }, 1032, [\"column\"])], 2);\n  }), 128))], 38), _ctx.pageNum > 1 ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__indicator\"))\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.pageNum, function (index) {\n    var _normalizeClass2;\n    return openBlock(), createElementBlock(\"div\", {\n      key: index,\n      class: normalizeClass((_normalizeClass2 = {}, _defineProperty(_normalizeClass2, \"\".concat(_ctx.name, \"__indicator-item\"), true), _defineProperty(_normalizeClass2, \"on\", _ctx.currentIndex === index - 1), _normalizeClass2))\n    }, null, 2);\n  }), 128))], 2)) : createCommentVNode(\"\", true)], 2);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":"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","names":["prefix","config","name","defineComponent","components","TGrid","TGridItem","props","items","type","required","count","default","emits","setup","context","ref","startX","startOffset","canMove","computed","transform","moveOffset","transition","useTransition","Math","ceil","res","i","value","slice","push","temp","handleSelected","index","moveByIndex","containerWrapper","pageNum","offsetWidth","getMaxOffset","handleTouchstart","e","touches","handleTouchmove","clientX","minOffset","maxOffset","handleTouchend","distance","changedTouches","targetIndex","abs","currentIndex","gridColumn","actionItems","wrapperStyle","class","_ctx","_createElementVNode","style","onTouchstart","onTouchmove","onTouchend","_openBlock","key","_createVNode","_component_t_grid","column","_component_t_grid_item","text","item","image","onClick","$event","_createElementBlock","_normalizeClass"],"sources":["../../src/action-sheet/menu-grid.vue","../../src/action-sheet/menu-grid.vue?vue&type=template&id=73c02ce4&lang.js"],"sourcesContent":["<template>\n  <div ref=\"containerWrapper\" :class=\"`${name}__menu-wrapper`\">\n    <div\n      :class=\"`${name}__menu-slider`\"\n      :style=\"wrapperStyle\"\n      @touchstart=\"handleTouchstart\"\n      @touchmove=\"handleTouchmove\"\n      @touchend=\"handleTouchend\"\n    >\n      <div v-for=\"(Items, i) in actionItems\" :key=\"i\" :class=\"`${name}__menu`\">\n        <t-grid :column=\"gridColumn\">\n          <t-grid-item\n            v-for=\"(item, index) in Items\"\n            :key=\"index\"\n            :text=\"item.label\"\n            :image=\"item.icon\"\n            @click=\"handleSelected(i * count + index)\"\n          />\n        </t-grid>\n      </div>\n    </div>\n    <div v-if=\"pageNum > 1\" :class=\"`${name}__indicator`\">\n      <div\n        v-for=\"index in pageNum\"\n        :key=\"index\"\n        :class=\"{\n          [`${name}__indicator-item`]: true,\n          on: currentIndex === index - 1,\n        }\"\n      />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ref, SetupContext, defineComponent, computed } from 'vue';\nimport config from '../config';\nimport { Grid as TGrid, GridItem as TGridItem } from '../grid';\n\nconst { prefix } = config;\n\nconst name = `${prefix}-action-sheet`;\n\nexport default defineComponent({\n  components: { TGrid, TGridItem },\n  props: {\n    items: {\n      type: Array,\n      required: true,\n    },\n    count: {\n      type: Number,\n      default: 8,\n    },\n  },\n  emits: ['selected'],\n  setup(props, context: SetupContext) {\n    const containerWrapper = ref<HTMLElement | null>(null);\n    const moveOffset = ref(0);\n    const currentIndex = ref(0);\n    const useTransition = ref(true);\n    let startX = 0;\n    let startOffset = 0;\n    let canMove = true;\n\n    const wrapperStyle = computed(() => ({\n      transform: `translate3d(${moveOffset.value}px, 0, 0)`,\n      transition: useTransition.value ? 'transform 300ms' : 'all',\n    }));\n    const gridColumn = computed(() => Math.ceil(props.count / 2));\n    const pageNum = computed(() => Math.ceil(props.items.length / props.count));\n    // 分页数据处理\n    const actionItems = computed(() => {\n      const res: any = [];\n      for (let i = 0; i < pageNum.value; i++) {\n        const temp = props.items.slice(i * props.count, (i + 1) * props.count);\n        res.push(temp);\n      }\n      return res;\n    });\n\n    const handleSelected = (index: number) => {\n      context.emit('selected', index);\n    };\n\n    const moveByIndex = (index: number) => {\n      useTransition.value = true;\n      if (containerWrapper.value) {\n        moveOffset.value = pageNum.value > 1 ? index * containerWrapper.value.offsetWidth * -1 : 0;\n      }\n    };\n\n    // 滑动时的最大偏移\n    const getMaxOffset = () => {\n      if (!containerWrapper.value) return 0;\n\n      return (pageNum.value - 1) * containerWrapper.value.offsetWidth;\n    };\n\n    const handleTouchstart = (e: TouchEvent) => {\n      canMove = true;\n      useTransition.value = false;\n      startX = e.touches[0].clientX;\n      startOffset = startX - moveOffset.value;\n    };\n\n    const handleTouchmove = (e: TouchEvent) => {\n      const { clientX } = e.touches[0];\n      const minOffset = 0;\n      const maxOffset = getMaxOffset();\n\n      if (Math.abs(clientX - startX) < 15) return;\n      moveOffset.value = clientX - startOffset;\n\n      // 滑动临界值判单\n      if (moveOffset.value > minOffset) {\n        moveOffset.value = minOffset;\n        canMove = false;\n      }\n      if (Math.abs(moveOffset.value) >= maxOffset) {\n        moveOffset.value = maxOffset * -1;\n        canMove = false;\n      }\n    };\n    const handleTouchend = (e: TouchEvent) => {\n      if (!canMove) return;\n\n      const distance = e.changedTouches[0].clientX - startX;\n      const targetIndex = Math.abs(distance) > 50 ? currentIndex.value + (distance < 0 ? 1 : -1) : currentIndex.value;\n      currentIndex.value = targetIndex;\n      moveByIndex(targetIndex);\n    };\n\n    return {\n      name: ref(name),\n      gridColumn,\n      pageNum,\n      actionItems,\n      currentIndex,\n      containerWrapper,\n      wrapperStyle,\n      handleSelected,\n      handleTouchstart,\n      handleTouchmove,\n      handleTouchend,\n    };\n  },\n});\n</script>\n","<template>\n  <div ref=\"containerWrapper\" :class=\"`${name}__menu-wrapper`\">\n    <div\n      :class=\"`${name}__menu-slider`\"\n      :style=\"wrapperStyle\"\n      @touchstart=\"handleTouchstart\"\n      @touchmove=\"handleTouchmove\"\n      @touchend=\"handleTouchend\"\n    >\n      <div v-for=\"(Items, i) in actionItems\" :key=\"i\" :class=\"`${name}__menu`\">\n        <t-grid :column=\"gridColumn\">\n          <t-grid-item\n            v-for=\"(item, index) in Items\"\n            :key=\"index\"\n            :text=\"item.label\"\n            :image=\"item.icon\"\n            @click=\"handleSelected(i * count + index)\"\n          />\n        </t-grid>\n      </div>\n    </div>\n    <div v-if=\"pageNum > 1\" :class=\"`${name}__indicator`\">\n      <div\n        v-for=\"index in pageNum\"\n        :key=\"index\"\n        :class=\"{\n          [`${name}__indicator-item`]: true,\n          on: currentIndex === index - 1,\n        }\"\n      />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ref, SetupContext, defineComponent, computed } from 'vue';\nimport config from '../config';\nimport { Grid as TGrid, GridItem as TGridItem } from '../grid';\n\nconst { prefix } = config;\n\nconst name = `${prefix}-action-sheet`;\n\nexport default defineComponent({\n  components: { TGrid, TGridItem },\n  props: {\n    items: {\n      type: Array,\n      required: true,\n    },\n    count: {\n      type: Number,\n      default: 8,\n    },\n  },\n  emits: ['selected'],\n  setup(props, context: SetupContext) {\n    const containerWrapper = ref<HTMLElement | null>(null);\n    const moveOffset = ref(0);\n    const currentIndex = ref(0);\n    const useTransition = ref(true);\n    let startX = 0;\n    let startOffset = 0;\n    let canMove = true;\n\n    const wrapperStyle = computed(() => ({\n      transform: `translate3d(${moveOffset.value}px, 0, 0)`,\n      transition: useTransition.value ? 'transform 300ms' : 'all',\n    }));\n    const gridColumn = computed(() => Math.ceil(props.count / 2));\n    const pageNum = computed(() => Math.ceil(props.items.length / props.count));\n    // 分页数据处理\n    const actionItems = computed(() => {\n      const res: any = [];\n      for (let i = 0; i < pageNum.value; i++) {\n        const temp = props.items.slice(i * props.count, (i + 1) * props.count);\n        res.push(temp);\n      }\n      return res;\n    });\n\n    const handleSelected = (index: number) => {\n      context.emit('selected', index);\n    };\n\n    const moveByIndex = (index: number) => {\n      useTransition.value = true;\n      if (containerWrapper.value) {\n        moveOffset.value = pageNum.value > 1 ? index * containerWrapper.value.offsetWidth * -1 : 0;\n      }\n    };\n\n    // 滑动时的最大偏移\n    const getMaxOffset = () => {\n      if (!containerWrapper.value) return 0;\n\n      return (pageNum.value - 1) * containerWrapper.value.offsetWidth;\n    };\n\n    const handleTouchstart = (e: TouchEvent) => {\n      canMove = true;\n      useTransition.value = false;\n      startX = e.touches[0].clientX;\n      startOffset = startX - moveOffset.value;\n    };\n\n    const handleTouchmove = (e: TouchEvent) => {\n      const { clientX } = e.touches[0];\n      const minOffset = 0;\n      const maxOffset = getMaxOffset();\n\n      if (Math.abs(clientX - startX) < 15) return;\n      moveOffset.value = clientX - startOffset;\n\n      // 滑动临界值判单\n      if (moveOffset.value > minOffset) {\n        moveOffset.value = minOffset;\n        canMove = false;\n      }\n      if (Math.abs(moveOffset.value) >= maxOffset) {\n        moveOffset.value = maxOffset * -1;\n        canMove = false;\n      }\n    };\n    const handleTouchend = (e: TouchEvent) => {\n      if (!canMove) return;\n\n      const distance = e.changedTouches[0].clientX - startX;\n      const targetIndex = Math.abs(distance) > 50 ? currentIndex.value + (distance < 0 ? 1 : -1) : currentIndex.value;\n      currentIndex.value = targetIndex;\n      moveByIndex(targetIndex);\n    };\n\n    return {\n      name: ref(name),\n      gridColumn,\n      pageNum,\n      actionItems,\n      currentIndex,\n      containerWrapper,\n      wrapperStyle,\n      handleSelected,\n      handleTouchstart,\n      handleTouchmove,\n      handleTouchend,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}