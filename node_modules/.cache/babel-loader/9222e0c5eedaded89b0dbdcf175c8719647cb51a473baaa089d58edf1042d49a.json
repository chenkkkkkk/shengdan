{"ast":null,"code":"/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _typeof from '@babel/runtime/helpers/typeof';\nimport { defineComponent, computed, getCurrentInstance, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, createVNode, createCommentVNode } from 'vue';\nimport '../shared/index.js';\nimport config from '../config.js';\nimport { getBackgroundColor } from './utils.js';\nimport progressProps from './props.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { renderTNode } from '../shared/render.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useEmitEvent/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/defineProperty';\nimport '@babel/runtime/helpers/objectWithoutProperties';\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-progress\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    TNode: TNodeComponent\n  },\n  props: progressProps,\n  setup: function setup(props) {\n    var progressPercent = computed(function () {\n      return Math.max(0, Math.min(props.percentage, 100));\n    });\n    var progressStatusStyle = computed(function () {\n      if (props.percentage >= 100) {\n        return \"success\";\n      }\n      return props.status;\n    });\n    var progressBarStyle = computed(function () {\n      var height = typeof props.strokeWidth === \"string\" ? props.strokeWidth : \"\".concat(props.strokeWidth, \"px\");\n      return {\n        height: height,\n        backgroundColor: props.trackColor\n      };\n    });\n    var progressBarPercenStyle = computed(function () {\n      return {\n        width: \"\".concat(progressPercent.value, \"%\"),\n        background: props.color && getBackgroundColor(props.color)\n      };\n    });\n    var rootClasses = computed(function () {\n      return [\"\".concat(name), \"\".concat(name, \"--status--\").concat(progressStatusStyle.value)];\n    });\n    var internalInstance = getCurrentInstance();\n    var progressLabelContent = computed(function () {\n      return props.label && (_typeof(renderTNode(internalInstance, \"label\")) === \"object\" ? renderTNode(internalInstance, \"label\") : \"\".concat(progressPercent.value, \"%\"));\n    });\n    return {\n      name: name,\n      rootClasses: rootClasses,\n      progressBarPercenStyle: progressBarPercenStyle,\n      progressBarStyle: progressBarStyle,\n      progressLabelContent: progressLabelContent\n    };\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_node = resolveComponent(\"t-node\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.rootClasses)\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__inner\"))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__bar\")),\n    style: normalizeStyle(_ctx.progressBarStyle)\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__bar-percent\")),\n    style: normalizeStyle(_ctx.progressBarPercenStyle)\n  }, null, 6)], 6), _ctx.progressLabelContent ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__label\"))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.progressLabelContent\n  }, null, 8, [\"content\"])], 2)) : createCommentVNode(\"\", true)], 2)], 2);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAQA,SAAWC,OAAXD;AACR,IAAME,OAAUF;AAEhB,aAAeG,eAAgB;EAC7BD;EACAE,UAAY;IACVC;GACF;EACAC,KAAO;EACPC,sBAAMD,KAAO;IACL,sBAAkBE,SAAS,YAAM;MAC9B,YAAKC,IAAI,CAAG,OAAKC,IAAIJ,KAAM,aAAY,GAAG,CAAC;IACpD,CAAC;IAEK,0BAAsBE,SAAS,YAAM;MACrC,UAAMG,cAAc,GAAK;QACpB;MACT;MACA,OAAOL,KAAM;IACf,CAAC;IAEK,uBAAmBE,SAAS,YAAM;MAChC,aAAS,OAAOF,KAAM,iBAAgB,WAAWA,KAAM,yBAAiBA,KAAM;MAC7E;QACLM;QACAC,iBAAiBP,KAAM;OACzB;IACF,CAAC;IAEK,6BAAyBE,SAAS,YAAM;MACrC;QACLM,OAAUC,yBAAgB;QAC1BC,UAAY,QAAMC,KAAS,uBAAmBX,MAAMW,KAAK;OAC3D;IACF,CAAC;IAEK,kBAAcT,QAAS;MAAA,OAAM,WAAIN,KAAWA,uCAAiBgB,mBAAoB,OAAQ;KAAA;IAC/F,IAAMC,mBAAmBC,kBAAmB;IAC5C,IAAMC,oBAAuB,YAC3B;MAAA,OACEf,MAAMgB,KACL,aAAOC,YAAYJ,gBAAkB,SAAO,CAAM,iBAC/CI,WAAY,mBAAkB,OAAO,cAClCR,eAAgB;KAC3B;IAEO;MACLb;MACAsB;MACAC;MACAC;MACAL;KACF;EACF;AACF,CAAC;;;oBCzEC,qBASK;IATCM,qBAAO,MAAWH;MACtBI,mBAOK;IAPCD,sBAAUE,eAAI3B;MAClB0B,mBAEK;IAFCD,gCAAUE,KAAI3B;IAAU4B,qBAAO,MAAgBJ;MACnDE,mBAA0E;IAApED,gCAAUE,KAAI3B;IAAkB4B,qBAAO,MAAsBL;oBAE1DI,IAAoB,sCAA/BE,mBAEK;;IAF6BJ,sBAAUE,eAAI3B;MAC9C8B,YAAgDC;IAAvCC,OAAS,OAAoBb;GAAA","names":["prefix","config","name","defineComponent","components","TNode","props","setup","computed","max","min","percentage","height","backgroundColor","width","progressPercent","background","color","progressStatusStyle","internalInstance","getCurrentInstance","progressLabelContent","label","renderTNode","rootClasses","progressBarPercenStyle","progressBarStyle","class","_createElementVNode","_ctx","style","_createElementBlock","_createVNode","_component_t_node","content"],"sources":["../../src/progress/progress.vue","../../src/progress/progress.vue?vue&type=template&id=5f61bbee&lang.js"],"sourcesContent":["<template>\n  <div :class=\"rootClasses\">\n    <div :class=\"`${name}__inner`\">\n      <div :class=\"`${name}__bar`\" :style=\"progressBarStyle\">\n        <div :class=\"`${name}__bar-percent`\" :style=\"progressBarPercenStyle\"></div>\n      </div>\n      <div v-if=\"progressLabelContent\" :class=\"`${name}__label`\">\n        <t-node :content=\"progressLabelContent\"></t-node>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, getCurrentInstance } from 'vue';\nimport { renderTNode, TNode } from '../shared';\nimport config from '../config';\nimport { getBackgroundColor } from './utils';\nimport progressProps from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-progress`;\n\nexport default defineComponent({\n  name,\n  components: {\n    TNode,\n  },\n  props: progressProps,\n  setup(props) {\n    const progressPercent = computed(() => {\n      return Math.max(0, Math.min(props.percentage, 100));\n    });\n\n    const progressStatusStyle = computed(() => {\n      if (props.percentage >= 100) {\n        return 'success';\n      }\n      return props.status;\n    });\n\n    const progressBarStyle = computed(() => {\n      const height = typeof props.strokeWidth === 'string' ? props.strokeWidth : `${props.strokeWidth}px`;\n      return {\n        height,\n        backgroundColor: props.trackColor,\n      };\n    });\n\n    const progressBarPercenStyle = computed(() => {\n      return {\n        width: `${progressPercent.value}%`,\n        background: props.color && getBackgroundColor(props.color),\n      };\n    });\n\n    const rootClasses = computed(() => [`${name}`, `${name}--status--${progressStatusStyle.value}`]);\n    const internalInstance = getCurrentInstance();\n    const progressLabelContent = computed(\n      () =>\n        props.label &&\n        (typeof renderTNode(internalInstance, 'label') === 'object'\n          ? renderTNode(internalInstance, 'label')\n          : `${progressPercent.value}%`),\n    );\n\n    return {\n      name,\n      rootClasses,\n      progressBarPercenStyle,\n      progressBarStyle,\n      progressLabelContent,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"rootClasses\">\n    <div :class=\"`${name}__inner`\">\n      <div :class=\"`${name}__bar`\" :style=\"progressBarStyle\">\n        <div :class=\"`${name}__bar-percent`\" :style=\"progressBarPercenStyle\"></div>\n      </div>\n      <div v-if=\"progressLabelContent\" :class=\"`${name}__label`\">\n        <t-node :content=\"progressLabelContent\"></t-node>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, getCurrentInstance } from 'vue';\nimport { renderTNode, TNode } from '../shared';\nimport config from '../config';\nimport { getBackgroundColor } from './utils';\nimport progressProps from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-progress`;\n\nexport default defineComponent({\n  name,\n  components: {\n    TNode,\n  },\n  props: progressProps,\n  setup(props) {\n    const progressPercent = computed(() => {\n      return Math.max(0, Math.min(props.percentage, 100));\n    });\n\n    const progressStatusStyle = computed(() => {\n      if (props.percentage >= 100) {\n        return 'success';\n      }\n      return props.status;\n    });\n\n    const progressBarStyle = computed(() => {\n      const height = typeof props.strokeWidth === 'string' ? props.strokeWidth : `${props.strokeWidth}px`;\n      return {\n        height,\n        backgroundColor: props.trackColor,\n      };\n    });\n\n    const progressBarPercenStyle = computed(() => {\n      return {\n        width: `${progressPercent.value}%`,\n        background: props.color && getBackgroundColor(props.color),\n      };\n    });\n\n    const rootClasses = computed(() => [`${name}`, `${name}--status--${progressStatusStyle.value}`]);\n    const internalInstance = getCurrentInstance();\n    const progressLabelContent = computed(\n      () =>\n        props.label &&\n        (typeof renderTNode(internalInstance, 'label') === 'object'\n          ? renderTNode(internalInstance, 'label')\n          : `${progressPercent.value}%`),\n    );\n\n    return {\n      name,\n      rootClasses,\n      progressBarPercenStyle,\n      progressBarStyle,\n      progressLabelContent,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}