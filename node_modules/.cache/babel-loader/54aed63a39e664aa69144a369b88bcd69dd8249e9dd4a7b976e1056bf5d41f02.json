{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { defineComponent, computed, ref, toRefs, watch, onUnmounted, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, withModifiers, createVNode, mergeProps, toDisplayString, renderSlot } from 'vue';\nimport { useElementSize } from '@vueuse/core';\nimport PullDownRefreshProps from './props.js';\nimport '../shared/index.js';\nimport config from '../config.js';\nimport _Loading from '../loading/index.js';\nimport { useTouch, isReachTop, easeDistance } from './useTouch.js';\nimport { useEmitEvent } from '../shared/useEmitEvent/index.js';\nimport { useVModel } from '../shared/useVModel/index.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/render.js';\nimport '@babel/runtime/helpers/typeof';\nimport 'lodash/camelCase';\nimport '../shared/render-tnode.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '../loading/loading.js';\nimport '../loading/icon/gradient.js';\nimport '../_common/js/loading/circle-adapter.js';\nimport '../_common/js/utils/set-style.js';\nimport '../_common/js/utils/helper.js';\nimport '@babel/runtime/helpers/objectWithoutProperties';\nimport '../loading/icon/spinner.js';\nimport '../loading/props.js';\nimport './style/css.js';\nimport '../loading/type.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-pull-down-refresh\");\nvar ANIMATION_DURATION = 300;\nvar statusName = [\"pulling\", \"loosing\", \"loading\", \"success\", \"initial\"];\nvar script = defineComponent({\n  name: name,\n  components: {\n    TLoading: _Loading\n  },\n  props: PullDownRefreshProps,\n  emits: [\"refresh\", \"timeout\", \"update:value\", \"update:modelValue\"],\n  setup: function setup(props, context) {\n    var _props$loadingTexts;\n    var emitEvent = useEmitEvent(props, context.emit);\n    var trackStyle = computed(function () {\n      return {\n        transitionDuration: \"\".concat(ANIMATION_DURATION, \"ms\"),\n        transform: \"translate3d(0, \".concat(distance.value, \"px, 0)\")\n      };\n    });\n    var loadingBarStyles = computed(function () {\n      return {\n        height: typeof props.loadingBarHeight === \"number\" ? \"\".concat(props.loadingBarHeight, \"px\") : props.loadingBarHeight\n      };\n    });\n    var maxBarStyles = computed(function () {\n      return {\n        height: typeof props.maxBarHeight === \"number\" ? \"\".concat(props.maxBarHeight, \"px\") : props.maxBarHeight\n      };\n    });\n    var loadingIconProps = computed(function () {\n      return _objectSpread({}, props.loadingProps);\n    });\n    var isLoading = ref(false);\n    var distance = ref(0);\n    var _toRefs = toRefs(props),\n      value = _toRefs.value,\n      modelValue = _toRefs.modelValue;\n    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),\n      _useVModel2 = _slicedToArray(_useVModel, 2),\n      statusValue = _useVModel2[0],\n      setStatusValue = _useVModel2[1];\n    var status = computed(function () {\n      if (!statusValue.value && isLoading.value) {\n        return \"success\";\n      }\n      if (!statusValue.value || distance.value === 0) {\n        return \"initial\";\n      }\n      if (distance.value < loadingBarHeight.value) {\n        return \"pulling\";\n      }\n      if (isLoading.value) {\n        return \"loading\";\n      }\n      return \"loosing\";\n    });\n    watch(status, function (newVal) {\n      if (newVal === \"success\" || newVal === \"initial\") {\n        setTimeout(function () {\n          distance.value = 0;\n          isLoading.value = false;\n        }, 300);\n      }\n    });\n    var loadingTexts = ref((_props$loadingTexts = props.loadingTexts) !== null && _props$loadingTexts !== void 0 && _props$loadingTexts.length ? props.loadingTexts : [\"\\u4E0B\\u62C9\\u5237\\u65B0\", \"\\u677E\\u624B\\u5237\\u65B0\", \"\\u6B63\\u5728\\u5237\\u65B0\", \"\\u5237\\u65B0\\u5B8C\\u6210\"]);\n    var loadingText = computed(function () {\n      var index = statusName.indexOf(status.value);\n      return index >= 0 ? loadingTexts.value[index] : \"\";\n    });\n    var touch = useTouch();\n    var loadingBar = ref(null);\n    var maxBar = ref(null);\n    var _useElementSize = useElementSize(loadingBar),\n      loadingBarHeight = _useElementSize.height;\n    var _useElementSize2 = useElementSize(maxBar),\n      maxBarHeight = _useElementSize2.height;\n    var onTouchStart = function onTouchStart(e) {\n      if (!isReachTop(e) || isLoading.value) return;\n      setStatusValue(true);\n      distance.value = 0;\n      touch.start(e);\n    };\n    var onTouchMove = function onTouchMove(e) {\n      if (!isReachTop(e) || isLoading.value) return;\n      var deltaY = touch.deltaY;\n      var nextDistance = easeDistance(deltaY.value, loadingBarHeight.value);\n      if (deltaY.value > 0) {\n        e.preventDefault();\n      }\n      if (nextDistance >= 0 && nextDistance < maxBarHeight.value) {\n        distance.value = nextDistance;\n      }\n      touch.move(e);\n    };\n    var timer = null;\n    var onTouchEnd = function onTouchEnd(e) {\n      if (!isReachTop(e) || isLoading.value) return;\n      if (status.value === \"loosing\") {\n        distance.value = loadingBarHeight.value;\n        isLoading.value = true;\n        emitEvent(\"refresh\");\n        timer = setTimeout(function () {\n          if (isLoading.value) {\n            emitEvent(\"timeout\");\n            setStatusValue(false);\n          }\n        }, props.refreshTimeout);\n      } else {\n        setStatusValue(false);\n      }\n    };\n    onUnmounted(function () {\n      clearTimeout(timer);\n    });\n    return {\n      name: name,\n      status: status,\n      trackStyle: trackStyle,\n      loadingText: loadingText,\n      maxBarStyles: maxBarStyles,\n      loadingBarStyles: loadingBarStyles,\n      loadingIconProps: loadingIconProps,\n      loadingBar: loadingBar,\n      maxBar: maxBar,\n      onTouchStart: onTouchStart,\n      onTouchMove: onTouchMove,\n      onTouchEnd: onTouchEnd\n    };\n  }\n});\nvar _hoisted_1 = {\n  key: 0\n};\nvar _hoisted_2 = {\n  key: 1\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_loading = resolveComponent(\"t-loading\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.name)\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__track\")),\n    style: normalizeStyle(_ctx.trackStyle),\n    onTouchstart: _cache[0] || (_cache[0] = withModifiers(function () {\n      return _ctx.onTouchStart && _ctx.onTouchStart.apply(_ctx, arguments);\n    }, [\"stop\"])),\n    onTouchmove: _cache[1] || (_cache[1] = withModifiers(function () {\n      return _ctx.onTouchMove && _ctx.onTouchMove.apply(_ctx, arguments);\n    }, [\"stop\"])),\n    onTouchend: _cache[2] || (_cache[2] = withModifiers(function () {\n      return _ctx.onTouchEnd && _ctx.onTouchEnd.apply(_ctx, arguments);\n    }, [\"stop\"])),\n    onTouchcancel: _cache[3] || (_cache[3] = withModifiers(function () {\n      return _ctx.onTouchEnd && _ctx.onTouchEnd.apply(_ctx, arguments);\n    }, [\"stop\"]))\n  }, [createElementVNode(\"div\", {\n    ref: \"maxBar\",\n    class: normalizeClass(\"\".concat(_ctx.name, \"__max\")),\n    style: normalizeStyle(_ctx.maxBarStyles)\n  }, [createElementVNode(\"div\", {\n    ref: \"loadingBar\",\n    class: normalizeClass(\"\".concat(_ctx.name, \"__loading\")),\n    style: normalizeStyle(_ctx.loadingBarStyles)\n  }, [_ctx.status === \"loading\" ? (openBlock(), createElementBlock(\"div\", _hoisted_1, [createVNode(_component_t_loading, mergeProps({\n    text: _ctx.loadingText,\n    class: \"\".concat(_ctx.name, \"__loading-icon\")\n  }, _ctx.loadingIconProps), null, 16, [\"text\", \"class\"])])) : (openBlock(), createElementBlock(\"div\", _hoisted_2, toDisplayString(_ctx.loadingText), 1))], 6)], 6), renderSlot(_ctx.$slots, \"default\")], 38)], 2);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":"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","names":["prefix","config","name","ANIMATION_DURATION","statusName","defineComponent","components","TLoading","props","emits","setup","context","emitEvent","emit","computed","transitionDuration","transform","distance","height","loadingBarHeight","maxBarHeight","loadingIconProps","loadingProps","ref","toRefs","value","modelValue","useVModel","defaultValue","onChange","_useVModel2","statusValue","setStatusValue","isLoading","watch","newVal","setTimeout","loadingTexts","length","index","indexOf","touch","useTouch","useElementSize","loadingBar","maxBar","onTouchStart","e","isReachTop","start","onTouchMove","deltaY","nextDistance","preventDefault","move","timer","onTouchEnd","refreshTimeout","onUnmounted","clearTimeout","status","trackStyle","loadingText","maxBarStyles","loadingBarStyles","class","_createElementVNode","_ctx","style","onTouchstart","onTouchmove","onTouchend","onTouchcancel","_createVNode","_component_t_loading","_mergeProps","text","_renderSlot"],"sources":["../../src/pull-down-refresh/pull-down-refresh.vue","../../src/pull-down-refresh/pull-down-refresh.vue?vue&type=template&id=6f78f360&lang.js"],"sourcesContent":["<template>\n  <div :class=\"name\">\n    <div\n      :class=\"`${name}__track`\"\n      :style=\"trackStyle\"\n      @touchstart.stop=\"onTouchStart\"\n      @touchmove.stop=\"onTouchMove\"\n      @touchend.stop=\"onTouchEnd\"\n      @touchcancel.stop=\"onTouchEnd\"\n    >\n      <div ref=\"maxBar\" :class=\"`${name}__max`\" :style=\"maxBarStyles\">\n        <div ref=\"loadingBar\" :class=\"`${name}__loading`\" :style=\"loadingBarStyles\">\n          <div v-if=\"status === 'loading'\">\n            <t-loading :text=\"loadingText\" :class=\"`${name}__loading-icon`\" v-bind=\"loadingIconProps\" />\n          </div>\n          <div v-else>{{ loadingText }}</div>\n        </div>\n      </div>\n      <slot />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, onUnmounted, ref, toRefs, computed, SetupContext, watch } from 'vue';\nimport { useElementSize } from '@vueuse/core';\nimport PullDownRefreshProps from './props';\nimport { useEmitEvent, useVModel } from '../shared';\nimport config from '../config';\nimport TLoading from '../loading';\nimport { useTouch, isReachTop, easeDistance } from './useTouch';\n\nconst { prefix } = config;\nconst name = `${prefix}-pull-down-refresh`;\nconst ANIMATION_DURATION = 300;\nconst statusName = ['pulling', 'loosing', 'loading', 'success', 'initial'];\n\nexport default defineComponent({\n  name,\n  components: { TLoading },\n  props: PullDownRefreshProps,\n  emits: ['refresh', 'timeout', 'update:value', 'update:modelValue'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n\n    // 动态生成style\n    const trackStyle = computed(() => ({\n      transitionDuration: `${ANIMATION_DURATION}ms`,\n      transform: `translate3d(0, ${distance.value}px, 0)`,\n    }));\n    const loadingBarStyles = computed(() => ({\n      height: typeof props.loadingBarHeight === 'number' ? `${props.loadingBarHeight}px` : props.loadingBarHeight,\n    }));\n    const maxBarStyles = computed(() => ({\n      height: typeof props.maxBarHeight === 'number' ? `${props.maxBarHeight}px` : props.maxBarHeight,\n    }));\n\n    // 动态生成loadingIcon的props\n    const loadingIconProps = computed(() => ({ ...props.loadingProps }));\n\n    // 是否处于加载状态\n    const isLoading = ref(false);\n\n    // 滑动距离\n    const distance = ref(0);\n    const { value, modelValue } = toRefs(props);\n    const [statusValue, setStatusValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n\n    // 组件当前状态\n    const status = computed(() => {\n      if (!statusValue.value && isLoading.value) {\n        return 'success';\n      }\n      if (!statusValue.value || distance.value === 0) {\n        return 'initial';\n      }\n      if (distance.value < loadingBarHeight.value) {\n        return 'pulling';\n      }\n      if (isLoading.value) {\n        return 'loading';\n      }\n      return 'loosing';\n    });\n\n    watch(status, (newVal) => {\n      // 下拉刷新结束后，收起下拉页面\n      if (newVal === 'success' || newVal === 'initial') {\n        // 延时300ms收起下拉框，加强刷新成功提示\n        setTimeout(() => {\n          distance.value = 0;\n          isLoading.value = false;\n        }, 300);\n      }\n    });\n\n    // 根据状态修改loadingText值\n    const loadingTexts = ref(\n      props.loadingTexts?.length ? props.loadingTexts : ['下拉刷新', '松手刷新', '正在刷新', '刷新完成'],\n    );\n    const loadingText = computed(() => {\n      const index = statusName.indexOf(status.value);\n      return index >= 0 ? loadingTexts.value[index] : '';\n    });\n\n    const touch = useTouch();\n    const loadingBar = ref(null);\n    const maxBar = ref(null);\n    const { height: loadingBarHeight } = useElementSize(loadingBar);\n    const { height: maxBarHeight } = useElementSize(maxBar);\n\n    const onTouchStart = (e: TouchEvent) => {\n      if (!isReachTop(e) || isLoading.value) return;\n\n      setStatusValue(true);\n      distance.value = 0;\n      touch.start(e);\n    };\n\n    const onTouchMove = (e: TouchEvent) => {\n      if (!isReachTop(e) || isLoading.value) return;\n\n      const { deltaY } = touch;\n      const nextDistance = easeDistance(deltaY.value, loadingBarHeight.value);\n      // 下拉时，防止下拉整个页面\n      if (deltaY.value > 0) {\n        e.preventDefault();\n      }\n      if (nextDistance >= 0 && nextDistance < maxBarHeight.value) {\n        distance.value = nextDistance;\n      }\n      touch.move(e);\n    };\n\n    let timer: any = null;\n    const onTouchEnd = (e: TouchEvent) => {\n      if (!isReachTop(e) || isLoading.value) return;\n\n      if (status.value === 'loosing') {\n        distance.value = loadingBarHeight.value;\n        isLoading.value = true;\n        emitEvent('refresh');\n        timer = setTimeout(() => {\n          if (isLoading.value) {\n            emitEvent('timeout');\n            setStatusValue(false);\n          }\n        }, props.refreshTimeout);\n      } else {\n        setStatusValue(false);\n      }\n    };\n\n    onUnmounted(() => {\n      clearTimeout(timer);\n    });\n\n    return {\n      name,\n      status,\n      trackStyle,\n      loadingText,\n      maxBarStyles,\n      loadingBarStyles,\n      loadingIconProps,\n      loadingBar,\n      maxBar,\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"name\">\n    <div\n      :class=\"`${name}__track`\"\n      :style=\"trackStyle\"\n      @touchstart.stop=\"onTouchStart\"\n      @touchmove.stop=\"onTouchMove\"\n      @touchend.stop=\"onTouchEnd\"\n      @touchcancel.stop=\"onTouchEnd\"\n    >\n      <div ref=\"maxBar\" :class=\"`${name}__max`\" :style=\"maxBarStyles\">\n        <div ref=\"loadingBar\" :class=\"`${name}__loading`\" :style=\"loadingBarStyles\">\n          <div v-if=\"status === 'loading'\">\n            <t-loading :text=\"loadingText\" :class=\"`${name}__loading-icon`\" v-bind=\"loadingIconProps\" />\n          </div>\n          <div v-else>{{ loadingText }}</div>\n        </div>\n      </div>\n      <slot />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, onUnmounted, ref, toRefs, computed, SetupContext, watch } from 'vue';\nimport { useElementSize } from '@vueuse/core';\nimport PullDownRefreshProps from './props';\nimport { useEmitEvent, useVModel } from '../shared';\nimport config from '../config';\nimport TLoading from '../loading';\nimport { useTouch, isReachTop, easeDistance } from './useTouch';\n\nconst { prefix } = config;\nconst name = `${prefix}-pull-down-refresh`;\nconst ANIMATION_DURATION = 300;\nconst statusName = ['pulling', 'loosing', 'loading', 'success', 'initial'];\n\nexport default defineComponent({\n  name,\n  components: { TLoading },\n  props: PullDownRefreshProps,\n  emits: ['refresh', 'timeout', 'update:value', 'update:modelValue'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n\n    // 动态生成style\n    const trackStyle = computed(() => ({\n      transitionDuration: `${ANIMATION_DURATION}ms`,\n      transform: `translate3d(0, ${distance.value}px, 0)`,\n    }));\n    const loadingBarStyles = computed(() => ({\n      height: typeof props.loadingBarHeight === 'number' ? `${props.loadingBarHeight}px` : props.loadingBarHeight,\n    }));\n    const maxBarStyles = computed(() => ({\n      height: typeof props.maxBarHeight === 'number' ? `${props.maxBarHeight}px` : props.maxBarHeight,\n    }));\n\n    // 动态生成loadingIcon的props\n    const loadingIconProps = computed(() => ({ ...props.loadingProps }));\n\n    // 是否处于加载状态\n    const isLoading = ref(false);\n\n    // 滑动距离\n    const distance = ref(0);\n    const { value, modelValue } = toRefs(props);\n    const [statusValue, setStatusValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n\n    // 组件当前状态\n    const status = computed(() => {\n      if (!statusValue.value && isLoading.value) {\n        return 'success';\n      }\n      if (!statusValue.value || distance.value === 0) {\n        return 'initial';\n      }\n      if (distance.value < loadingBarHeight.value) {\n        return 'pulling';\n      }\n      if (isLoading.value) {\n        return 'loading';\n      }\n      return 'loosing';\n    });\n\n    watch(status, (newVal) => {\n      // 下拉刷新结束后，收起下拉页面\n      if (newVal === 'success' || newVal === 'initial') {\n        // 延时300ms收起下拉框，加强刷新成功提示\n        setTimeout(() => {\n          distance.value = 0;\n          isLoading.value = false;\n        }, 300);\n      }\n    });\n\n    // 根据状态修改loadingText值\n    const loadingTexts = ref(\n      props.loadingTexts?.length ? props.loadingTexts : ['下拉刷新', '松手刷新', '正在刷新', '刷新完成'],\n    );\n    const loadingText = computed(() => {\n      const index = statusName.indexOf(status.value);\n      return index >= 0 ? loadingTexts.value[index] : '';\n    });\n\n    const touch = useTouch();\n    const loadingBar = ref(null);\n    const maxBar = ref(null);\n    const { height: loadingBarHeight } = useElementSize(loadingBar);\n    const { height: maxBarHeight } = useElementSize(maxBar);\n\n    const onTouchStart = (e: TouchEvent) => {\n      if (!isReachTop(e) || isLoading.value) return;\n\n      setStatusValue(true);\n      distance.value = 0;\n      touch.start(e);\n    };\n\n    const onTouchMove = (e: TouchEvent) => {\n      if (!isReachTop(e) || isLoading.value) return;\n\n      const { deltaY } = touch;\n      const nextDistance = easeDistance(deltaY.value, loadingBarHeight.value);\n      // 下拉时，防止下拉整个页面\n      if (deltaY.value > 0) {\n        e.preventDefault();\n      }\n      if (nextDistance >= 0 && nextDistance < maxBarHeight.value) {\n        distance.value = nextDistance;\n      }\n      touch.move(e);\n    };\n\n    let timer: any = null;\n    const onTouchEnd = (e: TouchEvent) => {\n      if (!isReachTop(e) || isLoading.value) return;\n\n      if (status.value === 'loosing') {\n        distance.value = loadingBarHeight.value;\n        isLoading.value = true;\n        emitEvent('refresh');\n        timer = setTimeout(() => {\n          if (isLoading.value) {\n            emitEvent('timeout');\n            setStatusValue(false);\n          }\n        }, props.refreshTimeout);\n      } else {\n        setStatusValue(false);\n      }\n    };\n\n    onUnmounted(() => {\n      clearTimeout(timer);\n    });\n\n    return {\n      name,\n      status,\n      trackStyle,\n      loadingText,\n      maxBarStyles,\n      loadingBarStyles,\n      loadingIconProps,\n      loadingBar,\n      maxBar,\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}