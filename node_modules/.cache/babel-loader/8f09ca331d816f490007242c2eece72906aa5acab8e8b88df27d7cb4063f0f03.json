{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { defineComponent, inject, ref, computed, watch, getCurrentInstance, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, createBlock, withCtx, createVNode, createCommentVNode, Transition, Fragment, renderList, toDisplayString } from 'vue';\nimport _Badge from '../badge/index.js';\nimport config from '../config.js';\nimport { initName } from './useTabBar.js';\nimport TabBarItemProps from './tab-bar-item-props.js';\nimport '../shared/index.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { renderContent, renderTNode } from '../shared/render.js';\nimport '../badge/badge.js';\nimport '@babel/runtime/helpers/slicedToArray';\nimport '../badge/props.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useEmitEvent/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/typeof';\nimport './style/css.js';\nimport '../badge/type.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar componentName = \"\".concat(prefix, \"-tab-bar-item\");\nvar script = defineComponent({\n  name: componentName,\n  components: {\n    TNode: TNodeComponent,\n    TBadge: _Badge\n  },\n  props: TabBarItemProps,\n  setup: function setup(props) {\n    var _inject = inject(\"tab-bar\"),\n      defaultIndex = _inject.defaultIndex,\n      activeValue = _inject.activeValue,\n      updateChild = _inject.updateChild;\n    var currentName = initName(defaultIndex);\n    var hasSubTabBar = !!props.subTabBar;\n    var isSpread = ref(false);\n    var isChecked = computed(function () {\n      if (hasSubTabBar && Array.isArray(activeValue.value)) {\n        return activeValue.value.includes(currentName);\n      }\n      return currentName === activeValue.value;\n    });\n    watch(isChecked, function (newValue) {\n      if (!newValue) {\n        isSpread.value = false;\n      }\n    });\n    var isToggleCurrent = computed(function () {\n      return Array.isArray(activeValue.value) && activeValue.value[0] === currentName;\n    });\n    var toggle = function toggle() {\n      if (hasSubTabBar) {\n        isSpread.value = !isSpread.value;\n        if (!isToggleCurrent.value) {\n          updateChild([currentName]);\n          return;\n        }\n      }\n      updateChild(currentName);\n    };\n    var selectChild = function selectChild(childName) {\n      if (!(Array.isArray(activeValue.value) && activeValue.value[1] === childName)) {\n        updateChild([currentName, childName]);\n      }\n      isSpread.value = false;\n    };\n    var internalInstance = getCurrentInstance();\n    var itemContent = computed(function () {\n      return renderContent(internalInstance, \"default\", \"content\");\n    });\n    var iconContent = computed(function () {\n      return renderTNode(internalInstance, \"icon\");\n    });\n    return _objectSpread(_objectSpread({}, toRefs(props)), {}, {\n      prefix: prefix,\n      componentName: componentName,\n      isChecked: isChecked,\n      toggle: toggle,\n      isSpread: isSpread,\n      selectChild: selectChild,\n      itemContent: itemContent,\n      iconContent: iconContent\n    });\n  }\n});\nvar _hoisted_1 = [\"aria-selected\", \"aria-haspopup\"];\nvar _hoisted_2 = [\"aria-label\", \"onClick\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _normalizeClass2;\n  var _component_t_node = resolveComponent(\"t-node\");\n  var _component_t_badge = resolveComponent(\"t-badge\");\n  return openBlock(), createElementBlock(\"div\", {\n    role: \"tab\",\n    \"aria-label\": \"TabBar\",\n    \"aria-selected\": _ctx.isChecked,\n    \"aria-haspopup\": _ctx.subTabBar && _ctx.subTabBar.length > 0,\n    class: normalizeClass([_ctx.componentName, _ctx.iconContent && \"\".concat(_ctx.prefix, \"-no-border\")])\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass((_normalizeClass2 = {}, _defineProperty(_normalizeClass2, \"\".concat(_ctx.componentName, \"__content\"), true), _defineProperty(_normalizeClass2, \"\".concat(_ctx.prefix, \"-is-checked\"), _ctx.isChecked), _defineProperty(_normalizeClass2, \"\".concat(_ctx.componentName, \"--onlytext\"), !_ctx.iconContent), _normalizeClass2)),\n    onClick: _cache[0] || (_cache[0] = function () {\n      return _ctx.toggle && _ctx.toggle.apply(_ctx, arguments);\n    })\n  }, [_ctx.iconContent ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.componentName, \"__icon\"))\n  }, [_ctx.badgeProps && (_ctx.badgeProps.dot || _ctx.badgeProps.count) ? (openBlock(), createBlock(_component_t_badge, {\n    key: 0,\n    count: _ctx.badgeProps.count,\n    \"max-count\": _ctx.badgeProps.maxCount || 99,\n    dot: _ctx.badgeProps.dot,\n    content: _ctx.badgeProps.content,\n    size: _ctx.badgeProps.size,\n    offset: _ctx.badgeProps.offset || [0, 5]\n  }, {\n    default: withCtx(function () {\n      return [createVNode(_component_t_node, {\n        content: _ctx.iconContent\n      }, null, 8, [\"content\"])];\n    }),\n    _: 1\n  }, 8, [\"count\", \"max-count\", \"dot\", \"content\", \"size\", \"offset\"])) : (openBlock(), createBlock(_component_t_node, {\n    key: 1,\n    content: _ctx.iconContent\n  }, null, 8, [\"content\"]))], 2)) : createCommentVNode(\"\", true), _ctx.itemContent ? (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(\"\".concat(_ctx.componentName, \"__text\"))\n  }, [_ctx.subTabBar && _ctx.subTabBar.length > 0 ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.componentName, \"__icon-menu\"))\n  }, null, 2)) : createCommentVNode(\"\", true), createVNode(_component_t_node, {\n    content: _ctx.itemContent\n  }, null, 8, [\"content\"])], 2)) : createCommentVNode(\"\", true)], 2), createVNode(Transition, {\n    name: \"spread\"\n  }, {\n    default: withCtx(function () {\n      return [_ctx.subTabBar && _ctx.subTabBar.length > 0 && _ctx.isSpread ? (openBlock(), createElementBlock(\"ul\", {\n        key: 0,\n        role: \"menu\",\n        class: normalizeClass(\"\".concat(_ctx.componentName, \"__spread\"))\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.subTabBar, function (child, index) {\n        return openBlock(), createElementBlock(\"li\", {\n          key: child.value || index,\n          role: \"menuitem\",\n          \"aria-label\": child.label,\n          class: normalizeClass(\"\".concat(_ctx.componentName, \"__spread-item\")),\n          onClick: function onClick($event) {\n            return _ctx.selectChild(child.value || index);\n          }\n        }, toDisplayString(child.label), 11, _hoisted_2);\n      }), 128))], 2)) : createCommentVNode(\"\", true)];\n    }),\n    _: 1\n  })], 10, _hoisted_1);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":"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","names":["prefix","config","componentName","defineComponent","name","components","TNode","TBadge","props","setup","inject","defaultIndex","activeValue","updateChild","initName","ref","computed","hasSubTabBar","isArray","value","currentName","watch","newValue","isSpread","Array","toggle","isToggleCurrent","selectChild","childName","internalInstance","getCurrentInstance","itemContent","renderContent","iconContent","renderTNode","toRefs","isChecked","role","_ctx","length","class","_normalizeClass","_createElementVNode","onClick","_createElementBlock","badgeProps","count","_component_t_badge","maxCount","dot","content","size","offset","_createVNode","_component_t_node","_createBlock","subTabBar","_openBlock","index","key","child","$event","_toDisplayString","label"],"sources":["../../src/tab-bar/tab-bar-item.vue","../../src/tab-bar/tab-bar-item.vue?vue&type=template&id=79ef2260&lang.js"],"sourcesContent":["<template>\n  <div\n    role=\"tab\"\n    aria-label=\"TabBar\"\n    :aria-selected=\"isChecked\"\n    :aria-haspopup=\"subTabBar && subTabBar.length > 0\"\n    :class=\"[componentName, iconContent && `${prefix}-no-border`]\"\n  >\n    <div\n      :class=\"{\n        [`${componentName}__content`]: true,\n        [`${prefix}-is-checked`]: isChecked,\n        [`${componentName}--onlytext`]: !iconContent,\n      }\"\n      @click=\"toggle\"\n    >\n      <div v-if=\"iconContent\" :class=\"`${componentName}__icon`\">\n        <t-badge\n          v-if=\"badgeProps && (badgeProps.dot || badgeProps.count)\"\n          :count=\"badgeProps.count\"\n          :max-count=\"badgeProps.maxCount || 99\"\n          :dot=\"badgeProps.dot\"\n          :content=\"badgeProps.content\"\n          :size=\"badgeProps.size\"\n          :offset=\"badgeProps.offset || [0, 5]\"\n        >\n          <t-node :content=\"iconContent\"></t-node>\n        </t-badge>\n        <t-node v-else :content=\"iconContent\"></t-node>\n      </div>\n      <div v-if=\"itemContent\" :class=\"`${componentName}__text`\">\n        <div v-if=\"subTabBar && subTabBar.length > 0\" :class=\"`${componentName}__icon-menu`\"></div>\n        <t-node :content=\"itemContent\"></t-node>\n      </div>\n    </div>\n    <transition name=\"spread\">\n      <ul v-if=\"subTabBar && subTabBar.length > 0 && isSpread\" role=\"menu\" :class=\"`${componentName}__spread`\">\n        <li\n          v-for=\"(child, index) in subTabBar\"\n          :key=\"child.value || index\"\n          role=\"menuitem\"\n          :aria-label=\"child.label\"\n          :class=\"`${componentName}__spread-item`\"\n          @click=\"selectChild(child.value || index)\"\n        >\n          {{ child.label }}\n        </li>\n      </ul>\n    </transition>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject, computed, ref, watch, Ref, getCurrentInstance, toRefs } from 'vue';\nimport TBadge from '../badge';\nimport config from '../config';\nimport { initName } from './useTabBar';\nimport TabBarItemProps from './tab-bar-item-props';\nimport { renderContent, renderTNode, TNode } from '../shared';\n\nconst { prefix } = config;\nconst componentName = `${prefix}-tab-bar-item`;\n\nexport default defineComponent({\n  name: componentName,\n  components: { TNode, TBadge },\n  props: TabBarItemProps,\n  setup(props) {\n    const { defaultIndex, activeValue, updateChild } = inject<any>('tab-bar');\n    const currentName = initName(defaultIndex);\n    const hasSubTabBar = !!props.subTabBar;\n    const isSpread: Ref<boolean> = ref(false);\n\n    const isChecked = computed(() => {\n      if (hasSubTabBar && Array.isArray(activeValue.value)) {\n        return activeValue.value.includes(currentName);\n      }\n      return currentName === activeValue.value;\n    });\n\n    watch(isChecked, (newValue) => {\n      if (!newValue) {\n        isSpread.value = false;\n      }\n    });\n\n    const isToggleCurrent = computed(() => Array.isArray(activeValue.value) && activeValue.value[0] === currentName);\n\n    const toggle = () => {\n      if (hasSubTabBar) {\n        isSpread.value = !isSpread.value;\n        if (!isToggleCurrent.value) {\n          updateChild([currentName]);\n          return;\n        }\n      }\n      updateChild(currentName);\n    };\n\n    const selectChild = (childName: number | string) => {\n      if (!(Array.isArray(activeValue.value) && activeValue.value[1] === childName)) {\n        updateChild([currentName, childName]);\n      }\n      isSpread.value = false;\n    };\n    const internalInstance = getCurrentInstance();\n    const itemContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const iconContent = computed(() => renderTNode(internalInstance, 'icon'));\n\n    return {\n      ...toRefs(props),\n      prefix,\n      componentName,\n      isChecked,\n      toggle,\n      isSpread,\n      selectChild,\n      itemContent,\n      iconContent,\n    };\n  },\n});\n</script>\n","<template>\n  <div\n    role=\"tab\"\n    aria-label=\"TabBar\"\n    :aria-selected=\"isChecked\"\n    :aria-haspopup=\"subTabBar && subTabBar.length > 0\"\n    :class=\"[componentName, iconContent && `${prefix}-no-border`]\"\n  >\n    <div\n      :class=\"{\n        [`${componentName}__content`]: true,\n        [`${prefix}-is-checked`]: isChecked,\n        [`${componentName}--onlytext`]: !iconContent,\n      }\"\n      @click=\"toggle\"\n    >\n      <div v-if=\"iconContent\" :class=\"`${componentName}__icon`\">\n        <t-badge\n          v-if=\"badgeProps && (badgeProps.dot || badgeProps.count)\"\n          :count=\"badgeProps.count\"\n          :max-count=\"badgeProps.maxCount || 99\"\n          :dot=\"badgeProps.dot\"\n          :content=\"badgeProps.content\"\n          :size=\"badgeProps.size\"\n          :offset=\"badgeProps.offset || [0, 5]\"\n        >\n          <t-node :content=\"iconContent\"></t-node>\n        </t-badge>\n        <t-node v-else :content=\"iconContent\"></t-node>\n      </div>\n      <div v-if=\"itemContent\" :class=\"`${componentName}__text`\">\n        <div v-if=\"subTabBar && subTabBar.length > 0\" :class=\"`${componentName}__icon-menu`\"></div>\n        <t-node :content=\"itemContent\"></t-node>\n      </div>\n    </div>\n    <transition name=\"spread\">\n      <ul v-if=\"subTabBar && subTabBar.length > 0 && isSpread\" role=\"menu\" :class=\"`${componentName}__spread`\">\n        <li\n          v-for=\"(child, index) in subTabBar\"\n          :key=\"child.value || index\"\n          role=\"menuitem\"\n          :aria-label=\"child.label\"\n          :class=\"`${componentName}__spread-item`\"\n          @click=\"selectChild(child.value || index)\"\n        >\n          {{ child.label }}\n        </li>\n      </ul>\n    </transition>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject, computed, ref, watch, Ref, getCurrentInstance, toRefs } from 'vue';\nimport TBadge from '../badge';\nimport config from '../config';\nimport { initName } from './useTabBar';\nimport TabBarItemProps from './tab-bar-item-props';\nimport { renderContent, renderTNode, TNode } from '../shared';\n\nconst { prefix } = config;\nconst componentName = `${prefix}-tab-bar-item`;\n\nexport default defineComponent({\n  name: componentName,\n  components: { TNode, TBadge },\n  props: TabBarItemProps,\n  setup(props) {\n    const { defaultIndex, activeValue, updateChild } = inject<any>('tab-bar');\n    const currentName = initName(defaultIndex);\n    const hasSubTabBar = !!props.subTabBar;\n    const isSpread: Ref<boolean> = ref(false);\n\n    const isChecked = computed(() => {\n      if (hasSubTabBar && Array.isArray(activeValue.value)) {\n        return activeValue.value.includes(currentName);\n      }\n      return currentName === activeValue.value;\n    });\n\n    watch(isChecked, (newValue) => {\n      if (!newValue) {\n        isSpread.value = false;\n      }\n    });\n\n    const isToggleCurrent = computed(() => Array.isArray(activeValue.value) && activeValue.value[0] === currentName);\n\n    const toggle = () => {\n      if (hasSubTabBar) {\n        isSpread.value = !isSpread.value;\n        if (!isToggleCurrent.value) {\n          updateChild([currentName]);\n          return;\n        }\n      }\n      updateChild(currentName);\n    };\n\n    const selectChild = (childName: number | string) => {\n      if (!(Array.isArray(activeValue.value) && activeValue.value[1] === childName)) {\n        updateChild([currentName, childName]);\n      }\n      isSpread.value = false;\n    };\n    const internalInstance = getCurrentInstance();\n    const itemContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const iconContent = computed(() => renderTNode(internalInstance, 'icon'));\n\n    return {\n      ...toRefs(props),\n      prefix,\n      componentName,\n      isChecked,\n      toggle,\n      isSpread,\n      selectChild,\n      itemContent,\n      iconContent,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}