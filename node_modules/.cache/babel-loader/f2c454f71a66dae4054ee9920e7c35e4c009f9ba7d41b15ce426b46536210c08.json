{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { defineComponent, getCurrentInstance, inject, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, createBlock, withCtx, createCommentVNode, createVNode } from 'vue';\nimport _Badge from '../badge/index.js';\nimport config from '../config.js';\nimport gridItemProps from './grid-item-props.js';\nimport '../shared/index.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { renderTNode } from '../shared/render.js';\nimport '../badge/badge.js';\nimport '@babel/runtime/helpers/slicedToArray';\nimport '../badge/props.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useEmitEvent/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/typeof';\nimport './style/css.js';\nimport '../badge/type.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-grid-item\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    TNode: TNodeComponent,\n    TBadge: _Badge\n  },\n  props: gridItemProps,\n  setup: function setup(props) {\n    var internalInstance = getCurrentInstance();\n    var isHorz = props.layout === \"horizontal\";\n    var _inject = inject(\"grid\"),\n      column = _inject.column,\n      gutter = _inject.gutter,\n      border = _inject.border,\n      align = _inject.align;\n    var imageContent = computed(function () {\n      return renderTNode(internalInstance, \"image\");\n    });\n    var textContent = computed(function () {\n      return renderTNode(internalInstance, \"text\");\n    });\n    var descContent = computed(function () {\n      return renderTNode(internalInstance, \"description\");\n    });\n    var rootClass = computed(function () {\n      return [\"\".concat(name), _defineProperty({}, \"\".concat(name, \"--bordered\"), border.value)];\n    });\n    var rootStyle = computed(function () {\n      var percent = \"\".concat(100 / +column.value, \"%\");\n      var borderStyle = {};\n      if (border.value) {\n        if (typeof border.value !== \"boolean\") {\n          var _border$value = border.value,\n            color = _border$value.color,\n            width = _border$value.width,\n            style2 = _border$value.style;\n          return {\n            borderColor: color,\n            borderWidth: width,\n            borderStyle: style2\n          };\n        }\n      }\n      var style = _objectSpread({\n        flexBasis: percent,\n        flexDirection: isHorz ? \"row\" : \"column\",\n        paddingLeft: gutter.value ? \"\".concat(gutter.value, \"px\") : 0,\n        paddingRight: gutter.value ? \"\".concat(gutter.value, \"px\") : 0,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        textAlign: [\"center\", \"left\"].includes(align.value) ? align.value : \"center\"\n      }, borderStyle);\n      return style;\n    });\n    var imgStyle = computed(function () {\n      var imgSize = 32;\n      if (column.value >= 5) {\n        imgSize = 28;\n      } else if (column.value <= 3) {\n        imgSize = 48;\n      }\n      return {\n        width: \"\".concat(imgSize, \"px\"),\n        height: \"\".concat(imgSize, \"px\")\n      };\n    });\n    var textStyle = computed(function () {\n      return {\n        paddingLeft: isHorz ? \"12px\" : 0\n      };\n    });\n    var titleStyle = computed(function () {\n      return {\n        paddingTop: isHorz ? 0 : \"8px\",\n        marginBottom: \"4px\"\n      };\n    });\n    return {\n      name: name,\n      rootStyle: rootStyle,\n      rootClass: rootClass,\n      imgStyle: imgStyle,\n      textStyle: textStyle,\n      titleStyle: titleStyle,\n      imageContent: imageContent,\n      textContent: textContent,\n      descContent: descContent\n    };\n  }\n});\nvar _hoisted_1 = [\"src\"];\nvar _hoisted_2 = [\"src\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_node = resolveComponent(\"t-node\");\n  var _component_t_badge = resolveComponent(\"t-badge\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.rootClass),\n    style: normalizeStyle(_ctx.rootStyle)\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__image-box\"))\n  }, [_ctx.badgeProps ? (openBlock(), createBlock(_component_t_badge, {\n    key: 0,\n    count: _ctx.badgeProps.count,\n    \"max-count\": _ctx.badgeProps.maxCount,\n    dot: _ctx.badgeProps.dot,\n    content: _ctx.badgeProps.content,\n    size: _ctx.badgeProps.size,\n    offset: _ctx.badgeProps.offset\n  }, {\n    default: withCtx(function () {\n      return [_ctx.image && typeof _ctx.image === \"string\" ? (openBlock(), createElementBlock(\"img\", {\n        key: 0,\n        src: _ctx.image,\n        class: normalizeClass(\"\".concat(_ctx.name, \"__image\")),\n        style: normalizeStyle(_ctx.imgStyle)\n      }, null, 14, _hoisted_1)) : (openBlock(), createBlock(_component_t_node, {\n        key: 1,\n        content: _ctx.imageContent\n      }, null, 8, [\"content\"]))];\n    }),\n    _: 1\n  }, 8, [\"count\", \"max-count\", \"dot\", \"content\", \"size\", \"offset\"])) : createCommentVNode(\"\", true), _ctx.image && typeof _ctx.image === \"string\" ? (openBlock(), createElementBlock(\"img\", {\n    key: 1,\n    src: _ctx.image,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__image\")),\n    style: normalizeStyle(_ctx.imgStyle)\n  }, null, 14, _hoisted_2)) : (openBlock(), createBlock(_component_t_node, {\n    key: 2,\n    content: _ctx.imageContent\n  }, null, 8, [\"content\"]))], 2), createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__text\")),\n    style: normalizeStyle(_ctx.textStyle)\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__title\")),\n    style: normalizeStyle(_ctx.titleStyle)\n  }, [createVNode(_component_t_node, {\n    content: _ctx.textContent\n  }, null, 8, [\"content\"])], 6), createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__description\"))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.descContent\n  }, null, 8, [\"content\"])], 2)], 6)], 6);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":"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","names":["prefix","config","name","defineComponent","components","TNode","TBadge","props","setup","internalInstance","getCurrentInstance","layout","inject","column","gutter","border","align","imageContent","computed","renderTNode","textContent","descContent","rootClass","percent","borderStyle","value","color","width","style","borderColor","borderWidth","flexBasis","flexDirection","isHorz","paddingLeft","paddingRight","alignItems","justifyContent","textAlign","includes","imgSize","height","paddingTop","marginBottom","rootStyle","imgStyle","textStyle","titleStyle","class","_createElementVNode","_ctx","_createBlock","_component_t_badge","count","badgeProps","dot","content","size","offset","image","src","_component_t_node","_createVNode"],"sources":["../../src/grid/grid-item.vue","../../src/grid/grid-item.vue?vue&type=template&id=42b04ba6&lang.js"],"sourcesContent":["<template>\n  <div :class=\"rootClass\" :style=\"rootStyle\">\n    <div :class=\"`${name}__image-box`\">\n      <t-badge\n        v-if=\"badgeProps\"\n        :count=\"badgeProps.count\"\n        :max-count=\"badgeProps.maxCount\"\n        :dot=\"badgeProps.dot\"\n        :content=\"badgeProps.content\"\n        :size=\"badgeProps.size\"\n        :offset=\"badgeProps.offset\"\n      >\n        <img v-if=\"image && typeof image === 'string'\" :src=\"image\" :class=\"`${name}__image`\" :style=\"imgStyle\" />\n        <t-node v-else :content=\"imageContent\"></t-node>\n      </t-badge>\n      <img v-if=\"image && typeof image === 'string'\" :src=\"image\" :class=\"`${name}__image`\" :style=\"imgStyle\" />\n      <t-node v-else :content=\"imageContent\"></t-node>\n    </div>\n    <div :class=\"`${name}__text`\" :style=\"textStyle\">\n      <div :class=\"`${name}__title`\" :style=\"titleStyle\">\n        <t-node :content=\"textContent\"></t-node>\n      </div>\n      <div :class=\"`${name}__description`\">\n        <t-node :content=\"descContent\"></t-node>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, getCurrentInstance, computed, inject } from 'vue';\nimport TBadge from '../badge';\nimport config from '../config';\nimport gridItemProps from './grid-item-props';\nimport { renderTNode, TNode } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-grid-item`;\n\nexport default defineComponent({\n  name,\n  components: { TNode, TBadge },\n  props: gridItemProps,\n  setup(props) {\n    const internalInstance = getCurrentInstance();\n    const isHorz = props.layout === 'horizontal';\n    const { column, gutter, border, align } = inject<any>('grid');\n\n    const imageContent = computed(() => renderTNode(internalInstance, 'image'));\n    const textContent = computed(() => renderTNode(internalInstance, 'text'));\n    const descContent = computed(() => renderTNode(internalInstance, 'description'));\n\n    const rootClass = computed(() => [`${name}`, { [`${name}--bordered`]: border.value }]);\n\n    const rootStyle = computed(() => {\n      const percent = `${100 / +column.value}%`;\n      const borderStyle = {};\n      if (border.value) {\n        if (typeof border.value !== 'boolean') {\n          const { color, width, style } = border.value;\n          return {\n            borderColor: color,\n            borderWidth: width,\n            borderStyle: style,\n          };\n        }\n      }\n\n      const style = {\n        flexBasis: percent,\n        flexDirection: isHorz ? ('row' as const) : ('column' as const),\n        paddingLeft: gutter.value ? `${gutter.value}px` : 0,\n        paddingRight: gutter.value ? `${gutter.value}px` : 0,\n        alignItems: 'center',\n        justifyContent: 'center',\n        textAlign: ['center', 'left'].includes(align.value) ? align.value : 'center',\n        ...borderStyle,\n      };\n      return style;\n    });\n\n    const imgStyle = computed(() => {\n      let imgSize = 32;\n      if (column.value >= 5) {\n        imgSize = 28;\n      } else if (column.value <= 3) {\n        imgSize = 48;\n      }\n      return {\n        width: `${imgSize}px`,\n        height: `${imgSize}px`,\n      };\n    });\n\n    const textStyle = computed(() => {\n      return {\n        paddingLeft: isHorz ? '12px' : 0,\n      };\n    });\n\n    const titleStyle = computed(() => {\n      return {\n        paddingTop: isHorz ? 0 : '8px',\n        marginBottom: '4px',\n      };\n    });\n\n    return {\n      name,\n      rootStyle,\n      rootClass,\n      imgStyle,\n      textStyle,\n      titleStyle,\n      imageContent,\n      textContent,\n      descContent,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"rootClass\" :style=\"rootStyle\">\n    <div :class=\"`${name}__image-box`\">\n      <t-badge\n        v-if=\"badgeProps\"\n        :count=\"badgeProps.count\"\n        :max-count=\"badgeProps.maxCount\"\n        :dot=\"badgeProps.dot\"\n        :content=\"badgeProps.content\"\n        :size=\"badgeProps.size\"\n        :offset=\"badgeProps.offset\"\n      >\n        <img v-if=\"image && typeof image === 'string'\" :src=\"image\" :class=\"`${name}__image`\" :style=\"imgStyle\" />\n        <t-node v-else :content=\"imageContent\"></t-node>\n      </t-badge>\n      <img v-if=\"image && typeof image === 'string'\" :src=\"image\" :class=\"`${name}__image`\" :style=\"imgStyle\" />\n      <t-node v-else :content=\"imageContent\"></t-node>\n    </div>\n    <div :class=\"`${name}__text`\" :style=\"textStyle\">\n      <div :class=\"`${name}__title`\" :style=\"titleStyle\">\n        <t-node :content=\"textContent\"></t-node>\n      </div>\n      <div :class=\"`${name}__description`\">\n        <t-node :content=\"descContent\"></t-node>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, getCurrentInstance, computed, inject } from 'vue';\nimport TBadge from '../badge';\nimport config from '../config';\nimport gridItemProps from './grid-item-props';\nimport { renderTNode, TNode } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-grid-item`;\n\nexport default defineComponent({\n  name,\n  components: { TNode, TBadge },\n  props: gridItemProps,\n  setup(props) {\n    const internalInstance = getCurrentInstance();\n    const isHorz = props.layout === 'horizontal';\n    const { column, gutter, border, align } = inject<any>('grid');\n\n    const imageContent = computed(() => renderTNode(internalInstance, 'image'));\n    const textContent = computed(() => renderTNode(internalInstance, 'text'));\n    const descContent = computed(() => renderTNode(internalInstance, 'description'));\n\n    const rootClass = computed(() => [`${name}`, { [`${name}--bordered`]: border.value }]);\n\n    const rootStyle = computed(() => {\n      const percent = `${100 / +column.value}%`;\n      const borderStyle = {};\n      if (border.value) {\n        if (typeof border.value !== 'boolean') {\n          const { color, width, style } = border.value;\n          return {\n            borderColor: color,\n            borderWidth: width,\n            borderStyle: style,\n          };\n        }\n      }\n\n      const style = {\n        flexBasis: percent,\n        flexDirection: isHorz ? ('row' as const) : ('column' as const),\n        paddingLeft: gutter.value ? `${gutter.value}px` : 0,\n        paddingRight: gutter.value ? `${gutter.value}px` : 0,\n        alignItems: 'center',\n        justifyContent: 'center',\n        textAlign: ['center', 'left'].includes(align.value) ? align.value : 'center',\n        ...borderStyle,\n      };\n      return style;\n    });\n\n    const imgStyle = computed(() => {\n      let imgSize = 32;\n      if (column.value >= 5) {\n        imgSize = 28;\n      } else if (column.value <= 3) {\n        imgSize = 48;\n      }\n      return {\n        width: `${imgSize}px`,\n        height: `${imgSize}px`,\n      };\n    });\n\n    const textStyle = computed(() => {\n      return {\n        paddingLeft: isHorz ? '12px' : 0,\n      };\n    });\n\n    const titleStyle = computed(() => {\n      return {\n        paddingTop: isHorz ? 0 : '8px',\n        marginBottom: '4px',\n      };\n    });\n\n    return {\n      name,\n      rootStyle,\n      rootClass,\n      imgStyle,\n      textStyle,\n      titleStyle,\n      imageContent,\n      textContent,\n      descContent,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}