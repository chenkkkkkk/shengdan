{"ast":null,"code":"/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { defineComponent, getCurrentInstance, ref, toRefs, computed, watch, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, Fragment, createBlock, createCommentVNode, createVNode } from 'vue';\nimport script$1 from './icon/gradient.js';\nimport script$2 from './icon/spinner.js';\nimport '../shared/index.js';\nimport ClASSNAMES from '../shared/constants.js';\nimport config from '../config.js';\nimport LoadingProps from './props.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { renderTNode, renderContent } from '../shared/render.js';\nimport '../_common/js/loading/circle-adapter.js';\nimport '../_common/js/utils/set-style.js';\nimport '../_common/js/utils/helper.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '@babel/runtime/helpers/objectWithoutProperties';\nimport '@babel/runtime/helpers/slicedToArray';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useEmitEvent/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/typeof';\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-loading\");\nvar toBarPerc = function toBarPerc(n) {\n  if (!n || n <= 0) return -100;\n  if (n > 1) return 0;\n  return (-1 + n) * 100;\n};\nvar script = defineComponent({\n  name: name,\n  components: {\n    GradientIcon: script$1,\n    SpinnerIcon: script$2,\n    TNode: TNodeComponent\n  },\n  props: LoadingProps,\n  setup: function setup(props) {\n    var internalInstance = getCurrentInstance();\n    var delayShowLoading = ref(false);\n    var _toRefs = toRefs(props),\n      pause = _toRefs.pause;\n    var countDelay = function countDelay() {\n      delayShowLoading.value = false;\n      var timer = setTimeout(function () {\n        delayShowLoading.value = true;\n        clearTimeout(timer);\n      }, props.delay);\n    };\n    var realLoading = computed(function () {\n      return (!props.delay || delayShowLoading.value) && props.loading;\n    });\n    watch(function () {\n      return props.loading;\n    }, function (value) {\n      if (value) {\n        props.delay && countDelay();\n      }\n    }, {\n      immediate: true\n    });\n    var rootClass = computed(function () {\n      return [name, _defineProperty({}, \"\".concat(name, \"--vertical\"), props.layout === \"vertical\"), _defineProperty({}, \"\".concat(name, \"--bar\"), props.theme === \"bar\"), props.size ? ClASSNAMES.SIZE[props.size] : \"\"];\n    });\n    var textClass = computed(function () {\n      return [\"\".concat(name, \"__text\"), _defineProperty({}, \"\".concat(name, \"__text--error\"), props.theme === \"error\"), _defineProperty({}, \"\".concat(name, \"__text--only\"), !props.indicator || props.theme === \"error\")];\n    });\n    var textContent = computed(function () {\n      if (props.theme === \"error\") {\n        return \"\\u52A0\\u8F7D\\u5931\\u8D25\";\n      }\n      return renderTNode(internalInstance, \"text\");\n    });\n    var defaultContent = computed(function () {\n      return renderContent(internalInstance, \"default\", \"content\");\n    });\n    var rootStyle = computed(function () {\n      if (props.inheritColor) {\n        return \"color: inherit\";\n      }\n      return \"\";\n    });\n    var barStyle = computed(function () {\n      return {\n        transform: \"translate3d(\".concat(toBarPerc(props.progress), \"%, 0px, 0px)\")\n      };\n    });\n    var animationStyle = computed(function () {\n      var ans = {};\n      if (props.pause) {\n        ans[\"animation-play-state\"] = \"paused\";\n      }\n      if (props.reverse) {\n        ans[\"animation-direction\"] = \"reverse\";\n      }\n      if (props.duration) {\n        ans[\"animation-duration\"] = \"\".concat(props.duration, \"ms\");\n      }\n      return ans;\n    });\n    return {\n      name: name,\n      pause: pause,\n      rootClass: rootClass,\n      textClass: textClass,\n      textContent: textContent,\n      defaultContent: defaultContent,\n      rootStyle: rootStyle,\n      barStyle: barStyle,\n      animationStyle: animationStyle,\n      realLoading: realLoading\n    };\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_gradient_icon = resolveComponent(\"gradient-icon\");\n  var _component_spinner_icon = resolveComponent(\"spinner-icon\");\n  var _component_t_node = resolveComponent(\"t-node\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.rootClass),\n    style: normalizeStyle(_ctx.rootStyle)\n  }, [_ctx.theme === \"bar\" && _ctx.progress && ![0, 1].includes(_ctx.progress) ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__bar\")),\n    style: normalizeStyle(_ctx.barStyle)\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__shadow\"))\n  }, null, 2)], 6)) : _ctx.theme !== \"bar\" ? (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [_ctx.indicator && _ctx.realLoading ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [_ctx.theme === \"circular\" ? (openBlock(), createBlock(_component_gradient_icon, {\n    key: 0,\n    style: normalizeStyle(_ctx.animationStyle)\n  }, null, 8, [\"style\"])) : _ctx.theme === \"spinner\" ? (openBlock(), createBlock(_component_spinner_icon, {\n    key: 1,\n    style: normalizeStyle(_ctx.animationStyle)\n  }, null, 8, [\"style\"])) : _ctx.theme === \"dots\" ? (openBlock(), createElementBlock(\"div\", {\n    key: 2,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__dots\")),\n    style: normalizeStyle(_ctx.animationStyle)\n  }, null, 6)) : createCommentVNode(\"\", true)], 64)) : createCommentVNode(\"\", true), _ctx.textContent && _ctx.realLoading ? (openBlock(), createElementBlock(\"span\", {\n    key: 1,\n    class: normalizeClass(_ctx.textClass)\n  }, [createVNode(_component_t_node, {\n    content: _ctx.textContent\n  }, null, 8, [\"content\"])], 2)) : createCommentVNode(\"\", true), createVNode(_component_t_node, {\n    content: _ctx.defaultContent\n  }, null, 8, [\"content\"])], 64)) : createCommentVNode(\"\", true)], 6);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":"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","names":["prefix","config","name","toBarPerc","n","defineComponent","components","GradientIcon","SpinnerIcon","TNode","props","setup","internalInstance","getCurrentInstance","ref","toRefs","pause","countDelay","delayShowLoading","value","setTimeout","clearTimeout","timer","delay","computed","loading","watch","immediate","layout","theme","CLASSNAMES","size","defaultContent","renderContent","inheritColor","transform","progress","ans","reverse","duration","rootClass","textClass","textContent","rootStyle","barStyle","animationStyle","realLoading","class","style","_ctx","_createElementBlock","_createElementVNode","key","_Fragment","_createBlock","_component_gradient_icon","_component_spinner_icon","_createVNode","_component_t_node","content"],"sources":["../../src/loading/loading.vue","../../src/loading/loading.vue?vue&type=template&id=3013b704&lang.js"],"sourcesContent":["<template>\n  <div :class=\"rootClass\" :style=\"rootStyle\">\n    <div v-if=\"theme === 'bar' && progress && ![0, 1].includes(progress)\" :class=\"`${name}__bar`\" :style=\"barStyle\">\n      <div :class=\"`${name}__shadow`\"></div>\n    </div>\n    <template v-else-if=\"theme !== 'bar'\">\n      <template v-if=\"indicator && realLoading\">\n        <gradient-icon v-if=\"theme === 'circular'\" :style=\"animationStyle\" />\n        <spinner-icon v-else-if=\"theme === 'spinner'\" :style=\"animationStyle\" />\n        <div v-else-if=\"theme === 'dots'\" :class=\"`${name}__dots`\" :style=\"animationStyle\" />\n      </template>\n      <span v-if=\"textContent && realLoading\" :class=\"textClass\">\n        <t-node :content=\"textContent\"></t-node>\n      </span>\n      <t-node :content=\"defaultContent\"></t-node>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, getCurrentInstance, computed, ref, watch, toRefs } from 'vue';\nimport GradientIcon from './icon/gradient.vue';\nimport SpinnerIcon from './icon/spinner.vue';\nimport { renderTNode, TNode, renderContent } from '../shared';\nimport CLASSNAMES from '../shared/constants';\n\nimport config from '../config';\nimport LoadingProps from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-loading`;\n\nconst toBarPerc = (n?: number) => {\n  if (!n || n <= 0) return -100;\n  if (n > 1) return 0;\n  return (-1 + n) * 100;\n};\n\nexport default defineComponent({\n  name,\n  components: {\n    GradientIcon,\n    SpinnerIcon,\n    TNode,\n  },\n  props: LoadingProps,\n  setup(props) {\n    const internalInstance = getCurrentInstance();\n    const delayShowLoading = ref(false);\n    const { pause } = toRefs(props);\n\n    const countDelay = () => {\n      delayShowLoading.value = false;\n      const timer = setTimeout(() => {\n        delayShowLoading.value = true;\n        clearTimeout(timer);\n      }, props.delay);\n    };\n\n    const realLoading = computed(() => (!props.delay || delayShowLoading.value) && props.loading);\n\n    watch(\n      () => props.loading,\n      (value) => {\n        if (value) {\n          props.delay && countDelay();\n        }\n      },\n      {\n        immediate: true,\n      },\n    );\n\n    const rootClass = computed(() => [\n      name,\n      { [`${name}--vertical`]: props.layout === 'vertical' },\n      { [`${name}--bar`]: props.theme === 'bar' },\n      props.size ? CLASSNAMES.SIZE[props.size] : '',\n    ]);\n\n    const textClass = computed(() => [\n      `${name}__text`,\n      { [`${name}__text--error`]: props.theme === 'error' },\n      {\n        [`${name}__text--only`]: !props.indicator || props.theme === 'error',\n      },\n    ]);\n\n    const textContent = computed(() => {\n      if (props.theme === 'error') {\n        return '加载失败';\n      }\n      return renderTNode(internalInstance, 'text');\n    });\n\n    const defaultContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n\n    const rootStyle = computed(() => {\n      if (props.inheritColor) {\n        return 'color: inherit';\n      }\n      return '';\n    });\n    const barStyle = computed(() => ({\n      transform: `translate3d(${toBarPerc(props.progress)}%, 0px, 0px)`,\n    }));\n    const animationStyle = computed(() => {\n      const ans: Record<string, any> = {};\n      if (props.pause) {\n        ans['animation-play-state'] = 'paused';\n      }\n      if (props.reverse) {\n        ans['animation-direction'] = 'reverse';\n      }\n      if (props.duration) {\n        ans['animation-duration'] = `${props.duration}ms`;\n      }\n      return ans;\n    });\n\n    return {\n      name,\n      pause,\n      rootClass,\n      textClass,\n      textContent,\n      defaultContent,\n      rootStyle,\n      barStyle,\n      animationStyle,\n      realLoading,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"rootClass\" :style=\"rootStyle\">\n    <div v-if=\"theme === 'bar' && progress && ![0, 1].includes(progress)\" :class=\"`${name}__bar`\" :style=\"barStyle\">\n      <div :class=\"`${name}__shadow`\"></div>\n    </div>\n    <template v-else-if=\"theme !== 'bar'\">\n      <template v-if=\"indicator && realLoading\">\n        <gradient-icon v-if=\"theme === 'circular'\" :style=\"animationStyle\" />\n        <spinner-icon v-else-if=\"theme === 'spinner'\" :style=\"animationStyle\" />\n        <div v-else-if=\"theme === 'dots'\" :class=\"`${name}__dots`\" :style=\"animationStyle\" />\n      </template>\n      <span v-if=\"textContent && realLoading\" :class=\"textClass\">\n        <t-node :content=\"textContent\"></t-node>\n      </span>\n      <t-node :content=\"defaultContent\"></t-node>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, getCurrentInstance, computed, ref, watch, toRefs } from 'vue';\nimport GradientIcon from './icon/gradient.vue';\nimport SpinnerIcon from './icon/spinner.vue';\nimport { renderTNode, TNode, renderContent } from '../shared';\nimport CLASSNAMES from '../shared/constants';\n\nimport config from '../config';\nimport LoadingProps from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-loading`;\n\nconst toBarPerc = (n?: number) => {\n  if (!n || n <= 0) return -100;\n  if (n > 1) return 0;\n  return (-1 + n) * 100;\n};\n\nexport default defineComponent({\n  name,\n  components: {\n    GradientIcon,\n    SpinnerIcon,\n    TNode,\n  },\n  props: LoadingProps,\n  setup(props) {\n    const internalInstance = getCurrentInstance();\n    const delayShowLoading = ref(false);\n    const { pause } = toRefs(props);\n\n    const countDelay = () => {\n      delayShowLoading.value = false;\n      const timer = setTimeout(() => {\n        delayShowLoading.value = true;\n        clearTimeout(timer);\n      }, props.delay);\n    };\n\n    const realLoading = computed(() => (!props.delay || delayShowLoading.value) && props.loading);\n\n    watch(\n      () => props.loading,\n      (value) => {\n        if (value) {\n          props.delay && countDelay();\n        }\n      },\n      {\n        immediate: true,\n      },\n    );\n\n    const rootClass = computed(() => [\n      name,\n      { [`${name}--vertical`]: props.layout === 'vertical' },\n      { [`${name}--bar`]: props.theme === 'bar' },\n      props.size ? CLASSNAMES.SIZE[props.size] : '',\n    ]);\n\n    const textClass = computed(() => [\n      `${name}__text`,\n      { [`${name}__text--error`]: props.theme === 'error' },\n      {\n        [`${name}__text--only`]: !props.indicator || props.theme === 'error',\n      },\n    ]);\n\n    const textContent = computed(() => {\n      if (props.theme === 'error') {\n        return '加载失败';\n      }\n      return renderTNode(internalInstance, 'text');\n    });\n\n    const defaultContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n\n    const rootStyle = computed(() => {\n      if (props.inheritColor) {\n        return 'color: inherit';\n      }\n      return '';\n    });\n    const barStyle = computed(() => ({\n      transform: `translate3d(${toBarPerc(props.progress)}%, 0px, 0px)`,\n    }));\n    const animationStyle = computed(() => {\n      const ans: Record<string, any> = {};\n      if (props.pause) {\n        ans['animation-play-state'] = 'paused';\n      }\n      if (props.reverse) {\n        ans['animation-direction'] = 'reverse';\n      }\n      if (props.duration) {\n        ans['animation-duration'] = `${props.duration}ms`;\n      }\n      return ans;\n    });\n\n    return {\n      name,\n      pause,\n      rootClass,\n      textClass,\n      textContent,\n      defaultContent,\n      rootStyle,\n      barStyle,\n      animationStyle,\n      realLoading,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}