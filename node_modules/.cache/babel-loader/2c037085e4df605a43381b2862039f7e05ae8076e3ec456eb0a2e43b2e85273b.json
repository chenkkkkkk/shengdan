{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { defineComponent, provide, getCurrentInstance, computed, ref, Fragment, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, resolveDynamicComponent, withCtx, createVNode, createCommentVNode } from 'vue';\nimport '../shared/index.js';\nimport AvatarGroupProps from './avatar-group-props.js';\nimport config from '../config.js';\nimport script$1 from './avatar.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { renderTNode } from '../shared/render.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useEmitEvent/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/typeof';\nimport '../badge/index.js';\nimport '../badge/badge.js';\nimport '@babel/runtime/helpers/slicedToArray';\nimport '../badge/props.js';\nimport './style/css.js';\nimport '../badge/type.js';\nimport '../image/index.js';\nimport '../image/image.js';\nimport 'tdesign-icons-vue-next';\nimport '../image/props.js';\nimport '../image/type.js';\nimport './props.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-avatar-group\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    Avatar: script$1,\n    TNode: TNodeComponent\n  },\n  props: AvatarGroupProps,\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    provide(\"avatarGroup\", _objectSpread({}, props));\n    var internalInstance = getCurrentInstance();\n    var classes = computed(function () {\n      var _ref2;\n      return [\"\".concat(name), (_ref2 = {}, _defineProperty(_ref2, \"\".concat(prefix, \"-avatar--offset-right\"), props.cascading === \"right-up\"), _defineProperty(_ref2, \"\".concat(prefix, \"-avatar--offset-left\"), props.cascading === \"left-up\"), _ref2)];\n    });\n    var isShowEllipsisContent = ref(false);\n    var ellipsisContent = ref(null);\n    var size = ref(props.size);\n    var collapseAvatar = computed(function () {\n      return renderTNode(internalInstance, \"collapseAvatar\");\n    });\n    var avatarItems = function avatarItems() {\n      var childContent = slots.default ? slots.default() : [];\n      var children = [];\n      childContent.forEach(function (child) {\n        if (child.type === Fragment) {\n          children.push.apply(children, _toConsumableArray(child.children));\n        } else {\n          children.push(child);\n        }\n      });\n      var childrenShow = [];\n      var max = props.max || 0;\n      if (max && max < children.length) {\n        childrenShow = children.slice(0, max);\n        isShowEllipsisContent.value = true;\n        ellipsisContent.value = collapseAvatar.value || \"+\".concat(children.length - max);\n      } else {\n        childrenShow = children;\n      }\n      size.value = childrenShow[0].size || props.size;\n      return childrenShow;\n    };\n    return {\n      classes: classes,\n      size: size,\n      isShowEllipsisContent: isShowEllipsisContent,\n      ellipsisContent: ellipsisContent,\n      avatarItems: avatarItems\n    };\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_node = resolveComponent(\"t-node\");\n  var _component_avatar = resolveComponent(\"avatar\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.classes)\n  }, [(openBlock(), createBlock(resolveDynamicComponent(_ctx.avatarItems))), _ctx.isShowEllipsisContent ? (openBlock(), createBlock(_component_avatar, {\n    key: 0,\n    size: _ctx.size\n  }, {\n    default: withCtx(function () {\n      return [createVNode(_component_t_node, {\n        content: _ctx.ellipsisContent\n      }, null, 8, [\"content\"])];\n    }),\n    _: 1\n  }, 8, [\"size\"])) : createCommentVNode(\"\", true)], 2);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,IAAQA,SAAWC,OAAXD;AACR,IAAME,OAAUF;AAEhB,aAAeG,eAAgB;EAC7BD;EACAE,UAAY;IACVC;IACAC;GACF;EACAC,KAAO;EACPC,KAAM,wBAAkBC;IAAA,IAATC;IACbC,QAAQ,aAAe,EAAKJ,wBAAO;IAEnC,IAAMK,mBAAmBC,kBAAmB;IACtC,cAAUC,SAAS;MAAA;MAAA,OAAM,WAC1BZ,qDAEGF,MAAgC,kCAAMe,SAAc,mDACpDf,MAA+B,iCAAMe,SAAc,eAE1D;KAAA;IAEK,4BAAwBC,IAAI,KAAK;IACjC,sBAAkBA,IAAI,IAAI;IAC1B,WAAOA,GAAI,OAAMC,IAAI;IAE3B,IAAMC,iBAAiBJ,QAAS;MAAA,OAAMK,WAAY,mBAAkB,gBAAgB,CAAC;KAAA;IAErF,IAAMC,cAAc,SAAdA,cAAoB;MACxB,IAAMC,eAAsBX,KAAM,WAAUA,KAAM,aAAY,EAAC;MAC/D,IAAMY,WAA4B,EAAC;MACtBD,qBAAQ,UAACE,KAAU;QAC1B,UAAMC,SAASC,QAAU;UAClBH,iDAAQC,MAAMD,QAAQ;QACjC,CAAO;UACLA,SAASI,KAAKH,KAAK;QACrB;MACF,CAAC;MACD,IAAII,eAAgC,EAAC;MAC/B,UAAMpB,MAAMqB,GAAO;MACrB,WAAOA,GAAM,YAASC,MAAQ;QACjBF,wBAASG,KAAM,IAAGF,GAAG;QACpCG,sBAAsBC,KAAQ;QAC9BC,gBAAgBD,KAAQ,kBAAeA,KAAS,IAAIV,oBAASO,MAAS;MACxE,CAAO;QACUF;MACjB;MACAV,KAAKe,KAAQ,gBAAa,CAAG,UAAQzB,KAAM;MACpC;KACT;IACO;MACL2B;MACAjB;MACAc;MACAE;MACAb;KACF;EACF;AACF,CAAC;;;;oBC1EC,qBAKK;IALCe,qBAAO,MAAOD;OAClBE,yBAA8BC,uBAAd,MAAWjB,gBACbkB,IAAqB,uCAAnCC,YAEQC;;IAF8BvB,MAAMqB,IAAI;;qBAC9C;MAAA,OAA2C,CAA3CG,YAA2CC;QAAlCC,OAAS,OAAeV;OAAA","names":["prefix","config","name","defineComponent","components","Avatar","TNode","props","setup","_ref","slots","provide","internalInstance","getCurrentInstance","computed","cascading","ref","size","collapseAvatar","renderTNode","avatarItems","childContent","children","child","type","Fragment","push","childrenShow","max","length","slice","isShowEllipsisContent","value","ellipsisContent","classes","class","_openBlock","_resolveDynamicComponent","_ctx","_createBlock","_component_avatar","_createVNode","_component_t_node","content"],"sources":["../../src/avatar/avatar-group.vue","../../src/avatar/avatar-group.vue?vue&type=template&id=4a7942c6&lang.js"],"sourcesContent":["<template>\n  <div :class=\"classes\">\n    <component :is=\"avatarItems\" />\n    <avatar v-if=\"isShowEllipsisContent\" :size=\"size\">\n      <t-node :content=\"ellipsisContent\"></t-node>\n    </avatar>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, Fragment, getCurrentInstance, provide, ref } from 'vue';\nimport { renderTNode, TNode } from '../shared';\nimport AvatarGroupProps from './avatar-group-props';\nimport { TdAvatarProps } from './type';\nimport config from '../config';\nimport Avatar from './avatar.vue';\n\nconst { prefix } = config;\nconst name = `${prefix}-avatar-group`;\n\nexport default defineComponent({\n  name,\n  components: {\n    Avatar,\n    TNode,\n  },\n  props: AvatarGroupProps,\n  setup(props, { slots }) {\n    provide('avatarGroup', { ...props });\n\n    const internalInstance = getCurrentInstance();\n    const classes = computed(() => [\n      `${name}`,\n      {\n        [`${prefix}-avatar--offset-right`]: props.cascading === 'right-up',\n        [`${prefix}-avatar--offset-left`]: props.cascading === 'left-up',\n      },\n    ]);\n\n    const isShowEllipsisContent = ref(false);\n    const ellipsisContent = ref(null);\n    const size = ref(props.size);\n\n    const collapseAvatar = computed(() => renderTNode(internalInstance, 'collapseAvatar'));\n\n    const avatarItems = () => {\n      const childContent: any[] = slots.default ? slots.default() : [];\n      const children: TdAvatarProps[] = [];\n      childContent.forEach((child) => {\n        if (child.type === Fragment) {\n          children.push(...child.children);\n        } else {\n          children.push(child);\n        }\n      });\n      let childrenShow: TdAvatarProps[] = [];\n      const max = props.max || 0;\n      if (max && max < children.length) {\n        childrenShow = children.slice(0, max);\n        isShowEllipsisContent.value = true;\n        ellipsisContent.value = collapseAvatar.value || `+${children.length - max}`;\n      } else {\n        childrenShow = children;\n      }\n      size.value = childrenShow[0].size || props.size;\n      return childrenShow;\n    };\n    return {\n      classes,\n      size,\n      isShowEllipsisContent,\n      ellipsisContent,\n      avatarItems,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"classes\">\n    <component :is=\"avatarItems\" />\n    <avatar v-if=\"isShowEllipsisContent\" :size=\"size\">\n      <t-node :content=\"ellipsisContent\"></t-node>\n    </avatar>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, Fragment, getCurrentInstance, provide, ref } from 'vue';\nimport { renderTNode, TNode } from '../shared';\nimport AvatarGroupProps from './avatar-group-props';\nimport { TdAvatarProps } from './type';\nimport config from '../config';\nimport Avatar from './avatar.vue';\n\nconst { prefix } = config;\nconst name = `${prefix}-avatar-group`;\n\nexport default defineComponent({\n  name,\n  components: {\n    Avatar,\n    TNode,\n  },\n  props: AvatarGroupProps,\n  setup(props, { slots }) {\n    provide('avatarGroup', { ...props });\n\n    const internalInstance = getCurrentInstance();\n    const classes = computed(() => [\n      `${name}`,\n      {\n        [`${prefix}-avatar--offset-right`]: props.cascading === 'right-up',\n        [`${prefix}-avatar--offset-left`]: props.cascading === 'left-up',\n      },\n    ]);\n\n    const isShowEllipsisContent = ref(false);\n    const ellipsisContent = ref(null);\n    const size = ref(props.size);\n\n    const collapseAvatar = computed(() => renderTNode(internalInstance, 'collapseAvatar'));\n\n    const avatarItems = () => {\n      const childContent: any[] = slots.default ? slots.default() : [];\n      const children: TdAvatarProps[] = [];\n      childContent.forEach((child) => {\n        if (child.type === Fragment) {\n          children.push(...child.children);\n        } else {\n          children.push(child);\n        }\n      });\n      let childrenShow: TdAvatarProps[] = [];\n      const max = props.max || 0;\n      if (max && max < children.length) {\n        childrenShow = children.slice(0, max);\n        isShowEllipsisContent.value = true;\n        ellipsisContent.value = collapseAvatar.value || `+${children.length - max}`;\n      } else {\n        childrenShow = children;\n      }\n      size.value = childrenShow[0].size || props.size;\n      return childrenShow;\n    };\n    return {\n      classes,\n      size,\n      isShowEllipsisContent,\n      ellipsisContent,\n      avatarItems,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}