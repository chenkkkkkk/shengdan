{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { getCurrentDate } from './utils.js';\nimport '../log/log.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction xhr(_ref) {\n  var _files$;\n  var _ref$method = _ref.method,\n    method = _ref$method === void 0 ? \"POST\" : _ref$method,\n    action = _ref.action,\n    _ref$withCredentials = _ref.withCredentials,\n    withCredentials = _ref$withCredentials === void 0 ? false : _ref$withCredentials,\n    _ref$headers = _ref.headers,\n    headers = _ref$headers === void 0 ? {} : _ref$headers,\n    _ref$data = _ref.data,\n    data = _ref$data === void 0 ? {} : _ref$data,\n    file = _ref.file,\n    _ref$files = _ref.files,\n    files = _ref$files === void 0 ? [] : _ref$files,\n    _ref$name = _ref.name,\n    name = _ref$name === void 0 ? \"file\" : _ref$name,\n    _ref$useMockProgress = _ref.useMockProgress,\n    useMockProgress = _ref$useMockProgress === void 0 ? true : _ref$useMockProgress,\n    formatRequest = _ref.formatRequest,\n    onError = _ref.onError,\n    onProgress = _ref.onProgress,\n    onSuccess = _ref.onSuccess;\n  var innerFiles = files || [];\n  var percent = 0;\n  var xhr2 = new XMLHttpRequest();\n  if (withCredentials) {\n    xhr2.withCredentials = true;\n  }\n  var timer1;\n  var timer2;\n  if (useMockProgress && ((_files$ = files[0]) === null || _files$ === void 0 ? void 0 : _files$.status) === \"progress\") {\n    var timer22 = setTimeout(function () {\n      timer1 = setInterval(function () {\n        if (percent + 10 < 100) {\n          percent = Math.max(percent + 10, percent);\n          if (files[0] && percent !== files[0].percent) {\n            files[0].percent = percent;\n            onProgress({\n              percent: percent,\n              file: file || innerFiles[0],\n              files: innerFiles.map(function (file2) {\n                return _objectSpread(_objectSpread({}, file2), {}, {\n                  percent: percent\n                });\n              }),\n              type: \"mock\"\n            });\n          }\n        } else {\n          clearInterval(timer1);\n        }\n      }, 300);\n      clearTimeout(timer22);\n    }, 300);\n  }\n  var requestData = {};\n  if (data) {\n    var extraData = typeof data === \"function\" ? data(file) : data;\n    Object.assign(requestData, extraData);\n  }\n  innerFiles.forEach(function (file2, index) {\n    var fileField = innerFiles.length > 1 ? \"\".concat(name, \"[\").concat(index, \"]\") : name;\n    requestData[fileField] = file2.raw;\n    requestData[name] = file2.raw;\n  });\n  if (formatRequest) {\n    requestData = formatRequest(requestData);\n  }\n  var formData = new FormData();\n  Object.keys(requestData).forEach(function (key) {\n    formData.append(key, requestData[key]);\n  });\n  xhr2.open(method, action, true);\n  Object.keys(headers).forEach(function (key) {\n    xhr2.setRequestHeader(key, headers[key]);\n  });\n  xhr2.onerror = function (event) {\n    onError({\n      event: event,\n      file: file,\n      files: innerFiles\n    });\n    clearInterval(timer1);\n    clearTimeout(timer2);\n  };\n  if (xhr2.upload) {\n    xhr2.upload.onprogress = function (event) {\n      var _innerFiles$;\n      var realPercent = 0;\n      if (event.total > 0) {\n        realPercent = Math.round(event.loaded / event.total * 100);\n      }\n      percent = Math.max(realPercent, percent);\n      if (percent !== realPercent && ((_innerFiles$ = innerFiles[0]) === null || _innerFiles$ === void 0 ? void 0 : _innerFiles$.percent) !== percent) {\n        var progressFiles = innerFiles.map(function (item) {\n          return _objectSpread(_objectSpread({}, item), {}, {\n            percent: percent\n          });\n        });\n        onProgress({\n          event: event,\n          percent: percent,\n          file: file || progressFiles[0],\n          files: progressFiles,\n          type: \"real\"\n        });\n      }\n    };\n  }\n  xhr2.onload = function (event) {\n    var response = {};\n    var isFail = xhr2.status < 200 || xhr2.status >= 300;\n    if (isFail) {\n      return onError({\n        event: event,\n        file: file,\n        files: innerFiles,\n        response: response\n      });\n    }\n    var text = xhr2.responseText || xhr2.response;\n    try {\n      response = JSON.parse(text);\n    } catch (e) {\n      response = text;\n    }\n    clearInterval(timer1);\n    clearTimeout(timer2);\n    innerFiles.forEach(function (file2) {\n      var _response;\n      file2.percent = 100;\n      file2.status = \"success\";\n      file2.uploadTime = ((_response = response) === null || _response === void 0 ? void 0 : _response.uploadTime) || getCurrentDate();\n    });\n    onSuccess({\n      event: event,\n      file: file || innerFiles[0],\n      files: _toConsumableArray(innerFiles),\n      response: response\n    });\n  };\n  xhr2.send(formData);\n  return xhr2;\n}\nexport { xhr as default };","map":{"version":3,"mappings":"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","names":["xhr","_ref","method","action","_ref$withCredentials","withCredentials","_ref$headers","headers","_ref$data","data","file","_ref$files","files","_ref$name","name","_ref$useMockProgress","useMockProgress","formatRequest","onError","onProgress","onSuccess","percent","XMLHttpRequest","_files$","status","timer2","setTimeout","timer1","setInterval","Math","innerFiles","map","type","clearInterval","clearTimeout","requestData","extraData","Object","index","fileField","FormData","keys","key","formData","onerror","event","upload","onprogress","realPercent","total","round","loaded","max","item","progressFiles","onload","response","isFail","parse","text","e","_response","uploadTime","getCurrentDate","send"],"sources":["../../../../src/_common/js/upload/xhr.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport { UploadFile, XhrOptions } from './types';\nimport { getCurrentDate } from './utils';\n\nexport default function xhr({\n  method = 'POST',\n  action,\n  withCredentials = false,\n  headers = {},\n  data = {},\n  file,\n  files = [],\n  name = 'file',\n  useMockProgress = true,\n  formatRequest,\n  onError,\n  onProgress,\n  onSuccess,\n}: XhrOptions) {\n  // support files\n  const innerFiles: UploadFile[] = files || [];\n  let percent = 0;\n\n  // eslint-disable-next-line no-shadow\n  const xhr = new XMLHttpRequest();\n  if (withCredentials) {\n    xhr.withCredentials = true;\n  }\n\n  let timer1: NodeJS.Timeout;\n  let timer2: NodeJS.Timeout;\n  if (useMockProgress && files[0]?.status === 'progress') {\n    // 超过 500 毫秒再开启虚拟进度\n    const timer2 = setTimeout(() => {\n      // 只有真实进度一直不存在时才需要模拟进度\n      timer1 = setInterval(() => {\n        if (percent + 10 < 100) {\n          percent = Math.max(percent + 10, percent);\n          if (files[0] && percent !== files[0].percent) {\n            files[0].percent = percent;\n            onProgress({\n              percent,\n              file: file || innerFiles[0],\n              files: innerFiles.map((file) => ({ ...file, percent })),\n              type: 'mock',\n            });\n          }\n        } else {\n          clearInterval(timer1);\n        }\n      }, 300);\n      clearTimeout(timer2);\n    }, 300);\n  }\n\n  let requestData: { [key: string]: any } = {};\n  if (data) {\n    const extraData = typeof data === 'function' ? data(file) : data;\n    Object.assign(requestData, extraData);\n  }\n  innerFiles.forEach((file, index) => {\n    const fileField = innerFiles.length > 1 ? `${name}[${index}]` : name;\n    requestData[fileField] = file.raw;\n    requestData[name] = file.raw;\n  });\n\n  if (formatRequest) {\n    requestData = formatRequest(requestData);\n  }\n\n  // set send data\n  const formData = new FormData();\n  Object.keys(requestData).forEach((key) => {\n    formData.append(key, requestData[key]);\n  });\n\n  xhr.open(method, action, true);\n  // custom request headers\n  Object.keys(headers).forEach((key) => {\n    xhr.setRequestHeader(key, headers[key]);\n  });\n\n  xhr.onerror = (event: ProgressEvent) => {\n    onError({ event, file, files: innerFiles });\n    clearInterval(timer1);\n    clearTimeout(timer2);\n  };\n\n  if (xhr.upload) {\n    xhr.upload.onprogress = (event: ProgressEvent) => {\n      let realPercent = 0;\n      if (event.total > 0) {\n        realPercent = Math.round((event.loaded / event.total) * 100);\n      }\n      percent = Math.max(realPercent, percent);\n      if (percent !== realPercent && innerFiles[0]?.percent !== percent) {\n        const progressFiles = innerFiles.map((item) => ({ ...item, percent }));\n        onProgress({\n          event,\n          percent,\n          file: file || progressFiles[0],\n          files: progressFiles,\n          type: 'real',\n        });\n      }\n    };\n  }\n\n  // eslint-disable-next-line consistent-return\n  xhr.onload = (event: ProgressEvent) => {\n    let response: { [key: string]: any } = {};\n    const isFail = xhr.status < 200 || xhr.status >= 300;\n    if (isFail) {\n      return onError({\n        event, file, files: innerFiles, response\n      });\n    }\n    const text = xhr.responseText || xhr.response;\n    try {\n      response = JSON.parse(text);\n    } catch (e) {\n      response = text;\n    }\n    clearInterval(timer1);\n    clearTimeout(timer2);\n    innerFiles.forEach((file) => {\n      file.percent = 100;\n      file.status = 'success';\n      // 如果上传请求返回结果没有上传日期，则使用电脑当前日期显示\n      file.uploadTime = response?.uploadTime || getCurrentDate();\n    });\n    onSuccess({\n      event,\n      file: file || innerFiles[0],\n      files: [...innerFiles],\n      response,\n    });\n  };\n\n  xhr.send(formData);\n\n  return xhr;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}