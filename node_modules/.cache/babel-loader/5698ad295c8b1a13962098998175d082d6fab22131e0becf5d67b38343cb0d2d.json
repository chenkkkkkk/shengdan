{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport { defineComponent, toRefs, computed, getCurrentInstance, ref, watchEffect, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, Fragment, renderList, normalizeStyle, createCommentVNode } from 'vue';\nimport isNumber from 'lodash/isNumber';\nimport '../shared/index.js';\nimport config from '../config.js';\nimport SkeletonProps from './props.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { renderContent } from '../shared/render.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useEmitEvent/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/typeof';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-skeleton\");\nvar ThemeMap = {\n  avatar: [{\n    type: \"circle\",\n    height: \"64px\",\n    width: \"64px\"\n  }],\n  image: [{\n    type: \"rect\",\n    height: \"64px\",\n    width: \"64px\"\n  }],\n  text: [1, [{\n    width: \"24%\",\n    height: \"16px\",\n    marginRight: \"16px\"\n  }, {\n    width: \"76%\",\n    height: \"16px\"\n  }]],\n  paragraph: [1, 1, 1, {\n    width: \"55%\"\n  }]\n};\nvar script = defineComponent({\n  name: name,\n  components: {\n    TNode: TNodeComponent\n  },\n  props: SkeletonProps,\n  setup: function setup(props) {\n    var _toRefs = toRefs(props),\n      loading = _toRefs.loading,\n      animation = _toRefs.animation;\n    var showContent = computed(function () {\n      return !loading.value;\n    });\n    var internalInstance = getCurrentInstance();\n    var skeletonContent = computed(function () {\n      return renderContent(internalInstance, \"default\", \"content\");\n    });\n    var baseClass = name;\n    var rootClasses = computed(function () {\n      return [\"\".concat(name)];\n    });\n    var rowCols = ref([]);\n    watchEffect(function () {\n      var _props$rowCol;\n      if ((_props$rowCol = props.rowCol) !== null && _props$rowCol !== void 0 && _props$rowCol.length) {\n        rowCols.value = _toConsumableArray(props.rowCol);\n      } else {\n        rowCols.value = _toConsumableArray(ThemeMap[props.theme || \"text\"]);\n      }\n    });\n    var getColItemClass = function getColItemClass(obj) {\n      return [\"\".concat(name, \"__col\"), \"\".concat(name, \"--type-\").concat(obj.type || \"text\"), _defineProperty({}, \"\".concat(name, \"--animation-\").concat(animation.value), animation.value)];\n    };\n    var getColItemStyle = function getColItemStyle(obj) {\n      var styleName = [\"width\", \"height\", \"marginRight\", \"marginLeft\", \"margin\", \"size\", \"background\", \"backgroundColor\", \"borderRadius\"];\n      var style = {};\n      styleName.forEach(function (name2) {\n        if (name2 in obj) {\n          var px = isNumber(obj[name2]) ? \"\".concat(obj[name2], \"px\") : obj[name2];\n          if (name2 === \"size\") {\n            var _ref2 = [px, px];\n            style.width = _ref2[0];\n            style.height = _ref2[1];\n          } else {\n            style[name2] = px;\n          }\n        }\n      });\n      return style;\n    };\n    var parsedRowcols = computed(function () {\n      return rowCols.value.map(function (item) {\n        if (isNumber(item)) {\n          return [{\n            class: getColItemClass({\n              type: \"text\"\n            }),\n            style: {}\n          }];\n        }\n        if (Array.isArray(item)) {\n          return item.map(function (col) {\n            return _objectSpread(_objectSpread({}, col), {}, {\n              class: getColItemClass(col),\n              style: getColItemStyle(col)\n            });\n          });\n        }\n        var nItem = item;\n        return [_objectSpread(_objectSpread({}, nItem), {}, {\n          class: getColItemClass(nItem),\n          style: getColItemStyle(nItem)\n        })];\n      });\n    });\n    return {\n      baseClass: baseClass,\n      rootClasses: rootClasses,\n      parsedRowcols: parsedRowcols,\n      showContent: showContent,\n      skeletonContent: skeletonContent\n    };\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_node = resolveComponent(\"t-node\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.rootClasses)\n  }, [_ctx.showContent ? (openBlock(), createBlock(_component_t_node, {\n    key: 0,\n    content: _ctx.skeletonContent\n  }, null, 8, [\"content\"])) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [_ctx.parsedRowcols.length ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.baseClass, \"__content\"))\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.parsedRowcols, function (row, index) {\n    return openBlock(), createElementBlock(\"div\", {\n      key: \"row-\".concat(index),\n      class: normalizeClass(\"\".concat(_ctx.baseClass, \"__row\"))\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, function (col, idx) {\n      return openBlock(), createElementBlock(\"div\", {\n        key: \"col-\".concat(idx),\n        class: normalizeClass(col.class),\n        style: normalizeStyle(col.style)\n      }, null, 6);\n    }), 128))], 2);\n  }), 128))], 2)) : createCommentVNode(\"\", true)], 64))], 2);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":"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","names":["prefix","config","name","ThemeMap","avatar","type","height","width","image","text","marginRight","paragraph","defineComponent","components","TNode","props","setup","toRefs","loading","animation","showContent","value","internalInstance","getCurrentInstance","skeletonContent","computed","renderContent","baseClass","rootClasses","ref","watchEffect","rowCol","length","rowCols","theme","getColItemClass","obj","getColItemStyle","styleName","style","isNumber","px","map","item","class","isArray","col","nItem","parsedRowcols","_ctx","_createBlock","_component_t_node","content","_createElementBlock","key","_openBlock","index","idx","_normalizeClass","_normalizeStyle"],"sources":["../../src/skeleton/skeleton.vue","../../src/skeleton/skeleton.vue?vue&type=template&id=4166a334&lang.js"],"sourcesContent":["<template>\n  <div :class=\"rootClasses\">\n    <template v-if=\"showContent\">\n      <t-node :content=\"skeletonContent\" />\n    </template>\n    <template v-else>\n      <div v-if=\"parsedRowcols.length\" :class=\"`${baseClass}__content`\">\n        <div v-for=\"(row, index) of parsedRowcols\" :key=\"`row-${index}`\" :class=\"`${baseClass}__row`\">\n          <div v-for=\"(col, idx) of row\" :key=\"`col-${idx}`\" :class=\"col.class\" :style=\"col.style\"></div>\n        </div>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, toRefs, watchEffect, ref, getCurrentInstance } from 'vue';\nimport isNumber from 'lodash/isNumber';\nimport { renderContent, TNode } from '../shared';\nimport config from '../config';\nimport SkeletonProps from './props';\nimport { SkeletonRowColObj } from './type';\nimport { ClassName, Styles } from '../common';\n\nconst { prefix } = config;\nconst name = `${prefix}-skeleton`;\nconst ThemeMap = {\n  avatar: [{ type: 'circle', height: '64px', width: '64px' }],\n  image: [{ type: 'rect', height: '64px', width: '64px' }],\n  text: [\n    1,\n    [\n      { width: '24%', height: '16px', marginRight: '16px' },\n      { width: '76%', height: '16px' },\n    ],\n  ],\n  paragraph: [1, 1, 1, { width: '55%' }],\n};\n\nexport default defineComponent({\n  name,\n  components: {\n    TNode,\n  },\n  props: SkeletonProps,\n  setup(props) {\n    const { loading, animation } = toRefs(props);\n    const showContent = computed(() => !loading.value);\n\n    const internalInstance = getCurrentInstance();\n    const skeletonContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const baseClass = name;\n    const rootClasses = computed(() => [`${name}`]);\n\n    const rowCols = ref<any>([]);\n\n    watchEffect(() => {\n      if (props.rowCol?.length) {\n        rowCols.value = [...props.rowCol];\n      } else {\n        rowCols.value = [...ThemeMap[props.theme || 'text']];\n      }\n    });\n\n    const getColItemClass = (obj: SkeletonRowColObj): ClassName => [\n      `${name}__col`,\n      `${name}--type-${obj.type || 'text'}`,\n      { [`${name}--animation-${animation.value}`]: animation.value },\n    ];\n    const getColItemStyle = (obj: SkeletonRowColObj): Styles => {\n      const styleName = [\n        'width',\n        'height',\n        'marginRight',\n        'marginLeft',\n        'margin',\n        'size',\n        'background',\n        'backgroundColor',\n        'borderRadius',\n      ];\n      const style: Styles = {};\n      styleName.forEach((name) => {\n        if (name in obj) {\n          const px = isNumber(obj[name]) ? `${obj[name]}px` : obj[name];\n          if (name === 'size') {\n            [style.width, style.height] = [px, px];\n          } else {\n            style[name] = px;\n          }\n        }\n      });\n      return style;\n    };\n\n    const parsedRowcols = computed(() => {\n      return rowCols.value.map((item: any) => {\n        if (isNumber(item)) {\n          return [\n            {\n              class: getColItemClass({ type: 'text' }),\n              style: {},\n            },\n          ];\n        }\n        if (Array.isArray(item)) {\n          return item.map((col) => {\n            return {\n              ...col,\n              class: getColItemClass(col),\n              style: getColItemStyle(col),\n            };\n          });\n        }\n\n        const nItem = item as SkeletonRowColObj;\n        return [\n          {\n            ...nItem,\n            class: getColItemClass(nItem),\n            style: getColItemStyle(nItem),\n          },\n        ];\n      });\n    });\n\n    return {\n      baseClass,\n      rootClasses,\n      parsedRowcols,\n      showContent,\n      skeletonContent,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"rootClasses\">\n    <template v-if=\"showContent\">\n      <t-node :content=\"skeletonContent\" />\n    </template>\n    <template v-else>\n      <div v-if=\"parsedRowcols.length\" :class=\"`${baseClass}__content`\">\n        <div v-for=\"(row, index) of parsedRowcols\" :key=\"`row-${index}`\" :class=\"`${baseClass}__row`\">\n          <div v-for=\"(col, idx) of row\" :key=\"`col-${idx}`\" :class=\"col.class\" :style=\"col.style\"></div>\n        </div>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, toRefs, watchEffect, ref, getCurrentInstance } from 'vue';\nimport isNumber from 'lodash/isNumber';\nimport { renderContent, TNode } from '../shared';\nimport config from '../config';\nimport SkeletonProps from './props';\nimport { SkeletonRowColObj } from './type';\nimport { ClassName, Styles } from '../common';\n\nconst { prefix } = config;\nconst name = `${prefix}-skeleton`;\nconst ThemeMap = {\n  avatar: [{ type: 'circle', height: '64px', width: '64px' }],\n  image: [{ type: 'rect', height: '64px', width: '64px' }],\n  text: [\n    1,\n    [\n      { width: '24%', height: '16px', marginRight: '16px' },\n      { width: '76%', height: '16px' },\n    ],\n  ],\n  paragraph: [1, 1, 1, { width: '55%' }],\n};\n\nexport default defineComponent({\n  name,\n  components: {\n    TNode,\n  },\n  props: SkeletonProps,\n  setup(props) {\n    const { loading, animation } = toRefs(props);\n    const showContent = computed(() => !loading.value);\n\n    const internalInstance = getCurrentInstance();\n    const skeletonContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const baseClass = name;\n    const rootClasses = computed(() => [`${name}`]);\n\n    const rowCols = ref<any>([]);\n\n    watchEffect(() => {\n      if (props.rowCol?.length) {\n        rowCols.value = [...props.rowCol];\n      } else {\n        rowCols.value = [...ThemeMap[props.theme || 'text']];\n      }\n    });\n\n    const getColItemClass = (obj: SkeletonRowColObj): ClassName => [\n      `${name}__col`,\n      `${name}--type-${obj.type || 'text'}`,\n      { [`${name}--animation-${animation.value}`]: animation.value },\n    ];\n    const getColItemStyle = (obj: SkeletonRowColObj): Styles => {\n      const styleName = [\n        'width',\n        'height',\n        'marginRight',\n        'marginLeft',\n        'margin',\n        'size',\n        'background',\n        'backgroundColor',\n        'borderRadius',\n      ];\n      const style: Styles = {};\n      styleName.forEach((name) => {\n        if (name in obj) {\n          const px = isNumber(obj[name]) ? `${obj[name]}px` : obj[name];\n          if (name === 'size') {\n            [style.width, style.height] = [px, px];\n          } else {\n            style[name] = px;\n          }\n        }\n      });\n      return style;\n    };\n\n    const parsedRowcols = computed(() => {\n      return rowCols.value.map((item: any) => {\n        if (isNumber(item)) {\n          return [\n            {\n              class: getColItemClass({ type: 'text' }),\n              style: {},\n            },\n          ];\n        }\n        if (Array.isArray(item)) {\n          return item.map((col) => {\n            return {\n              ...col,\n              class: getColItemClass(col),\n              style: getColItemStyle(col),\n            };\n          });\n        }\n\n        const nItem = item as SkeletonRowColObj;\n        return [\n          {\n            ...nItem,\n            class: getColItemClass(nItem),\n            style: getColItemStyle(nItem),\n          },\n        ];\n      });\n    });\n\n    return {\n      baseClass,\n      rootClasses,\n      parsedRowcols,\n      showContent,\n      skeletonContent,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}