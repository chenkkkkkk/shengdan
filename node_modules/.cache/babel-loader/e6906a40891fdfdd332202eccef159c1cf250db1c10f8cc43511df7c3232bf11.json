{"ast":null,"code":"/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _typeof from '@babel/runtime/helpers/typeof';\nimport { h } from 'vue';\nimport camelCase from 'lodash/camelCase';\nvar renderTNode = function renderTNode(instance, name, options) {\n  var _instance$slots$name3;\n  if (instance === null) {\n    return h(\"\", null);\n  }\n  var params = _typeof(options) === \"object\" && \"params\" in options ? options.params : null;\n  var defaultNode = _typeof(options) === \"object\" && \"defaultNode\" in options ? options.defaultNode : options;\n  var propsNode;\n  if (name in instance.props || camelCase(name) in instance.props) {\n    propsNode = instance.props[name] || instance.props[camelCase(name)];\n  }\n  if (instance.slots[name]) {\n    var _instance$slots$name;\n    return (_instance$slots$name = instance.slots[name]) === null || _instance$slots$name === void 0 ? void 0 : _instance$slots$name.call(params);\n  }\n  if (propsNode === true && defaultNode) {\n    var _instance$slots$name2;\n    return instance.slots[name] ? (_instance$slots$name2 = instance.slots[name]) === null || _instance$slots$name2 === void 0 ? void 0 : _instance$slots$name2.call(params) : defaultNode;\n  }\n  if (typeof propsNode === \"function\") return propsNode(h, params);\n  var isPropsEmpty = [void 0, params, \"\"].includes(propsNode);\n  if (isPropsEmpty && instance.slots[name]) return (_instance$slots$name3 = instance.slots[name]) === null || _instance$slots$name3 === void 0 ? void 0 : _instance$slots$name3.call(params);\n  return propsNode;\n};\nvar renderContent = function renderContent(instance, name1, name2, options) {\n  if (instance === null) {\n    return h(\"\", null);\n  }\n  var params = _typeof(options) === \"object\" && \"params\" in options ? options.params : null;\n  var defaultNode = _typeof(options) === \"object\" && \"defaultNode\" in options ? options.defaultNode : options;\n  var toParams = params ? {\n    params: params\n  } : void 0;\n  var node1 = renderTNode(instance, name1, toParams);\n  var node2 = renderTNode(instance, name2, toParams);\n  var r = [void 0, null, \"\"].includes(node1) ? node2 : node1;\n  return [void 0, null, \"\"].includes(r) ? defaultNode : r;\n};\nexport { renderContent, renderTNode };","map":{"version":3,"mappings":";;;;;;;;;AAgBO,IAAMA,WAAc,YAAdA,WAAc,CACzBC,QACA,QACAC,OACQ;EAAA;EACR,IAAID,aAAa,IAAM;IACd,SAAE,IAAI,IAAI;EACnB;EAEA,IAAME,SAASC,OAAOF,cAAY,YAAY,QAAY,cAAUA,QAAQC,MAAS;EACrF,IAAME,cAAcD,OAAOF,cAAY,YAAY,aAAiB,cAAUA,QAAQG,WAAc;EAChG;EACJ,IAAIC,QAAQL,QAAS,UAASM,UAAUD,IAAI,KAAKL,SAASO,KAAO;IAC/DC,YAAYR,SAASO,KAAM,UAASP,QAAS,OAAMM,UAAUD,IAAI;EACnE;EAII,aAASI,MAAMJ,IAAO;IAAA;IACxB,OAAOL,gCAAS,OAAMK,IAAO,0DAAtBK,oBAAsBC,MAAKT,MAAM;EAC1C;EAEI,kBAAc,QAAQE,WAAa;IAAA;IAC9B,gBAASK,MAAMJ,IAAQ,sCAASI,MAAMJ,IAAO,2DAAtBO,qBAAsBD,MAAKT,MAAM,CAAI;EACrE;EAEA,IAAI,OAAOM,SAAc,iBAAmB,iBAAUK,GAAGX,MAAM;EAE/D,IAAMY,eAAe,CAAC,QAAWZ,QAAQ,EAAE,EAAEa,SAASP,SAAS;EAC3D,oBAAgBR,SAASS,KAAM,QAAO,gCAAOT,QAAS,OAAMK,IAAO,2DAAtBW,qBAAsBL,MAAKT,MAAM;EAC3E;AACT;AAYae,iBAAgB,YAAhBA,aAAgB,CAC3BjB,QACA,SACAkB,OACAjB,OACQ;EACR,IAAID,aAAa,IAAM;IACd,SAAE,IAAI,IAAI;EACnB;EACA,IAAME,SAASC,OAAOF,cAAY,YAAY,QAAY,cAAUA,QAAQC,MAAS;EACrF,IAAME,cAAcD,OAAOF,cAAY,YAAY,aAAiB,cAAUA,QAAQG,WAAc;EACpG,IAAMe,QAAW,YAAS;IAAEjB;GAAW;EACvC,IAAMkB,KAAQ,eAAYpB,QAAU,SAAOmB,QAAQ;EACnD,IAAME,KAAQ,eAAYrB,QAAU,SAAOmB,QAAQ;EAC7C,QAAI,CAAC,KAAW,SAAM,EAAE,CAAE,UAASC,KAAK,IAAIC,KAAQ;EACnD,QAAC,QAAW,IAAM,IAAE,EAAEN,QAAS,EAAC,IAAIX,WAAc;AAC3D","names":["renderTNode","instance","options","params","_typeof","defaultNode","name","camelCase","props","propsNode","slots","_instance$slots$name","call","_instance$slots$name2","h","isPropsEmpty","includes","_instance$slots$name3","renderContent","name2","toParams","node1","node2"],"sources":["../../src/shared/render.ts"],"sourcesContent":["import { h, ComponentInternalInstance, Slots, VNode } from 'vue';\nimport camelCase from 'lodash/camelCase';\n\ninterface JSXRenderContext {\n  defaultNode?: VNode;\n  params?: Record<string, any>;\n}\n\n/**\n * 渲染 TNode，props 和 插槽同时处理。与 renderTNodeJSX 区别在于 属性值为 undefined 时会渲染默认节点\n * @param instance 组件示例\n * @param name 插槽和属性名称\n * @param options 缺省插槽内容\n * @example renderTNode(getCurrentInstance(), 'closeBtn')\n * @example renderTNode(getCurrentInstance(), 'closeBtn', <t-icon-close />)。this.closeBtn 为空时，则兜底渲染 <t-icon-close />\n */\nexport const renderTNode = (\n  instance: ComponentInternalInstance | null,\n  name: string,\n  options?: Slots | JSXRenderContext,\n): any => {\n  if (instance === null) {\n    return h('', null);\n  }\n\n  const params = typeof options === 'object' && 'params' in options ? options.params : null;\n  const defaultNode = typeof options === 'object' && 'defaultNode' in options ? options.defaultNode : options;\n  let propsNode: any;\n  if (name in instance.props || camelCase(name) in instance.props) {\n    propsNode = instance.props[name] || instance.props[camelCase(name)];\n  }\n  // if (propsNode === false) return;\n\n  // 同名优先处理插槽\n  if (instance.slots[name]) {\n    return instance.slots[name]?.call(params);\n  }\n\n  if (propsNode === true && defaultNode) {\n    return instance.slots[name] ? instance.slots[name]?.call(params) : defaultNode;\n  }\n\n  if (typeof propsNode === 'function') return propsNode(h, params);\n\n  const isPropsEmpty = [undefined, params, ''].includes(propsNode);\n  if (isPropsEmpty && instance.slots[name]) return instance.slots[name]?.call(params);\n  return propsNode;\n};\n\n/**\n * 用于处理相同名称的 TNode 渲染\n * @param vm 组件实例\n * @param name1 第一个名称，优先级高于 name2\n * @param name2 第二个名称\n * @param defaultNode 默认渲染内容：当 name1 和 name2 都为空时会启动默认内容渲染\n * @example renderContent(this, 'default', 'content')\n * @example renderContent(this, 'default', 'content', '我是默认内容')\n * @example renderContent(this, 'default', 'content', { defaultNode: '我是默认内容', params })\n */\nexport const renderContent = (\n  instance: ComponentInternalInstance | null,\n  name1: string,\n  name2: string,\n  options?: VNode | JSXRenderContext,\n): any => {\n  if (instance === null) {\n    return h('', null);\n  }\n  const params = typeof options === 'object' && 'params' in options ? options.params : null;\n  const defaultNode = typeof options === 'object' && 'defaultNode' in options ? options.defaultNode : options;\n  const toParams = params ? { params } : undefined;\n  const node1 = renderTNode(instance, name1, toParams);\n  const node2 = renderTNode(instance, name2, toParams);\n  const r = [undefined, null, ''].includes(node1) ? node2 : node1;\n  return [undefined, null, ''].includes(r) ? defaultNode : r;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}