{"ast":null,"code":"/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport { defineComponent, computed, watch, ref, resolveComponent, openBlock, createBlock, Teleport, createElementVNode, normalizeClass, normalizeStyle, createVNode, Transition, withCtx, mergeProps, withDirectives, renderSlot, vShow } from 'vue';\nimport popupProps from './props.js';\nimport Overlay from '../overlay/index.js';\nimport config from '../config.js';\nimport '../shared/index.js';\nimport { useEmitEvent } from '../shared/useEmitEvent/index.js';\nimport { useDefault } from '../shared/useDefault/index.js';\nimport '../overlay/overlay.js';\nimport '../overlay/props.js';\nimport './style/css.js';\nimport '../shared/component.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/constants.js';\nimport '../shared/render.js';\nimport '@babel/runtime/helpers/typeof';\nimport 'lodash/camelCase';\nimport '../shared/render-tnode.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-popup\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    TOverlay: Overlay\n  },\n  props: popupProps,\n  emits: [\"open\", \"close\", \"opened\", \"closed\", \"visible-change\", \"update:visible\", \"update:modelValue\"],\n  setup: function setup(props, context) {\n    var emitEvent = useEmitEvent(props, context.emit);\n    var _useDefault = useDefault(props, context.emit, \"visible\", \"visible-change\"),\n      _useDefault2 = _slicedToArray(_useDefault, 1),\n      currentVisible = _useDefault2[0];\n    var rootClasses = computed(function () {\n      return name;\n    });\n    var rootStyles = computed(function () {\n      return props.customStyle || props.zIndex ? (props.customStyle && \"\".concat(props.customStyle, \";\")) + (props.zIndex && \"z-index:\".concat(props.zIndex, \";\")) : void 0;\n    });\n    var contentClasses = computed(function () {\n      var _ref;\n      return _ref = {}, _defineProperty(_ref, \"\".concat(name, \"--content\"), true), _defineProperty(_ref, \"\".concat(name, \"--content-\").concat(props.placement), true), _ref;\n    });\n    var contentTransitionName = computed(function () {\n      var transitionName = props.transitionName,\n        placement = props.placement;\n      if (transitionName) return transitionName;\n      if (placement === \"center\") return \"fade-zoom\";\n      return \"slide-\".concat(placement);\n    });\n    watch(function () {\n      return currentVisible.value;\n    }, function (val) {\n      var cls = \"\".concat(prefix, \"-overflow-hidden\");\n      if (val) {\n        document.body.classList.add(cls);\n        emitEvent(\"open\");\n        currentVisible.value = true;\n      } else {\n        document.body.classList.remove(cls);\n      }\n    });\n    var handleOverlayClick = function handleOverlayClick() {\n      if (!props.closeOnOverlayClick) {\n        return;\n      }\n      emitEvent(\"close\");\n      currentVisible.value = false;\n    };\n    var handleMove = function handleMove(e) {\n      if (props.lockScroll) {\n        e.preventDefault();\n      }\n    };\n    var afterLeave = function afterLeave() {\n      return emitEvent(\"closed\");\n    };\n    var afterEnter = function afterEnter() {\n      return emitEvent(\"opened\");\n    };\n    return {\n      name: ref(name),\n      currentVisible: currentVisible,\n      rootClasses: rootClasses,\n      rootStyles: rootStyles,\n      contentClasses: contentClasses,\n      contentTransitionName: contentTransitionName,\n      afterEnter: afterEnter,\n      afterLeave: afterLeave,\n      handleOverlayClick: handleOverlayClick,\n      handleMove: handleMove\n    };\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_overlay = resolveComponent(\"t-overlay\");\n  return openBlock(), createBlock(Teleport, {\n    to: _ctx.to,\n    disabled: !_ctx.to\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass([_ctx.rootClasses, _ctx.$attrs.class]),\n    style: normalizeStyle(_ctx.rootStyles),\n    onTouchmove: _cache[0] || (_cache[0] = function () {\n      return _ctx.handleMove && _ctx.handleMove.apply(_ctx, arguments);\n    })\n  }, [createVNode(Transition, {\n    name: \"fade\"\n  }, {\n    default: withCtx(function () {\n      return [createVNode(_component_t_overlay, mergeProps(_ctx.overlayProps, {\n        visible: _ctx.currentVisible,\n        transparent: !_ctx.showOverlay,\n        onClick: _ctx.handleOverlayClick\n      }), null, 16, [\"visible\", \"transparent\", \"onClick\"])];\n    }),\n    _: 1\n  }), createVNode(Transition, {\n    name: _ctx.contentTransitionName,\n    onAfterEnter: _ctx.afterEnter,\n    onAfterLeave: _ctx.afterLeave\n  }, {\n    default: withCtx(function () {\n      return [withDirectives(createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.contentClasses)\n      }, [renderSlot(_ctx.$slots, \"default\")], 2), [[vShow, _ctx.currentVisible]])];\n    }),\n    _: 3\n  }, 8, [\"name\", \"onAfterEnter\", \"onAfterLeave\"])], 38)], 8, [\"to\", \"disabled\"]);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,IAAQA,SAAWC,OAAXD;AAER,IAAME,OAAUF;AAEhB,aAAeG,eAAgB;EAC7BD;EACAE,YAAY;IAAEC,QAAS,EAATA;GAAS;EACvBC,KAAO;EACPC,OAAO,CAAC,MAAQ,WAAS,UAAU,QAAU,oBAAkB,kBAAkB,mBAAmB;EACpGC,OAAMF,sBAAOG,OAAuB;IAClC,IAAMC,SAAY,gBAAaJ,KAAO,UAAQK,IAAI;IAC5C,IAAmBC,yBACvBN,OACAG,OAAQ,OACR,WACA,iBACF;MAAAI;MALOC,cAAc;IAOf,kBAAcC,QAAS;MAAA,OAAMb,IAAI;KAAA;IACvC,IAAMc,UAAa,YAAS;MAAA,OAC1BV,MAAMW,WAAe,UAAMC,UACtBZ,KAAM,gBAAkBA,gBAAMW,WAAmB,iBAAMC,MAAU,sBAAWZ,MAAMY,MACnF;KACN;IAEM,qBAAiBH,SAAS;MAAA;MAAA,OAC1Bb,+CAAkB,qBAClBA,sCAAiB,6BAAMiB,SAAc;IAAA,CACzC;IAEI,4BAAwBJ,SAAS,YAAM;MACrC,IAAEK,cAAgB,GAAcd,MAA9Bc,cAAgB;QAAAD,YAAcb,MAAda;MACpB,oBAAuB;MAC3B,IAAIA,SAAc,eAAiB;MACnC,uBAAgBA;IAClB,CAAC;IAEDE,MACE;MAAA,OAAMP,cAAe;KACrB,YAACQ,GAAQ;MACP,IAAMC,MAASvB;MACf,IAAIsB,GAAK;QACEE,cAAKC,SAAU,KAAIF,GAAG;QAC/Bb,UAAU,MAAM;QAChBI,eAAeY,KAAQ;MACzB,CAAO;QACIF,cAAKC,SAAU,QAAOF,GAAG;MACpC;IACF,EACF;IAEA,IAAMI,qBAAqB,SAArBA,qBAA2B;MAC3B,KAACrB,MAAMsB,mBAAqB;QAC9B;MACF;MACAlB,UAAU,OAAO;MACjBI,eAAeY,KAAQ;KACzB;IAEM,iBAAa,SAAbG,WAAcC,CAAkB;MACpC,IAAIxB,MAAMyB,UAAY;QACpBD,EAAEE,cAAe;MACnB;KACF;IAEM,iBAAa,SAAbC;MAAA,OAAmBvB,UAAU,QAAQ;IAAA;IACrC,iBAAa,SAAbwB;MAAA,OAAmBxB,UAAU,QAAQ;IAAA;IAEpC;MACLR,MAAMiC,IAAIjC,IAAI;MACdY;MACAsB;MACApB;MACAqB;MACAC;MACAJ;MACAD;MACAN;MACAE;KACF;EACF;AACF,CAAC;;;oBC5GC,cAgBUU;IAhBCC,IAAIC,IAAE;IAAGC,WAAWD,IAAE;MAC/BE,mBAcK;IAdCC,OAAQC,kCAAaJ,YAAOG,KAAK;IAAIE,qBAAO,MAAU9B;IAAG+B;aAAWN,KAAUZ;IAAA;MAClFmB,WAOY;IAPA9C,MAAK;EAAM;qBACrB;MAAA,OAKC,CALD8C,WAKC,uBALDC,UAKC,MAJqBC;QACnBC,SAASV,IAAc;QACvBW,cAAcX,IAAW;QACzBY,SAAOZ,IAAkB;;;;MAG9BO,YAIYM;IAJCpD,MAAMuC,IAAqB;IAAGc,cAAad,IAAU;IAAGe,cAAaf,IAAU;;qBAC1F;MAAA,OAEK,gBAFLE,mBAEK;QAFyBC,qBAAO,MAAcP;UACjDoB,WAAYhB,qCADD,OAAc3B","names":["prefix","config","name","defineComponent","components","TOverlay","props","emits","setup","context","emitEvent","emit","useDefault","_useDefault2","currentVisible","computed","rootStyles","customStyle","zIndex","placement","transitionName","watch","val","cls","document","classList","value","handleOverlayClick","closeOnOverlayClick","handleMove","e","lockScroll","preventDefault","afterLeave","afterEnter","ref","rootClasses","contentClasses","contentTransitionName","_Teleport","to","_ctx","disabled","_createElementVNode","class","_normalizeClass","style","onTouchmove","_createVNode","_mergeProps","overlayProps","visible","transparent","onClick","_Transition","onAfterEnter","onAfterLeave","_renderSlot"],"sources":["../../src/popup/popup.vue","../../src/popup/popup.vue?vue&type=template&id=3b5ae3b1&lang.js"],"sourcesContent":["<template>\n  <teleport :to=\"to\" :disabled=\"!to\">\n    <div :class=\"[rootClasses, $attrs.class]\" :style=\"rootStyles\" @touchmove=\"handleMove\">\n      <transition name=\"fade\">\n        <t-overlay\n          v-bind=\"overlayProps\"\n          :visible=\"currentVisible\"\n          :transparent=\"!showOverlay\"\n          @click=\"handleOverlayClick\"\n        />\n      </transition>\n      <transition :name=\"contentTransitionName\" @after-enter=\"afterEnter\" @after-leave=\"afterLeave\">\n        <div v-show=\"currentVisible\" :class=\"contentClasses\">\n          <slot></slot>\n        </div>\n      </transition>\n    </div>\n  </teleport>\n</template>\n\n<script lang=\"ts\">\nimport { ref, computed, SetupContext, watch, defineComponent } from 'vue';\nimport popupProps from './props';\nimport TOverlay from '../overlay';\nimport config from '../config';\nimport { TdPopupProps } from './type';\nimport { useDefault, useEmitEvent } from '../shared';\n\nconst { prefix } = config;\n\nconst name = `${prefix}-popup`;\n\nexport default defineComponent({\n  name,\n  components: { TOverlay },\n  props: popupProps,\n  emits: ['open', 'close', 'opened', 'closed', 'visible-change', 'update:visible', 'update:modelValue'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const [currentVisible] = useDefault<TdPopupProps['visible'], TdPopupProps>(\n      props,\n      context.emit,\n      'visible',\n      'visible-change',\n    );\n\n    const rootClasses = computed(() => name);\n    const rootStyles = computed(() =>\n      props.customStyle || props.zIndex\n        ? (props.customStyle && `${props.customStyle};`) + (props.zIndex && `z-index:${props.zIndex};`)\n        : undefined,\n    );\n\n    const contentClasses = computed(() => ({\n      [`${name}--content`]: true,\n      [`${name}--content-${props.placement}`]: true,\n    }));\n\n    const contentTransitionName = computed(() => {\n      const { transitionName, placement } = props;\n      if (transitionName) return transitionName;\n      if (placement === 'center') return 'fade-zoom';\n      return `slide-${placement}`;\n    });\n\n    watch(\n      () => currentVisible.value,\n      (val) => {\n        const cls = `${prefix}-overflow-hidden`;\n        if (val) {\n          document.body.classList.add(cls);\n          emitEvent('open');\n          currentVisible.value = true;\n        } else {\n          document.body.classList.remove(cls);\n        }\n      },\n    );\n\n    const handleOverlayClick = () => {\n      if (!props.closeOnOverlayClick) {\n        return;\n      }\n      emitEvent('close');\n      currentVisible.value = false;\n    };\n\n    const handleMove = (e: TouchEvent) => {\n      if (props.lockScroll) {\n        e.preventDefault();\n      }\n    };\n\n    const afterLeave = () => emitEvent('closed');\n    const afterEnter = () => emitEvent('opened');\n\n    return {\n      name: ref(name),\n      currentVisible,\n      rootClasses,\n      rootStyles,\n      contentClasses,\n      contentTransitionName,\n      afterEnter,\n      afterLeave,\n      handleOverlayClick,\n      handleMove,\n    };\n  },\n});\n</script>\n","<template>\n  <teleport :to=\"to\" :disabled=\"!to\">\n    <div :class=\"[rootClasses, $attrs.class]\" :style=\"rootStyles\" @touchmove=\"handleMove\">\n      <transition name=\"fade\">\n        <t-overlay\n          v-bind=\"overlayProps\"\n          :visible=\"currentVisible\"\n          :transparent=\"!showOverlay\"\n          @click=\"handleOverlayClick\"\n        />\n      </transition>\n      <transition :name=\"contentTransitionName\" @after-enter=\"afterEnter\" @after-leave=\"afterLeave\">\n        <div v-show=\"currentVisible\" :class=\"contentClasses\">\n          <slot></slot>\n        </div>\n      </transition>\n    </div>\n  </teleport>\n</template>\n\n<script lang=\"ts\">\nimport { ref, computed, SetupContext, watch, defineComponent } from 'vue';\nimport popupProps from './props';\nimport TOverlay from '../overlay';\nimport config from '../config';\nimport { TdPopupProps } from './type';\nimport { useDefault, useEmitEvent } from '../shared';\n\nconst { prefix } = config;\n\nconst name = `${prefix}-popup`;\n\nexport default defineComponent({\n  name,\n  components: { TOverlay },\n  props: popupProps,\n  emits: ['open', 'close', 'opened', 'closed', 'visible-change', 'update:visible', 'update:modelValue'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const [currentVisible] = useDefault<TdPopupProps['visible'], TdPopupProps>(\n      props,\n      context.emit,\n      'visible',\n      'visible-change',\n    );\n\n    const rootClasses = computed(() => name);\n    const rootStyles = computed(() =>\n      props.customStyle || props.zIndex\n        ? (props.customStyle && `${props.customStyle};`) + (props.zIndex && `z-index:${props.zIndex};`)\n        : undefined,\n    );\n\n    const contentClasses = computed(() => ({\n      [`${name}--content`]: true,\n      [`${name}--content-${props.placement}`]: true,\n    }));\n\n    const contentTransitionName = computed(() => {\n      const { transitionName, placement } = props;\n      if (transitionName) return transitionName;\n      if (placement === 'center') return 'fade-zoom';\n      return `slide-${placement}`;\n    });\n\n    watch(\n      () => currentVisible.value,\n      (val) => {\n        const cls = `${prefix}-overflow-hidden`;\n        if (val) {\n          document.body.classList.add(cls);\n          emitEvent('open');\n          currentVisible.value = true;\n        } else {\n          document.body.classList.remove(cls);\n        }\n      },\n    );\n\n    const handleOverlayClick = () => {\n      if (!props.closeOnOverlayClick) {\n        return;\n      }\n      emitEvent('close');\n      currentVisible.value = false;\n    };\n\n    const handleMove = (e: TouchEvent) => {\n      if (props.lockScroll) {\n        e.preventDefault();\n      }\n    };\n\n    const afterLeave = () => emitEvent('closed');\n    const afterEnter = () => emitEvent('opened');\n\n    return {\n      name: ref(name),\n      currentVisible,\n      rootClasses,\n      rootStyles,\n      contentClasses,\n      contentTransitionName,\n      afterEnter,\n      afterLeave,\n      handleOverlayClick,\n      handleMove,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}