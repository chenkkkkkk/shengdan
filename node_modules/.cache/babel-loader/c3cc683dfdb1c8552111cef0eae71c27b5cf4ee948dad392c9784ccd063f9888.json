{"ast":null,"code":"/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { defineComponent, getCurrentInstance, inject, computed, ref, watch, nextTick, onMounted, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, renderSlot, createTextVNode, toDisplayString, createCommentVNode, createBlock, resolveDynamicComponent, createVNode } from 'vue';\nimport { ChevronDownIcon, ChevronUpIcon } from 'tdesign-icons-vue-next';\nimport props from './collapse-panel-props.js';\nimport config from '../config.js';\nimport { findIndex } from './util.js';\nimport '../shared/index.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { renderTNode, renderContent } from '../shared/render.js';\nimport '@babel/runtime/helpers/typeof';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useEmitEvent/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-collapse-panel\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    ChevronDownIcon: ChevronDownIcon,\n    ChevronUpIcon: ChevronUpIcon,\n    TNode: TNodeComponent\n  },\n  props: props,\n  setup: function setup(props2, context) {\n    var internalInstance = getCurrentInstance();\n    var parent = inject(\"collapse\");\n    var isTrue = function isTrue(val) {\n      return typeof val === \"boolean\" && val;\n    };\n    var rightIcon = computed(function () {\n      if (props2.expandIcon === false) return;\n      if (isTrue(props2.expandIcon) || isTrue(parent === null || parent === void 0 ? void 0 : parent.expandIcon.value)) {\n        console.log(isTrue(parent === null || parent === void 0 ? void 0 : parent.expandIcon.value));\n        return isActive.value ? ChevronDownIcon : ChevronUpIcon;\n      }\n      return renderTNode(internalInstance, \"expand-icon\")[0];\n    });\n    var disabled = computed(function () {\n      return (parent === null || parent === void 0 ? void 0 : parent.disabled.value) || props2.disabled;\n    });\n    var className = computed(function () {\n      var _ref;\n      return _ref = {}, _defineProperty(_ref, \"\".concat(name), true), _defineProperty(_ref, \"\".concat(name, \"--active\"), isActive.value), _defineProperty(_ref, \"\".concat(name, \"--disabled\"), disabled.value), _ref;\n    });\n    var isActive = computed(function () {\n      return findIndex(props2.value, parent === null || parent === void 0 ? void 0 : parent.activeValue.value) > -1;\n    });\n    var updatePanelValue = function updatePanelValue() {\n      if (props2.value != null) {\n        parent === null || parent === void 0 ? void 0 : parent.onPanelChange(props2.value);\n      }\n    };\n    var handleClick = function handleClick(e) {\n      e === null || e === void 0 ? void 0 : e.stopPropagation();\n      if (disabled.value) {\n        return;\n      }\n      updatePanelValue();\n    };\n    var panelContent = renderContent(internalInstance, \"default\", \"content\");\n    var $body = ref();\n    var $wrap = ref();\n    var $head = ref();\n    var updatePanelState = function updatePanelState() {\n      if (!$wrap.value) {\n        return;\n      }\n      var _$head$value$getBound = $head.value.getBoundingClientRect(),\n        headHeight = _$head$value$getBound.height;\n      if (!isActive.value) {\n        $wrap.value.style.height = \"\".concat(headHeight, \"px\");\n        return;\n      }\n      var _$body$value$getBound = $body.value.getBoundingClientRect(),\n        bodyHeight = _$body$value$getBound.height;\n      var height = headHeight + bodyHeight;\n      $wrap.value.style.height = \"\".concat(height, \"px\");\n    };\n    watch(isActive, function () {\n      nextTick(function () {\n        updatePanelState();\n      });\n    });\n    onMounted(function () {\n      if (parent !== null && parent !== void 0 && parent.defaultExpandAll) {\n        updatePanelValue();\n      }\n      updatePanelState();\n    });\n    return {\n      classPrefix: name,\n      rightIcon: rightIcon,\n      $head: $head,\n      $body: $body,\n      $wrap: $wrap,\n      className: className,\n      handleClick: handleClick,\n      panelContent: panelContent\n    };\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_node = resolveComponent(\"t-node\");\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"$wrap\",\n    class: normalizeClass(_ctx.className)\n  }, [createElementVNode(\"div\", {\n    ref: \"$head\",\n    class: normalizeClass(\"\".concat(_ctx.classPrefix, \"__header\")),\n    onClick: _cache[0] || (_cache[0] = function () {\n      return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);\n    })\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.classPrefix, \"__title\"))\n  }, [renderSlot(_ctx.$slots, \"header\", {}, function () {\n    return [createTextVNode(toDisplayString(_ctx.header), 1)];\n  })], 2), createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.classPrefix, \"__header-right\"))\n  }, [_ctx.headerRightContent || _ctx.$slots.headerRightContent ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.classPrefix, \"__header-extra\"))\n  }, [renderSlot(_ctx.$slots, \"headerRightContent\", {}, function () {\n    return [createTextVNode(toDisplayString(_ctx.headerRightContent), 1)];\n  })], 2)) : createCommentVNode(\"\", true), (openBlock(), createBlock(resolveDynamicComponent(_ctx.rightIcon), {\n    class: normalizeClass(\"\".concat(_ctx.classPrefix, \"__header-icon\"))\n  }, null, 8, [\"class\"]))], 2)], 2), createElementVNode(\"div\", {\n    ref: \"$body\",\n    class: normalizeClass(\"\".concat(_ctx.classPrefix, \"__body\"))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.panelContent\n  }, null, 8, [\"content\"])], 2)], 2);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":"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","names":["prefix","config","name","defineComponent","components","ChevronDownIcon","ChevronUpIcon","TNode","props","setup","context","internalInstance","getCurrentInstance","inject","isTrue","val","computed","expandIcon","parent","value","console","log","disabled","isActive","findIndex","updatePanelValue","handleClick","e","stopPropagation","panelContent","$body","ref","$wrap","$head","updatePanelState","getBoundingClientRect","headHeight","height","style","bodyHeight","watch","nextTick","onMounted","defaultExpandAll","classPrefix","rightIcon","className","class","_createElementVNode","_ctx","onClick","_renderSlot","headerRightContent","_createElementBlock","_openBlock","_resolveDynamicComponent","_createVNode","_component_t_node","content"],"sources":["../../src/collapse/collapse-panel.vue","../../src/collapse/collapse-panel.vue?vue&type=template&id=50e4b8fe&lang.js"],"sourcesContent":["<template>\n  <div ref=\"$wrap\" :class=\"className\">\n    <div ref=\"$head\" :class=\"`${classPrefix}__header`\" @click=\"handleClick\">\n      <div :class=\"`${classPrefix}__title`\">\n        <slot name=\"header\">{{ header }}</slot>\n      </div>\n      <div :class=\"`${classPrefix}__header-right`\">\n        <div v-if=\"headerRightContent || $slots.headerRightContent\" :class=\"`${classPrefix}__header-extra`\">\n          <slot name=\"headerRightContent\">{{ headerRightContent }}</slot>\n        </div>\n        <component :is=\"rightIcon\" :class=\"`${classPrefix}__header-icon`\" />\n      </div>\n    </div>\n    <div ref=\"$body\" :class=\"`${classPrefix}__body`\">\n      <t-node :content=\"panelContent\"></t-node>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  ref,\n  computed,\n  nextTick,\n  watch,\n  onMounted,\n  inject,\n  SetupContext,\n  defineComponent,\n  getCurrentInstance,\n} from 'vue';\nimport { ChevronDownIcon, ChevronUpIcon } from 'tdesign-icons-vue-next';\nimport props from './collapse-panel-props';\nimport config from '../config';\nimport { findIndex } from './util';\nimport { renderTNode, renderContent, TNode } from '../shared';\nimport { CollapseProvide } from './collapse.vue';\n\nconst { prefix } = config;\nconst name = `${prefix}-collapse-panel`;\nexport default defineComponent({\n  name,\n  components: { ChevronDownIcon, ChevronUpIcon, TNode },\n  props,\n  setup(props, context: SetupContext) {\n    const internalInstance = getCurrentInstance();\n    const parent = inject<CollapseProvide>('collapse');\n    const isTrue = (val: any) => typeof val === 'boolean' && val;\n\n    const rightIcon = computed(() => {\n      if (props.expandIcon === false) return;\n      if (isTrue(props.expandIcon) || isTrue(parent?.expandIcon.value)) {\n        console.log(isTrue(parent?.expandIcon.value));\n\n        return isActive.value ? ChevronDownIcon : ChevronUpIcon;\n      }\n      return renderTNode(internalInstance, 'expand-icon')[0];\n    });\n    const disabled = computed(() => parent?.disabled.value || props.disabled);\n    const className = computed(() => ({\n      [`${name}`]: true,\n      [`${name}--active`]: isActive.value,\n      [`${name}--disabled`]: disabled.value,\n    }));\n    const isActive = computed(() => findIndex(props.value, parent?.activeValue.value) > -1);\n    const updatePanelValue = () => {\n      if (props.value != null) {\n        parent?.onPanelChange(props.value);\n      }\n    };\n    const handleClick = (e: MouseEvent) => {\n      e?.stopPropagation();\n      if (disabled.value) {\n        return;\n      }\n      updatePanelValue();\n    };\n    const panelContent = renderContent(internalInstance, 'default', 'content');\n\n    // 设置折叠/展开高度过渡\n    const $body = ref();\n    const $wrap = ref();\n    const $head = ref();\n    const updatePanelState = () => {\n      if (!$wrap.value) {\n        // console.log('[collapse] 组件尚未挂载', $wrap.value);\n        return;\n      }\n      const { height: headHeight } = $head.value.getBoundingClientRect();\n      if (!isActive.value) {\n        $wrap.value.style.height = `${headHeight}px`;\n        return;\n      }\n      const { height: bodyHeight } = $body.value.getBoundingClientRect();\n      const height = headHeight + bodyHeight;\n      $wrap.value.style.height = `${height}px`;\n    };\n\n    watch(isActive, () => {\n      nextTick(() => {\n        updatePanelState();\n      });\n    });\n\n    onMounted(() => {\n      if (parent?.defaultExpandAll) {\n        updatePanelValue();\n      }\n      updatePanelState();\n    });\n\n    return {\n      classPrefix: name,\n      rightIcon,\n      $head,\n      $body,\n      $wrap,\n      className,\n      handleClick,\n      panelContent,\n    };\n  },\n});\n</script>\n","<template>\n  <div ref=\"$wrap\" :class=\"className\">\n    <div ref=\"$head\" :class=\"`${classPrefix}__header`\" @click=\"handleClick\">\n      <div :class=\"`${classPrefix}__title`\">\n        <slot name=\"header\">{{ header }}</slot>\n      </div>\n      <div :class=\"`${classPrefix}__header-right`\">\n        <div v-if=\"headerRightContent || $slots.headerRightContent\" :class=\"`${classPrefix}__header-extra`\">\n          <slot name=\"headerRightContent\">{{ headerRightContent }}</slot>\n        </div>\n        <component :is=\"rightIcon\" :class=\"`${classPrefix}__header-icon`\" />\n      </div>\n    </div>\n    <div ref=\"$body\" :class=\"`${classPrefix}__body`\">\n      <t-node :content=\"panelContent\"></t-node>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  ref,\n  computed,\n  nextTick,\n  watch,\n  onMounted,\n  inject,\n  SetupContext,\n  defineComponent,\n  getCurrentInstance,\n} from 'vue';\nimport { ChevronDownIcon, ChevronUpIcon } from 'tdesign-icons-vue-next';\nimport props from './collapse-panel-props';\nimport config from '../config';\nimport { findIndex } from './util';\nimport { renderTNode, renderContent, TNode } from '../shared';\nimport { CollapseProvide } from './collapse.vue';\n\nconst { prefix } = config;\nconst name = `${prefix}-collapse-panel`;\nexport default defineComponent({\n  name,\n  components: { ChevronDownIcon, ChevronUpIcon, TNode },\n  props,\n  setup(props, context: SetupContext) {\n    const internalInstance = getCurrentInstance();\n    const parent = inject<CollapseProvide>('collapse');\n    const isTrue = (val: any) => typeof val === 'boolean' && val;\n\n    const rightIcon = computed(() => {\n      if (props.expandIcon === false) return;\n      if (isTrue(props.expandIcon) || isTrue(parent?.expandIcon.value)) {\n        console.log(isTrue(parent?.expandIcon.value));\n\n        return isActive.value ? ChevronDownIcon : ChevronUpIcon;\n      }\n      return renderTNode(internalInstance, 'expand-icon')[0];\n    });\n    const disabled = computed(() => parent?.disabled.value || props.disabled);\n    const className = computed(() => ({\n      [`${name}`]: true,\n      [`${name}--active`]: isActive.value,\n      [`${name}--disabled`]: disabled.value,\n    }));\n    const isActive = computed(() => findIndex(props.value, parent?.activeValue.value) > -1);\n    const updatePanelValue = () => {\n      if (props.value != null) {\n        parent?.onPanelChange(props.value);\n      }\n    };\n    const handleClick = (e: MouseEvent) => {\n      e?.stopPropagation();\n      if (disabled.value) {\n        return;\n      }\n      updatePanelValue();\n    };\n    const panelContent = renderContent(internalInstance, 'default', 'content');\n\n    // 设置折叠/展开高度过渡\n    const $body = ref();\n    const $wrap = ref();\n    const $head = ref();\n    const updatePanelState = () => {\n      if (!$wrap.value) {\n        // console.log('[collapse] 组件尚未挂载', $wrap.value);\n        return;\n      }\n      const { height: headHeight } = $head.value.getBoundingClientRect();\n      if (!isActive.value) {\n        $wrap.value.style.height = `${headHeight}px`;\n        return;\n      }\n      const { height: bodyHeight } = $body.value.getBoundingClientRect();\n      const height = headHeight + bodyHeight;\n      $wrap.value.style.height = `${height}px`;\n    };\n\n    watch(isActive, () => {\n      nextTick(() => {\n        updatePanelState();\n      });\n    });\n\n    onMounted(() => {\n      if (parent?.defaultExpandAll) {\n        updatePanelValue();\n      }\n      updatePanelState();\n    });\n\n    return {\n      classPrefix: name,\n      rightIcon,\n      $head,\n      $body,\n      $wrap,\n      className,\n      handleClick,\n      panelContent,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}