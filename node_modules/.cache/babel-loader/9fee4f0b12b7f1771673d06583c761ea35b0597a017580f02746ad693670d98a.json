{"ast":null,"code":"/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { defineComponent, getCurrentInstance, h, computed, ref, watchEffect, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, createCommentVNode, createElementVNode, normalizeStyle } from 'vue';\nimport { useIntersectionObserver } from '@vueuse/core';\nimport { CloseIcon, EllipsisIcon } from 'tdesign-icons-vue-next';\nimport '../shared/index.js';\nimport ImageProps from './props.js';\nimport config from '../config.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { useEmitEvent } from '../shared/useEmitEvent/index.js';\nimport { renderTNode } from '../shared/render.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/typeof';\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-image\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    TNode: TNodeComponent\n  },\n  props: ImageProps,\n  setup: function setup(props, context) {\n    var emitEvent = useEmitEvent(props, context.emit);\n    var internalInstance = getCurrentInstance();\n    var closeIcon = h(CloseIcon);\n    var ellipsisIcon = h(EllipsisIcon);\n    var statusContent = computed(function () {\n      var _context$slots, _context$slots2, _context$slots3, _context$slots4;\n      if ((_context$slots = context.slots) !== null && _context$slots !== void 0 && _context$slots.loading && loadingValue.value) {\n        return renderTNode(internalInstance, \"loading\");\n      }\n      if (!((_context$slots2 = context.slots) !== null && _context$slots2 !== void 0 && _context$slots2.loading) && loadingValue.value) {\n        return ellipsisIcon;\n      }\n      if ((_context$slots3 = context.slots) !== null && _context$slots3 !== void 0 && _context$slots3.error && errorValue.value) {\n        return renderTNode(internalInstance, \"error\");\n      }\n      if (!((_context$slots4 = context.slots) !== null && _context$slots4 !== void 0 && _context$slots4.error) && errorValue.value) {\n        return closeIcon;\n      }\n      return \"\";\n    });\n    var loadingValue = ref(true);\n    var errorValue = ref(false);\n    var imageStyles = computed(function () {\n      return {\n        objectFit: props.fit,\n        objectPosition: props.position\n      };\n    });\n    var classes = computed(function () {\n      var _ref;\n      return _ref = {}, _defineProperty(_ref, \"\".concat(name), true), _defineProperty(_ref, \"\".concat(name, \"--\").concat(props.shape), true), _ref;\n    });\n    var imageDOM = ref();\n    var realSrc = ref(\"\");\n    watchEffect(function () {\n      realSrc.value = props.lazy ? \"\" : props.src;\n    });\n    var _useIntersectionObser = useIntersectionObserver(imageDOM, function (_ref2, observerElement) {\n        var _ref3 = _slicedToArray(_ref2, 1),\n          isIntersecting = _ref3[0].isIntersecting;\n        if (isIntersecting && props.lazy) {\n          stop();\n          realSrc.value = props.src;\n        }\n      }),\n      stop = _useIntersectionObser.stop;\n    var handleImgLoadCompleted = function handleImgLoadCompleted(e) {\n      emitEvent(\"load\", e);\n      loadingValue.value = false;\n    };\n    var handleImgLoadError = function handleImgLoadError(e) {\n      if (realSrc.value === \"\") {\n        return;\n      }\n      emitEvent(\"error\", e);\n      loadingValue.value = false;\n      errorValue.value = true;\n    };\n    return {\n      imageDOM: imageDOM,\n      statusContent: statusContent,\n      name: name,\n      classes: classes,\n      imageStyles: imageStyles,\n      loadingValue: loadingValue,\n      realSrc: realSrc,\n      errorValue: errorValue,\n      handleImgLoadCompleted: handleImgLoadCompleted,\n      handleImgLoadError: handleImgLoadError\n    };\n  }\n});\nvar _hoisted_1 = [\"src\", \"alt\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_node = resolveComponent(\"t-node\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.classes)\n  }, [_ctx.loadingValue || _ctx.errorValue ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__status\"))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.statusContent\n  }, null, 8, [\"content\"])], 2)) : createCommentVNode(\"\", true), createElementVNode(\"img\", {\n    ref: \"imageDOM\",\n    class: normalizeClass(\"\".concat(_ctx.name, \"__img\")),\n    style: normalizeStyle(_ctx.imageStyles),\n    src: _ctx.realSrc,\n    alt: _ctx.alt,\n    onLoad: _cache[0] || (_cache[0] = function () {\n      return _ctx.handleImgLoadCompleted && _ctx.handleImgLoadCompleted.apply(_ctx, arguments);\n    }),\n    onError: _cache[1] || (_cache[1] = function () {\n      return _ctx.handleImgLoadError && _ctx.handleImgLoadError.apply(_ctx, arguments);\n    })\n  }, null, 46, _hoisted_1)], 2);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAQA,SAAWC,OAAXD;AACR,IAAME,OAAUF;AAEhB,aAAeG,eAAgB;EAC7BD;EACAE,YAAY;IAAEC,KAAM,EAANA;GAAM;EACpBC,KAAO;EACPC,OAAMD,sBAAOE,OAAuB;IAClC,IAAMC,SAAY,gBAAaH,KAAO,UAAQI,IAAI;IAGlD,IAAMC,mBAAmBC,kBAAmB;IAEtC,gBAAYC,EAAEC,SAAS;IACvB,mBAAeD,EAAEE,YAAY;IAC7B,oBAAgBC,SAAS,YAAM;MAAA;MACnC,IAAI,yBAAQ,iDAARC,cAAeC,QAAW,iBAAaC,KAAO;QACzC,mBAAYR,kBAAkB,SAAS;MAChD;MACA,IAAI,qBAACH,QAAQY,KAAO,4CAAfC,eAAeH,SAAWI,iBAAaH,KAAO;QAC1C;MACT;MACA,IAAI,0BAAQ,kDAARI,eAAeC,MAAS,eAAWL,KAAO;QACrC,mBAAYR,kBAAkB,OAAO;MAC9C;MACA,IAAI,qBAACH,QAAQY,KAAO,4CAAfK,eAAeD,OAASE,eAAWP,KAAO;QACtC;MACT;MACO;IACT,CAAC;IAGK,mBAAeQ,IAAI,IAAI;IACvB,iBAAaA,IAAI,KAAK;IAGtB,kBAAcX,SAAS,YAAM;MAC1B;QACLY,WAAWtB,KAAM;QACjBuB,gBAAgBvB,KAAM;OACxB;IACF,CAAC;IACK,cAAUU,SAAS;MAAA;MAAA,OACnBd,+CAAS,QACTA,sCAAS,qBAAM4B,KAAU;IAAA,CAC7B;IAGF,IAAMC,WAAWJ,GAAI;IACf,cAAUA,IAAI,EAAE;IACtBK,YAAY,YAAM;MAChBC,QAAQd,KAAQ,SAAMe,IAAO,QAAK5B,KAAM;IAC1C,CAAC;IACK,4BAAW6B,uBAAwB,WAAU,iBAAuBC,eAAoB;QAAA;UAAvCC;QACjD,sBAAkB/B,MAAM4B,IAAM;UAE3BI;UACLL,QAAQd,QAAQb,KAAM;QACxB;MACF,CAAC;MANOgC,IAAK,yBAALA,IAAK;IASP,6BAAyB,SAAzBC,uBAA0BC,CAAa;MAC3C/B,UAAU,QAAQ+B,CAAC;MACnBlB,aAAaH,KAAQ;KACvB;IAGM,yBAAqB,SAArBsB,mBAAsBD,CAAa;MACnC,YAAQrB,UAAU,EAAI;QACxB;MACF;MACAV,UAAU,SAAS+B,CAAC;MACpBlB,aAAaH,KAAQ;MACrBO,WAAWP,KAAQ;KACrB;IACO;MACLY;MACAW;MACAxC;MACAyC;MACAC;MACAtB;MACAW;MACAP;MACAa;MACAE;KACF;EACF;AACF,CAAC;;;;oBCjHC,qBAaK;IAbCI,qBAAO,MAAOF;MACPG,iBAAgB,SAAUpB,2BAArCqB,mBAEK;;IAFmCF,sBAAUC,eAAI5C;MACpD8C,YAAkCC;IAAzBC,OAAS,OAAaR;GAAA,8DAEjCS,mBAQC;IAPCxB,GAAI;IACHkB,gCAAUC,KAAI5C;IACdkD,qBAAO,MAAWR;IAClBS,KAAKP,IAAO;IACZQ,KAAKR,IAAG;IACRS;aAAMT,KAAsBP;KAAA;IAC5BiB;aAAOV,KAAkBL;IAAA","names":["prefix","config","name","defineComponent","components","TNode","props","setup","context","emitEvent","emit","internalInstance","getCurrentInstance","h","CloseIcon","EllipsisIcon","computed","_context$slots","loading","value","slots","_context$slots2","loadingValue","_context$slots3","error","_context$slots4","errorValue","ref","objectFit","objectPosition","shape","imageDOM","watchEffect","realSrc","lazy","useIntersectionObserver","observerElement","isIntersecting","stop","handleImgLoadCompleted","e","handleImgLoadError","statusContent","classes","imageStyles","class","_ctx","_createElementBlock","_createVNode","_component_t_node","content","_createElementVNode","style","src","alt","onLoad","onError"],"sources":["../../src/image/image.vue","../../src/image/image.vue?vue&type=template&id=0a2c36d2&lang.js"],"sourcesContent":["<template>\n  <div :class=\"classes\">\n    <div v-if=\"loadingValue || errorValue\" :class=\"`${name}__status`\">\n      <t-node :content=\"statusContent\" />\n    </div>\n    <img\n      ref=\"imageDOM\"\n      :class=\"`${name}__img`\"\n      :style=\"imageStyles\"\n      :src=\"realSrc\"\n      :alt=\"alt\"\n      @load=\"handleImgLoadCompleted\"\n      @error=\"handleImgLoadError\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ref, computed, defineComponent, SetupContext, getCurrentInstance, h, watchEffect } from 'vue';\nimport { useIntersectionObserver } from '@vueuse/core';\nimport { EllipsisIcon, CloseIcon } from 'tdesign-icons-vue-next';\nimport { useEmitEvent, renderTNode, TNode } from '../shared';\nimport ImageProps from './props';\nimport config from '../config';\n\nconst { prefix } = config;\nconst name = `${prefix}-image`;\n\nexport default defineComponent({\n  name,\n  components: { TNode },\n  props: ImageProps,\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n\n    // 默认loading和error状态展示，slot支持Node和Function\n    const internalInstance = getCurrentInstance();\n\n    const closeIcon = h(CloseIcon);\n    const ellipsisIcon = h(EllipsisIcon);\n    const statusContent = computed(() => {\n      if (context.slots?.loading && loadingValue.value) {\n        return renderTNode(internalInstance, 'loading');\n      }\n      if (!context.slots?.loading && loadingValue.value) {\n        return ellipsisIcon;\n      }\n      if (context.slots?.error && errorValue.value) {\n        return renderTNode(internalInstance, 'error');\n      }\n      if (!context.slots?.error && errorValue.value) {\n        return closeIcon;\n      }\n      return '';\n    });\n\n    // 记录图片的loading、error状态\n    const loadingValue = ref(true);\n    const errorValue = ref(false);\n\n    // 图片自定义样式\n    const imageStyles = computed(() => {\n      return {\n        objectFit: props.fit,\n        objectPosition: props.position,\n      };\n    });\n    const classes = computed(() => ({\n      [`${name}`]: true,\n      [`${name}--${props.shape}`]: true,\n    }));\n\n    // 图片懒加载\n    const imageDOM = ref();\n    const realSrc = ref('');\n    watchEffect(() => {\n      realSrc.value = props.lazy ? '' : props.src;\n    });\n    const { stop } = useIntersectionObserver(imageDOM, ([{ isIntersecting }], observerElement) => {\n      if (isIntersecting && props.lazy) {\n        // 停止监听\n        stop();\n        realSrc.value = props.src;\n      }\n    });\n\n    // 图片加载完成回调\n    const handleImgLoadCompleted = (e: Event) => {\n      emitEvent('load', e);\n      loadingValue.value = false;\n    };\n\n    // 图片加载失败回调\n    const handleImgLoadError = (e: Event) => {\n      if (realSrc.value === '') {\n        return;\n      }\n      emitEvent('error', e);\n      loadingValue.value = false;\n      errorValue.value = true;\n    };\n    return {\n      imageDOM,\n      statusContent,\n      name,\n      classes,\n      imageStyles,\n      loadingValue,\n      realSrc,\n      errorValue,\n      handleImgLoadCompleted,\n      handleImgLoadError,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"classes\">\n    <div v-if=\"loadingValue || errorValue\" :class=\"`${name}__status`\">\n      <t-node :content=\"statusContent\" />\n    </div>\n    <img\n      ref=\"imageDOM\"\n      :class=\"`${name}__img`\"\n      :style=\"imageStyles\"\n      :src=\"realSrc\"\n      :alt=\"alt\"\n      @load=\"handleImgLoadCompleted\"\n      @error=\"handleImgLoadError\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ref, computed, defineComponent, SetupContext, getCurrentInstance, h, watchEffect } from 'vue';\nimport { useIntersectionObserver } from '@vueuse/core';\nimport { EllipsisIcon, CloseIcon } from 'tdesign-icons-vue-next';\nimport { useEmitEvent, renderTNode, TNode } from '../shared';\nimport ImageProps from './props';\nimport config from '../config';\n\nconst { prefix } = config;\nconst name = `${prefix}-image`;\n\nexport default defineComponent({\n  name,\n  components: { TNode },\n  props: ImageProps,\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n\n    // 默认loading和error状态展示，slot支持Node和Function\n    const internalInstance = getCurrentInstance();\n\n    const closeIcon = h(CloseIcon);\n    const ellipsisIcon = h(EllipsisIcon);\n    const statusContent = computed(() => {\n      if (context.slots?.loading && loadingValue.value) {\n        return renderTNode(internalInstance, 'loading');\n      }\n      if (!context.slots?.loading && loadingValue.value) {\n        return ellipsisIcon;\n      }\n      if (context.slots?.error && errorValue.value) {\n        return renderTNode(internalInstance, 'error');\n      }\n      if (!context.slots?.error && errorValue.value) {\n        return closeIcon;\n      }\n      return '';\n    });\n\n    // 记录图片的loading、error状态\n    const loadingValue = ref(true);\n    const errorValue = ref(false);\n\n    // 图片自定义样式\n    const imageStyles = computed(() => {\n      return {\n        objectFit: props.fit,\n        objectPosition: props.position,\n      };\n    });\n    const classes = computed(() => ({\n      [`${name}`]: true,\n      [`${name}--${props.shape}`]: true,\n    }));\n\n    // 图片懒加载\n    const imageDOM = ref();\n    const realSrc = ref('');\n    watchEffect(() => {\n      realSrc.value = props.lazy ? '' : props.src;\n    });\n    const { stop } = useIntersectionObserver(imageDOM, ([{ isIntersecting }], observerElement) => {\n      if (isIntersecting && props.lazy) {\n        // 停止监听\n        stop();\n        realSrc.value = props.src;\n      }\n    });\n\n    // 图片加载完成回调\n    const handleImgLoadCompleted = (e: Event) => {\n      emitEvent('load', e);\n      loadingValue.value = false;\n    };\n\n    // 图片加载失败回调\n    const handleImgLoadError = (e: Event) => {\n      if (realSrc.value === '') {\n        return;\n      }\n      emitEvent('error', e);\n      loadingValue.value = false;\n      errorValue.value = true;\n    };\n    return {\n      imageDOM,\n      statusContent,\n      name,\n      classes,\n      imageStyles,\n      loadingValue,\n      realSrc,\n      errorValue,\n      handleImgLoadCompleted,\n      handleImgLoadError,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}