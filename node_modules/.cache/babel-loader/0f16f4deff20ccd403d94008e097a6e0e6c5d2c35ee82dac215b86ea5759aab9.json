{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport { defineComponent, computed, provide, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, createCommentVNode, renderSlot } from 'vue';\nimport '../shared/index.js';\nimport RadioGroupProps from '../radio/radio-group-props.js';\nimport script$1 from '../radio/radio.js';\nimport config from '../config.js';\nimport { useDefault } from '../shared/useDefault/index.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/render.js';\nimport '@babel/runtime/helpers/typeof';\nimport 'lodash/camelCase';\nimport '../shared/render-tnode.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useEmitEvent/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport 'tdesign-icons-vue-next';\nimport '../radio/props.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar componentName = \"\".concat(prefix, \"-radio-group\");\nvar script = defineComponent({\n  name: componentName,\n  components: {\n    Radio: script$1\n  },\n  props: RadioGroupProps,\n  emits: [\"update:value\", \"update:modelValue\", \"change\"],\n  setup: function setup(props, context) {\n    var _useDefault = useDefault(props, context.emit, \"value\", \"change\"),\n      _useDefault2 = _slicedToArray(_useDefault, 2),\n      groupValue = _useDefault2[0],\n      setGroupValue = _useDefault2[1];\n    var groupOptions = computed(function () {\n      var _props$options;\n      return (_props$options = props.options) === null || _props$options === void 0 ? void 0 : _props$options.map(function (option) {\n        var opt = option;\n        if (typeof option === \"string\" || typeof option === \"number\") {\n          opt = {\n            value: option,\n            label: option.toString()\n          };\n        }\n        return opt;\n      });\n    });\n    var handleRadioChange = function handleRadioChange(val, e) {\n      setGroupValue(val, {\n        e: e\n      });\n    };\n    provide(\"rootGroupProps\", props);\n    provide(\"rootGroupValue\", groupValue);\n    provide(\"rootGroupChange\", handleRadioChange);\n    return _objectSpread(_objectSpread({}, toRefs(props)), {}, {\n      componentName: componentName,\n      groupOptions: groupOptions\n    });\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_radio = resolveComponent(\"radio\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.componentName),\n    role: \"radiogroup\"\n  }, [_ctx.options ? (openBlock(true), createElementBlock(Fragment, {\n    key: 0\n  }, renderList(_ctx.groupOptions, function (opt, idx) {\n    return openBlock(), createBlock(_component_radio, {\n      key: \"radio-group-options-\".concat(idx, \"-\").concat(Math.random()),\n      name: _ctx.name,\n      checked: _ctx.value === opt.value,\n      disabled: \"disabled\" in opt ? opt.disabled : _ctx.disabled,\n      value: opt.value,\n      label: opt.label\n    }, null, 8, [\"name\", \"checked\", \"disabled\", \"value\", \"label\"]);\n  }), 128)) : createCommentVNode(\"\", true), !_ctx.options ? renderSlot(_ctx.$slots, \"default\", {\n    key: 1\n  }) : createCommentVNode(\"\", true)], 2);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAQA,SAAWC,OAAXD;AACR,IAAME,gBAAmBF;AAEzB,aAAeG,eAAgB;EAC7BC,IAAM;EACNC,YAAY;IAAEC,KAAM,EAANA;GAAM;EACpBC,KAAO;EACPC,KAAO,GAAC,cAAgB,uBAAqB,QAAQ;EACrDC,OAAMF,sBAAOG,OAAuB;IAC5B,IAA8BC,yBAClCJ,OACAG,OAAQ,OACR,SACA,SACF;MAAAE;MALOC,UAAY;MAAAC,aAAa;IAM1B,mBAAeC,SAAS,YAAM;MAAA;MAClC,OAAOR,uBAAM,2DAANS,eAAeC,GAAI,WAACC,MAAwB;QACjD,IAAIC,GAAM;QACV,IAAI,OAAOD,WAAW,QAAY,WAAOA,WAAW,QAAU;UAC5DC,MAAM;YAAEC,KAAO;YAAQC,KAAO,SAAOC;WAAW;QAClD;QACO;MACT,CAAC;IACH,CAAC;IACK,wBAAoB,SAApBC,kBAAqBC,KAAiBC,CAAa;MACzCX,mBAAK;QAAEW;MAAE,CAAC;KAC1B;IACAC,QAAQ,kBAAkBnB,KAAK;IAC/BmB,QAAQ,kBAAkBb,UAAU;IACpCa,QAAQ,mBAAmBH,iBAAiB;IACrC,OACFI,uCAAOpB,KAAK;MACfL;MACA0B;IAAA;EAEJ;AACF,CAAC;;;oBC5DC,qBAaK;IAbCC,qBAAO,MAAa3B;IAAE4B,IAAK;MACfC,KAAOC,OACrB,wCAQQC,QAPe;IAAAC;KAAAC,4BAAb,iBAAKC,GAAG;sBADlB,cAQQC;MANLH,GAA4B,mCAAO,mBAAKI,MAAM;MAC9ClC,MAAM2B,IAAI;MACVQ,SAASR,eAAUZ,GAAI;MACvBqB,wBAAwBrB,GAAM,OAAIqB,WAAWT,IAAQ;MACrDX,OAAOD,GAAI;MACXE,OAAOF,GAAI;;6CAGHY,KAAOC,OAApB,cAA4BD;IAAAG;GAAA","names":["prefix","config","componentName","defineComponent","name","components","Radio","props","emits","setup","context","useDefault","_useDefault2","groupValue","setGroupValue","computed","_props$options","map","option","opt","value","label","toString","handleRadioChange","val","e","provide","toRefs","groupOptions","class","role","_ctx","options","_Fragment","key","_renderList","idx","_component_radio","random","checked","disabled"],"sources":["../../src/radio-group/radio-group.vue","../../src/radio-group/radio-group.vue?vue&type=template&id=63ba94bd&lang.js"],"sourcesContent":["<template>\n  <div :class=\"componentName\" role=\"radiogroup\">\n    <template v-if=\"options\">\n      <radio\n        v-for=\"(opt, idx) in groupOptions\"\n        :key=\"`radio-group-options-${idx}-${Math.random()}`\"\n        :name=\"name\"\n        :checked=\"value === opt.value\"\n        :disabled=\"'disabled' in opt ? opt.disabled : disabled\"\n        :value=\"opt.value\"\n        :label=\"opt.label\"\n      ></radio>\n    </template>\n    <slot v-if=\"!options\"></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { provide, defineComponent, toRefs, computed, SetupContext } from 'vue';\nimport { useDefault } from '../shared';\nimport RadioGroupProps from '../radio/radio-group-props';\nimport { RadioOption, RadioOptionObj, RadioValue, TdRadioGroupProps } from '../radio/type';\nimport Radio from '../radio/radio.vue';\nimport config from '../config';\n\nconst { prefix } = config;\nconst componentName = `${prefix}-radio-group`;\n\nexport default defineComponent({\n  name: componentName,\n  components: { Radio },\n  props: RadioGroupProps,\n  emits: ['update:value', 'update:modelValue', 'change'],\n  setup(props, context: SetupContext) {\n    const [groupValue, setGroupValue] = useDefault<RadioValue, TdRadioGroupProps>(\n      props,\n      context.emit,\n      'value',\n      'change',\n    );\n    const groupOptions = computed(() => {\n      return props.options?.map((option: RadioOption) => {\n        let opt = option as RadioOptionObj;\n        if (typeof option === 'string' || typeof option === 'number') {\n          opt = { value: option, label: option.toString() };\n        }\n        return opt;\n      });\n    });\n    const handleRadioChange = (val: RadioValue, e: Event) => {\n      setGroupValue(val, { e });\n    };\n    provide('rootGroupProps', props);\n    provide('rootGroupValue', groupValue);\n    provide('rootGroupChange', handleRadioChange);\n    return {\n      ...toRefs(props),\n      componentName,\n      groupOptions,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"componentName\" role=\"radiogroup\">\n    <template v-if=\"options\">\n      <radio\n        v-for=\"(opt, idx) in groupOptions\"\n        :key=\"`radio-group-options-${idx}-${Math.random()}`\"\n        :name=\"name\"\n        :checked=\"value === opt.value\"\n        :disabled=\"'disabled' in opt ? opt.disabled : disabled\"\n        :value=\"opt.value\"\n        :label=\"opt.label\"\n      ></radio>\n    </template>\n    <slot v-if=\"!options\"></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { provide, defineComponent, toRefs, computed, SetupContext } from 'vue';\nimport { useDefault } from '../shared';\nimport RadioGroupProps from '../radio/radio-group-props';\nimport { RadioOption, RadioOptionObj, RadioValue, TdRadioGroupProps } from '../radio/type';\nimport Radio from '../radio/radio.vue';\nimport config from '../config';\n\nconst { prefix } = config;\nconst componentName = `${prefix}-radio-group`;\n\nexport default defineComponent({\n  name: componentName,\n  components: { Radio },\n  props: RadioGroupProps,\n  emits: ['update:value', 'update:modelValue', 'change'],\n  setup(props, context: SetupContext) {\n    const [groupValue, setGroupValue] = useDefault<RadioValue, TdRadioGroupProps>(\n      props,\n      context.emit,\n      'value',\n      'change',\n    );\n    const groupOptions = computed(() => {\n      return props.options?.map((option: RadioOption) => {\n        let opt = option as RadioOptionObj;\n        if (typeof option === 'string' || typeof option === 'number') {\n          opt = { value: option, label: option.toString() };\n        }\n        return opt;\n      });\n    });\n    const handleRadioChange = (val: RadioValue, e: Event) => {\n      setGroupValue(val, { e });\n    };\n    provide('rootGroupProps', props);\n    provide('rootGroupValue', groupValue);\n    provide('rootGroupChange', handleRadioChange);\n    return {\n      ...toRefs(props),\n      componentName,\n      groupOptions,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}