{"ast":null,"code":"/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport { defineComponent, computed, getCurrentInstance, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, createVNode } from 'vue';\nimport { templateRef, useElementBounding } from '@vueuse/core';\nimport config from '../config.js';\nimport '../shared/index.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { renderContent } from '../shared/render.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useEmitEvent/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/defineProperty';\nimport '@babel/runtime/helpers/typeof';\nvar name = \"\".concat(config.prefix, \"-indexes-anchor\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    TNode: TNodeComponent\n  },\n  props: {\n    anchorStyle: {\n      type: String,\n      default: \"\"\n    }\n  },\n  setup: function setup(props, context) {\n    var boxClasses = name;\n    var stickyContent = computed(function () {\n      return renderContent(getCurrentInstance(), \"default\", \"\");\n    });\n    var boxRef = templateRef(\"boxRef\");\n    var contentRef = templateRef(\"contentRef\");\n    var _useElementBounding = useElementBounding(contentRef),\n      height = _useElementBounding.height;\n    var boxStyles = computed(function () {\n      return \"height:\".concat(height.value, \"px;\");\n    });\n    return {\n      boxClasses: boxClasses,\n      boxStyles: boxStyles,\n      stickyContent: stickyContent\n    };\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_node = resolveComponent(\"t-node\");\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"boxRef\",\n    class: normalizeClass(_ctx.boxClasses),\n    style: normalizeStyle(_ctx.boxStyles)\n  }, [createElementVNode(\"div\", {\n    ref: \"contentRef\",\n    class: \"t-indexes__anchor\",\n    style: normalizeStyle(_ctx.anchorStyle)\n  }, [createVNode(_component_t_node, {\n    content: _ctx.stickyContent\n  }, null, 8, [\"content\"])], 4)], 6);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA,IAAMA,iBAAUC,MAAO;AAEvB,aAAeC,eAAgB;EAC7BF;EACAG,YAAY;IAAEC,KAAM,EAANA;GAAM;EACpBC,KAAO;IACLC,WAAa;MACXC,IAAM;MACNC,OAAS;IACX;GACF;EACAC,OAAMJ,sBAAOK,OAAS;IACpB,IAAMC,UAAa;IACb,oBAAgBC,SAAS;MAAA,OAAMC,cAAcC,oBAAsB,aAAW,EAAE,CAAC;KAAA;IAIjF,aAASC,YAAY,QAAQ;IAC7B,iBAAaA,YAAY,YAAY;IAC3C,IAAmBC,yCAAmBC,UAAU;MAAxCC;IAER,IAAMC,SAAY,YAAS;MAAA,OAAgBD,wBAAOE,KAAU;IAAA;IAErD;MACLT;MACAQ;MACAE;KACF;EACF;AACF,CAAC;;;oBC1CC,qBAIK;IAJAC,GAAI;IAAUC,qBAAO,MAAUZ;IAAGa,qBAAO,MAASL;MACrDM,mBAEK;IAFAH,GAAI;IAAaC,KAAM;IAAqBC,qBAAO,MAAWlB;MACjEoB,YAAyCC;IAAhCC,OAAS,OAAaP;EAAA","names":["name","config","defineComponent","components","TNode","props","anchorStyle","type","default","setup","context","boxClasses","computed","renderContent","getCurrentInstance","templateRef","useElementBounding","contentRef","height","boxStyles","value","stickyContent","ref","class","style","_createElementVNode","_createVNode","_component_t_node","content"],"sources":["../../src/indexes/indexes-anchor.vue","../../src/indexes/indexes-anchor.vue?vue&type=template&id=4103f88f&lang.js"],"sourcesContent":["<template>\n  <div ref=\"boxRef\" :class=\"boxClasses\" :style=\"boxStyles\">\n    <div ref=\"contentRef\" class=\"t-indexes__anchor\" :style=\"anchorStyle\">\n      <t-node :content=\"stickyContent\"></t-node>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, getCurrentInstance, defineComponent } from 'vue';\nimport { useElementBounding, templateRef } from '@vueuse/core';\nimport config from '../config';\nimport { renderContent, TNode } from '../shared';\n\nconst name = `${config.prefix}-indexes-anchor`;\n\nexport default defineComponent({\n  name,\n  components: { TNode },\n  props: {\n    anchorStyle: {\n      type: String,\n      default: '',\n    },\n  },\n  setup(props, context) {\n    const boxClasses = name;\n    const stickyContent = computed(() => renderContent(getCurrentInstance(), 'default', ''));\n\n    // box 用于占位和记录边界\n    // content 用于实际定位\n    const boxRef = templateRef('boxRef');\n    const contentRef = templateRef('contentRef');\n    const { height } = useElementBounding(contentRef);\n\n    const boxStyles = computed(() => `height:${height.value}px;`);\n\n    return {\n      boxClasses,\n      boxStyles,\n      stickyContent,\n    };\n  },\n});\n</script>\n","<template>\n  <div ref=\"boxRef\" :class=\"boxClasses\" :style=\"boxStyles\">\n    <div ref=\"contentRef\" class=\"t-indexes__anchor\" :style=\"anchorStyle\">\n      <t-node :content=\"stickyContent\"></t-node>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, getCurrentInstance, defineComponent } from 'vue';\nimport { useElementBounding, templateRef } from '@vueuse/core';\nimport config from '../config';\nimport { renderContent, TNode } from '../shared';\n\nconst name = `${config.prefix}-indexes-anchor`;\n\nexport default defineComponent({\n  name,\n  components: { TNode },\n  props: {\n    anchorStyle: {\n      type: String,\n      default: '',\n    },\n  },\n  setup(props, context) {\n    const boxClasses = name;\n    const stickyContent = computed(() => renderContent(getCurrentInstance(), 'default', ''));\n\n    // box 用于占位和记录边界\n    // content 用于实际定位\n    const boxRef = templateRef('boxRef');\n    const contentRef = templateRef('contentRef');\n    const { height } = useElementBounding(contentRef);\n\n    const boxStyles = computed(() => `height:${height.value}px;`);\n\n    return {\n      boxClasses,\n      boxStyles,\n      stickyContent,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}