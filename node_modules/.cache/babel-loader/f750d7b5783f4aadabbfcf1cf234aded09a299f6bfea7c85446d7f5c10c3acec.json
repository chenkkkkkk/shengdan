{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { defineComponent, getCurrentInstance, computed, ref, watch, toRefs, resolveComponent, openBlock, createBlock, withCtx, createElementVNode, normalizeClass, normalizeStyle, renderSlot, createElementBlock, toDisplayString, createCommentVNode, createVNode, Fragment, renderList, mergeProps } from 'vue';\nimport _Button from '../button/index.js';\nimport _Popup from '../popup/index.js';\nimport config from '../config.js';\nimport DialogProps from './props.js';\nimport '../shared/index.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { renderContent } from '../shared/render.js';\nimport '../button/button.js';\nimport 'tdesign-icons-vue-next';\nimport '../shared/constants.js';\nimport '../button/props.js';\nimport '../shared/useEmitEvent/index.js';\nimport 'lodash/camelCase';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/typeof';\nimport './style/css.js';\nimport '../button/type.js';\nimport '../popup/popup.js';\nimport '@babel/runtime/helpers/slicedToArray';\nimport '../popup/props.js';\nimport '../overlay/index.js';\nimport '../overlay/overlay.js';\nimport '../overlay/props.js';\nimport '../popup/type.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-dialog\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    TPopup: _Popup,\n    TNode: TNodeComponent,\n    TButton: _Button\n  },\n  props: DialogProps,\n  emits: [\"update:visible\", \"confirm\", \"overlay-click\", \"cancel\", \"change\", \"close\"],\n  setup: function setup(props, context) {\n    var internalInstance = getCurrentInstance();\n    var dialogContent = computed(function () {\n      return renderContent(internalInstance, \"default\", \"content\");\n    });\n    var innerValue = ref(\"\");\n    var dClassName = computed(function () {\n      return \"\".concat(name);\n    });\n    var dBoxClassName = computed(function () {\n      return \"\".concat(name, \"__box\");\n    });\n    var dHeaderClassName = computed(function () {\n      return [\"\".concat(name, \"__header\"), _defineProperty({}, \"\".concat(name, \"__header--has-content\"), dialogContent)];\n    });\n    var dTitleClassName = computed(function () {\n      return \"\".concat(name, \"__title\");\n    });\n    var dBodyClassName = computed(function () {\n      return \"\".concat(name, \"__body\");\n    });\n    var dTextClassName = computed(function () {\n      return \"\".concat(name, \"__text\");\n    });\n    var dInputClassName = computed(function () {\n      return \"\".concat(name, \"__input\");\n    });\n    var dFooterClassName = computed(function () {\n      return [_defineProperty({}, \"\".concat(name, \"__vertical-footer\"), props.buttonLayout === \"vertical\"), \"\".concat(name, \"__footer\")];\n    });\n    var dDefaultBtnClassName = computed(function () {\n      return [\"\".concat(name, \"__btn\"), \"\".concat(name, \"__btn--default\"), \"\".concat(name, \"__\").concat(props.buttonLayout, \"-btn\")];\n    });\n    var dConfirmBtnClassName = computed(function () {\n      return [\"\".concat(name, \"__btn\"), \"\".concat(name, \"__btn--primary\"), \"\".concat(name, \"__\").concat(props.buttonLayout, \"-btn\")];\n    });\n    var rootStyles = computed(function () {\n      return {\n        zIndex: props.zIndex,\n        width: typeof props.width === \"string\" ? props.width : \"\".concat(props.width, \"px\")\n      };\n    });\n    var handleConfirm = function handleConfirm() {\n      context.emit(\"update:visible\", false);\n      context.emit(\"confirm\");\n    };\n    var handleCancel = function handleCancel() {\n      context.emit(\"update:visible\", false);\n      context.emit(\"close\", \"cancel\");\n      context.emit(\"cancel\");\n    };\n    var handleOverlayClick = function handleOverlayClick() {\n      if (!props.closeOnOverlayClick) {\n        return;\n      }\n      context.emit(\"update:visible\", false);\n      context.emit(\"close\", \"overlay\");\n      context.emit(\"overlay-click\");\n    };\n    watch(function () {\n      return props.visible;\n    }, function (val) {\n      context.emit(\"change\", val);\n    });\n    var calcBtn = function calcBtn(btn) {\n      return typeof btn === \"string\" ? {\n        content: btn\n      } : btn;\n    };\n    var confirmBtnProps = computed(function () {\n      return calcBtn(props.confirmBtn);\n    });\n    var cancelBtnProps = computed(function () {\n      return calcBtn(props.cancelBtn);\n    });\n    var actionsBtnProps = computed(function () {\n      var _props$actions;\n      return (_props$actions = props.actions) === null || _props$actions === void 0 ? void 0 : _props$actions.map(function (item) {\n        return calcBtn(item);\n      });\n    });\n    return _objectSpread({\n      innerValue: innerValue,\n      dClassName: dClassName,\n      dBoxClassName: dBoxClassName,\n      dHeaderClassName: dHeaderClassName,\n      dTitleClassName: dTitleClassName,\n      dBodyClassName: dBodyClassName,\n      dTextClassName: dTextClassName,\n      dInputClassName: dInputClassName,\n      dFooterClassName: dFooterClassName,\n      dDefaultBtnClassName: dDefaultBtnClassName,\n      dConfirmBtnClassName: dConfirmBtnClassName,\n      dialogContent: dialogContent,\n      confirmBtnProps: confirmBtnProps,\n      cancelBtnProps: cancelBtnProps,\n      actionsBtnProps: actionsBtnProps,\n      handleConfirm: handleConfirm,\n      handleCancel: handleCancel,\n      handleOverlayClick: handleOverlayClick,\n      rootStyles: rootStyles\n    }, toRefs(props));\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_node = resolveComponent(\"t-node\");\n  var _component_t_button = resolveComponent(\"t-button\");\n  var _component_t_popup = resolveComponent(\"t-popup\");\n  return openBlock(), createBlock(_component_t_popup, {\n    visible: _ctx.visible,\n    placement: \"center\",\n    \"mask-transparent\": !_ctx.showOverlay,\n    \"teleport-disabled\": true,\n    \"lock-scroll\": _ctx.preventScrollThrough,\n    onClose: _ctx.handleOverlayClick\n  }, {\n    default: withCtx(function () {\n      return [createElementVNode(\"div\", {\n        id: \"root\",\n        class: normalizeClass(_ctx.dClassName),\n        style: normalizeStyle(_ctx.rootStyles)\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.dHeaderClassName)\n      }, [renderSlot(_ctx.$slots, \"header\", {}, function () {\n        return [_ctx.title ? (openBlock(), createElementBlock(\"div\", {\n          key: 0,\n          class: normalizeClass(_ctx.dTitleClassName)\n        }, toDisplayString(_ctx.title), 3)) : createCommentVNode(\"\", true)];\n      })], 2), _ctx.content ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(_ctx.dBodyClassName)\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.dTextClassName)\n      }, [createVNode(_component_t_node, {\n        content: _ctx.dialogContent\n      }, null, 8, [\"content\"])], 2)], 2)) : createCommentVNode(\"\", true), createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.dFooterClassName)\n      }, [renderSlot(_ctx.$slots, \"actions\", {}, function () {\n        return [_ctx.actionsBtnProps ? (openBlock(true), createElementBlock(Fragment, {\n          key: 0\n        }, renderList(_ctx.actionsBtnProps, function (item, index) {\n          return openBlock(), createBlock(_component_t_button, mergeProps({\n            key: index\n          }, item, {\n            variant: \"text\",\n            class: _ctx.dDefaultBtnClassName,\n            onClick: _ctx.handleCancel\n          }), null, 16, [\"class\", \"onClick\"]);\n        }), 128)) : createCommentVNode(\"\", true)];\n      }), renderSlot(_ctx.$slots, \"cancelBtn\", {}, function () {\n        return [_ctx.cancelBtn ? (openBlock(), createBlock(_component_t_button, mergeProps({\n          key: 0\n        }, _ctx.cancelBtnProps, {\n          variant: \"text\",\n          class: _ctx.dDefaultBtnClassName,\n          onClick: _ctx.handleCancel\n        }), null, 16, [\"class\", \"onClick\"])) : createCommentVNode(\"\", true)];\n      }), renderSlot(_ctx.$slots, \"confirmBtn\", {}, function () {\n        return [_ctx.confirmBtn ? (openBlock(), createBlock(_component_t_button, mergeProps({\n          key: 0\n        }, _ctx.confirmBtnProps, {\n          variant: \"text\",\n          class: _ctx.dConfirmBtnClassName,\n          onClick: _ctx.handleConfirm\n        }), null, 16, [\"class\", \"onClick\"])) : createCommentVNode(\"\", true)];\n      })], 2)], 6)];\n    }),\n    _: 3\n  }, 8, [\"visible\", \"mask-transparent\", \"lock-scroll\", \"onClose\"]);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":"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","names":["prefix","config","name","defineComponent","components","TPopup","TNode","TButton","props","emits","setup","context","internalInstance","getCurrentInstance","dialogContent","computed","renderContent","ref","dClassName","dBoxClassName","dTitleClassName","dBodyClassName","dTextClassName","dInputClassName","buttonLayout","zIndex","width","handleConfirm","emit","handleCancel","handleOverlayClick","closeOnOverlayClick","watch","val","calcBtn","btn","content","confirmBtnProps","confirmBtn","cancelBtnProps","cancelBtn","_props$actions","map","item","innerValue","dHeaderClassName","dFooterClassName","dDefaultBtnClassName","dConfirmBtnClassName","actionsBtnProps","rootStyles","toRefs","_component_t_popup","visible","_ctx","placement","onClose","_createElementVNode","id","class","style","_renderSlot","_createElementBlock","_createVNode","_component_t_node","_Fragment","key","_renderList","index","_mergeProps","variant","onClick","_createBlock"],"sources":["../../src/dialog/dialog.vue","../../src/dialog/dialog.vue?vue&type=template&id=240fc98e&lang.js"],"sourcesContent":["<template>\n  <t-popup\n    :visible=\"visible\"\n    placement=\"center\"\n    :mask-transparent=\"!showOverlay\"\n    :teleport-disabled=\"true\"\n    :lock-scroll=\"preventScrollThrough\"\n    @close=\"handleOverlayClick\"\n  >\n    <div id=\"root\" :class=\"dClassName\" :style=\"rootStyles\">\n      <div :class=\"dHeaderClassName\">\n        <slot name=\"header\">\n          <div v-if=\"title\" :class=\"dTitleClassName\">{{ title }}</div>\n        </slot>\n      </div>\n      <div v-if=\"content\" :class=\"dBodyClassName\">\n        <div :class=\"dTextClassName\">\n          <t-node :content=\"dialogContent\"></t-node>\n        </div>\n      </div>\n      <div :class=\"dFooterClassName\">\n        <slot name=\"actions\">\n          <template v-if=\"actionsBtnProps\">\n            <t-button\n              v-for=\"(item, index) in actionsBtnProps\"\n              :key=\"index\"\n              v-bind=\"item\"\n              variant=\"text\"\n              :class=\"dDefaultBtnClassName\"\n              @click=\"handleCancel\"\n            />\n          </template>\n        </slot>\n        <slot name=\"cancelBtn\">\n          <template v-if=\"cancelBtn\">\n            <t-button v-bind=\"cancelBtnProps\" variant=\"text\" :class=\"dDefaultBtnClassName\" @click=\"handleCancel\" />\n          </template>\n        </slot>\n        <slot name=\"confirmBtn\">\n          <template v-if=\"confirmBtn\">\n            <t-button v-bind=\"confirmBtnProps\" variant=\"text\" :class=\"dConfirmBtnClassName\" @click=\"handleConfirm\" />\n          </template>\n        </slot>\n      </div>\n    </div>\n  </t-popup>\n</template>\n<script lang=\"ts\">\nimport { computed, ref, toRefs, watch, defineComponent, getCurrentInstance } from 'vue';\nimport TButton from '../button';\nimport TPopup from '../popup';\nimport config from '../config';\nimport DialogProps from './props';\nimport { renderContent, TNode } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-dialog`;\n\nexport default defineComponent({\n  name,\n  components: { TPopup, TNode, TButton },\n  props: DialogProps,\n  emits: ['update:visible', 'confirm', 'overlay-click', 'cancel', 'change', 'close'],\n  setup(props, context) {\n    const internalInstance = getCurrentInstance();\n    const dialogContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n\n    const innerValue = ref('');\n    const dClassName = computed(() => `${name}`);\n    const dBoxClassName = computed(() => `${name}__box`);\n    const dHeaderClassName = computed(() => [\n      `${name}__header`,\n      {\n        [`${name}__header--has-content`]: dialogContent,\n      },\n    ]);\n    const dTitleClassName = computed(() => `${name}__title`);\n    const dBodyClassName = computed(() => `${name}__body`);\n    const dTextClassName = computed(() => `${name}__text`);\n    const dInputClassName = computed(() => `${name}__input`);\n    const dFooterClassName = computed(() => [\n      {\n        [`${name}__vertical-footer`]: props.buttonLayout === 'vertical',\n      },\n      `${name}__footer`,\n    ]);\n    const dDefaultBtnClassName = computed(() => [\n      `${name}__btn`,\n      `${name}__btn--default`,\n      `${name}__${props.buttonLayout}-btn`,\n    ]);\n    const dConfirmBtnClassName = computed(() => [\n      `${name}__btn`,\n      `${name}__btn--primary`,\n      `${name}__${props.buttonLayout}-btn`,\n    ]);\n\n    const rootStyles = computed(() => ({\n      zIndex: props.zIndex,\n      width: typeof props.width === 'string' ? props.width : `${props.width}px`,\n    }));\n\n    const handleConfirm = () => {\n      context.emit('update:visible', false);\n      context.emit('confirm');\n    };\n\n    const handleCancel = () => {\n      context.emit('update:visible', false);\n      context.emit('close', 'cancel');\n      context.emit('cancel');\n    };\n\n    const handleOverlayClick = () => {\n      if (!props.closeOnOverlayClick) {\n        return;\n      }\n      context.emit('update:visible', false);\n      context.emit('close', 'overlay');\n      context.emit('overlay-click');\n    };\n\n    watch(\n      () => props.visible,\n      (val: boolean) => {\n        context.emit('change', val);\n      },\n    );\n\n    const calcBtn = (btn: any) => (typeof btn === 'string' ? { content: btn } : btn);\n    const confirmBtnProps = computed(() => calcBtn(props.confirmBtn));\n    const cancelBtnProps = computed(() => calcBtn(props.cancelBtn));\n    const actionsBtnProps = computed(() => props.actions?.map((item) => calcBtn(item)));\n\n    return {\n      innerValue,\n      dClassName,\n      dBoxClassName,\n      dHeaderClassName,\n      dTitleClassName,\n      dBodyClassName,\n      dTextClassName,\n      dInputClassName,\n      dFooterClassName,\n      dDefaultBtnClassName,\n      dConfirmBtnClassName,\n      dialogContent,\n      confirmBtnProps,\n      cancelBtnProps,\n      actionsBtnProps,\n      handleConfirm,\n      handleCancel,\n      handleOverlayClick,\n      rootStyles,\n      ...toRefs(props),\n    };\n  },\n});\n</script>\n","<template>\n  <t-popup\n    :visible=\"visible\"\n    placement=\"center\"\n    :mask-transparent=\"!showOverlay\"\n    :teleport-disabled=\"true\"\n    :lock-scroll=\"preventScrollThrough\"\n    @close=\"handleOverlayClick\"\n  >\n    <div id=\"root\" :class=\"dClassName\" :style=\"rootStyles\">\n      <div :class=\"dHeaderClassName\">\n        <slot name=\"header\">\n          <div v-if=\"title\" :class=\"dTitleClassName\">{{ title }}</div>\n        </slot>\n      </div>\n      <div v-if=\"content\" :class=\"dBodyClassName\">\n        <div :class=\"dTextClassName\">\n          <t-node :content=\"dialogContent\"></t-node>\n        </div>\n      </div>\n      <div :class=\"dFooterClassName\">\n        <slot name=\"actions\">\n          <template v-if=\"actionsBtnProps\">\n            <t-button\n              v-for=\"(item, index) in actionsBtnProps\"\n              :key=\"index\"\n              v-bind=\"item\"\n              variant=\"text\"\n              :class=\"dDefaultBtnClassName\"\n              @click=\"handleCancel\"\n            />\n          </template>\n        </slot>\n        <slot name=\"cancelBtn\">\n          <template v-if=\"cancelBtn\">\n            <t-button v-bind=\"cancelBtnProps\" variant=\"text\" :class=\"dDefaultBtnClassName\" @click=\"handleCancel\" />\n          </template>\n        </slot>\n        <slot name=\"confirmBtn\">\n          <template v-if=\"confirmBtn\">\n            <t-button v-bind=\"confirmBtnProps\" variant=\"text\" :class=\"dConfirmBtnClassName\" @click=\"handleConfirm\" />\n          </template>\n        </slot>\n      </div>\n    </div>\n  </t-popup>\n</template>\n<script lang=\"ts\">\nimport { computed, ref, toRefs, watch, defineComponent, getCurrentInstance } from 'vue';\nimport TButton from '../button';\nimport TPopup from '../popup';\nimport config from '../config';\nimport DialogProps from './props';\nimport { renderContent, TNode } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-dialog`;\n\nexport default defineComponent({\n  name,\n  components: { TPopup, TNode, TButton },\n  props: DialogProps,\n  emits: ['update:visible', 'confirm', 'overlay-click', 'cancel', 'change', 'close'],\n  setup(props, context) {\n    const internalInstance = getCurrentInstance();\n    const dialogContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n\n    const innerValue = ref('');\n    const dClassName = computed(() => `${name}`);\n    const dBoxClassName = computed(() => `${name}__box`);\n    const dHeaderClassName = computed(() => [\n      `${name}__header`,\n      {\n        [`${name}__header--has-content`]: dialogContent,\n      },\n    ]);\n    const dTitleClassName = computed(() => `${name}__title`);\n    const dBodyClassName = computed(() => `${name}__body`);\n    const dTextClassName = computed(() => `${name}__text`);\n    const dInputClassName = computed(() => `${name}__input`);\n    const dFooterClassName = computed(() => [\n      {\n        [`${name}__vertical-footer`]: props.buttonLayout === 'vertical',\n      },\n      `${name}__footer`,\n    ]);\n    const dDefaultBtnClassName = computed(() => [\n      `${name}__btn`,\n      `${name}__btn--default`,\n      `${name}__${props.buttonLayout}-btn`,\n    ]);\n    const dConfirmBtnClassName = computed(() => [\n      `${name}__btn`,\n      `${name}__btn--primary`,\n      `${name}__${props.buttonLayout}-btn`,\n    ]);\n\n    const rootStyles = computed(() => ({\n      zIndex: props.zIndex,\n      width: typeof props.width === 'string' ? props.width : `${props.width}px`,\n    }));\n\n    const handleConfirm = () => {\n      context.emit('update:visible', false);\n      context.emit('confirm');\n    };\n\n    const handleCancel = () => {\n      context.emit('update:visible', false);\n      context.emit('close', 'cancel');\n      context.emit('cancel');\n    };\n\n    const handleOverlayClick = () => {\n      if (!props.closeOnOverlayClick) {\n        return;\n      }\n      context.emit('update:visible', false);\n      context.emit('close', 'overlay');\n      context.emit('overlay-click');\n    };\n\n    watch(\n      () => props.visible,\n      (val: boolean) => {\n        context.emit('change', val);\n      },\n    );\n\n    const calcBtn = (btn: any) => (typeof btn === 'string' ? { content: btn } : btn);\n    const confirmBtnProps = computed(() => calcBtn(props.confirmBtn));\n    const cancelBtnProps = computed(() => calcBtn(props.cancelBtn));\n    const actionsBtnProps = computed(() => props.actions?.map((item) => calcBtn(item)));\n\n    return {\n      innerValue,\n      dClassName,\n      dBoxClassName,\n      dHeaderClassName,\n      dTitleClassName,\n      dBodyClassName,\n      dTextClassName,\n      dInputClassName,\n      dFooterClassName,\n      dDefaultBtnClassName,\n      dConfirmBtnClassName,\n      dialogContent,\n      confirmBtnProps,\n      cancelBtnProps,\n      actionsBtnProps,\n      handleConfirm,\n      handleCancel,\n      handleOverlayClick,\n      rootStyles,\n      ...toRefs(props),\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}