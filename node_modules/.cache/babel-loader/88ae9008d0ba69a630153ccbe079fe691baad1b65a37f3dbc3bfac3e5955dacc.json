{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _typeof from '@babel/runtime/helpers/typeof';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport { defineComponent, getCurrentInstance, computed, ref, toRefs, resolveComponent, openBlock, createElementBlock, createElementVNode, normalizeClass, Fragment, renderList, normalizeStyle, createBlock, createVNode, createCommentVNode } from 'vue';\nimport { AddIcon, CloseIcon, RefreshIcon } from 'tdesign-icons-vue-next';\nimport findIndex from 'lodash/findIndex';\nimport isObject from 'lodash/isObject';\nimport isFunction from 'lodash/isFunction';\nimport xhr from '../_common/js/upload/xhr.js';\nimport '../shared/index.js';\nimport UploadProps from './props.js';\nimport config from '../config.js';\nimport { isOverSizeLimit } from './util.js';\nimport _ImageViewer from '../image-viewer/index.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { useEmitEvent } from '../shared/useEmitEvent/index.js';\nimport { useDefault } from '../shared/useDefault/index.js';\nimport { renderTNode } from '../shared/render.js';\nimport '../_common/js/upload/utils.js';\nimport '../_common/js/log/log.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useChildSlots/index.js';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport 'lodash/camelCase';\nimport '../image-viewer/image-viewer.js';\nimport '../image-viewer/props.js';\nimport '../swiper/index.js';\nimport '../swiper/swiper.js';\nimport '../swiper/props.js';\nimport '../swiper/swiper-item.js';\nimport './style/css.js';\nimport '../swiper/type.js';\nimport '../overlay/index.js';\nimport '../overlay/overlay.js';\nimport '../overlay/props.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-upload\");\nvar isArray = Array.isArray;\nvar script = defineComponent({\n  name: name,\n  components: {\n    AddIcon: AddIcon,\n    TNode: TNodeComponent,\n    CloseIcon: CloseIcon,\n    RefreshIcon: RefreshIcon,\n    TImageViewer: _ImageViewer\n  },\n  props: UploadProps,\n  emits: [\"update:files\", \"update:modelValue\", \"change\", \"fail\", \"preview\", \"progress\", \"remove\", \"success\", \"select-change\"],\n  setup: function setup(props, context) {\n    var emitEvent = useEmitEvent(props, context.emit);\n    var _useDefault = useDefault(props, context.emit, \"files\", \"change\"),\n      _useDefault2 = _slicedToArray(_useDefault, 2),\n      innerFiles = _useDefault2[0],\n      setInnerFiles = _useDefault2[1];\n    var internalInstance = getCurrentInstance();\n    var defaultContent = computed(function () {\n      return renderTNode(internalInstance, \"default\");\n    });\n    var deleteBtnContent = computed(function () {\n      return renderTNode(internalInstance, \"deleteBtn\");\n    });\n    var images = ref([]);\n    var showViewer = ref(false);\n    var initialIndex = ref(0);\n    var UPLOAD_NAME = name;\n    var xhrReq = ref(null);\n    var toUploadFiles = ref([]);\n    var uploadedFiles = computed(function () {\n      if (innerFiles.value && isArray(innerFiles.value)) {\n        return innerFiles.value;\n      }\n      return [];\n    });\n    var errorMsg = ref(\"\");\n    var inputRef = ref(null);\n    var itemStyle = computed(function () {\n      var _toRefs = toRefs(props),\n        gridConfig = _toRefs.gridConfig;\n      var column = 4;\n      if (isObject(gridConfig.value)) {\n        column = gridConfig.value.column;\n      }\n      return {\n        flexBasis: \"\".concat(100 / +column, \"%\")\n      };\n    });\n    var itemContentStyle = computed(function () {\n      var width = 80;\n      var height = 80;\n      var _toRefs2 = toRefs(props),\n        gridConfig = _toRefs2.gridConfig;\n      if (isObject(gridConfig.value)) {\n        var _gridConfig$value = gridConfig.value;\n        width = _gridConfig$value.width;\n        height = _gridConfig$value.height;\n      }\n      return {\n        height: \"\".concat(height, \"px\"),\n        width: \"\".concat(width, \"px\")\n      };\n    });\n    var triggerUpload = function triggerUpload() {\n      var input = inputRef.value;\n      if (props.disabled) return;\n      input.click();\n    };\n    var handlePreview = function handlePreview(e, file) {\n      showViewer.value = true;\n      emitEvent(\"preview\", {\n        e: e,\n        file: file\n      });\n    };\n    var handleReload = function handleReload(file) {\n      uploadFiles([file.fileRaw]);\n    };\n    var handleChange = function handleChange() {\n      var input = inputRef.value;\n      if (props.disabled || !input || !input.files) return;\n      var formatFiles = formatFileToUploadFile(input.files);\n      emitEvent(\"select-change\", _toConsumableArray(formatFiles));\n      uploadFiles(formatFiles);\n      input.value = \"\";\n    };\n    var formatFileToUploadFile = function formatFileToUploadFile(files) {\n      var format = props.format;\n      if (!format || !isFunction(format)) {\n        var res = [];\n        for (var i = 0; i < files.length; i++) {\n          res.push(files[i]);\n        }\n        return res;\n      }\n      var NewFiles = _toConsumableArray(files);\n      NewFiles.forEach(function (item) {\n        item = format(item);\n      });\n      return NewFiles;\n    };\n    var handleBeforeUpload = function handleBeforeUpload(file) {\n      if (props.beforeUpload && isFunction(props.beforeUpload)) {\n        var beforeUpload = props.beforeUpload(file);\n        if (beforeUpload instanceof Promise) return beforeUpload;\n        return Promise.resolve(beforeUpload);\n      }\n      return new Promise(function (resolve) {\n        if (props.sizeLimit) {\n          resolve(handleSizeLimit(file.size));\n        }\n        resolve(true);\n      });\n    };\n    var handleSizeLimit = function handleSizeLimit(fileSize) {\n      var sizeLimit;\n      if (typeof props.sizeLimit === \"number\") {\n        sizeLimit = {\n          size: props.sizeLimit,\n          unit: \"KB\"\n        };\n      } else if (_typeof(props.sizeLimit) === \"object\") {\n        sizeLimit = props.sizeLimit;\n      } else {\n        sizeLimit = {\n          size: 0,\n          unit: \"KB\"\n        };\n      }\n      var isOverSize = isOverSizeLimit(fileSize, sizeLimit.size, sizeLimit.unit);\n      if (isOverSize) {\n        errorMsg.value = sizeLimit.message ? sizeLimit.message : \"TDesign Upoad Error: uploaded picture exceeds \".concat(props.sizeLimit).concat(sizeLimit.unit, \" restrictions\");\n      }\n      return isOverSize;\n    };\n    var uploadFiles = function uploadFiles(files) {\n      var _toRefs3 = toRefs(props),\n        max = _toRefs3.max;\n      var tmpFiles = _toConsumableArray(files);\n      if (max.value) {\n        tmpFiles = tmpFiles.slice(0, max.value - uploadedFiles.value.length);\n        if (tmpFiles.length !== files.length) {\n          console.warn(\"TDesign Upload Warn: you can only upload \".concat(max.value, \" files\"));\n        }\n      }\n      tmpFiles.forEach(function (fileRaw) {\n        var uploadFile = _objectSpread(_objectSpread({}, fileRaw), {}, {\n          fileRaw: fileRaw,\n          lastModified: fileRaw.lastModified,\n          name: fileRaw.name,\n          size: fileRaw.size,\n          type: fileRaw.type,\n          percent: 0,\n          status: \"waiting\"\n        });\n        var reader = new FileReader();\n        reader.readAsDataURL(fileRaw);\n        reader.onload = function (event) {\n          var _event$target;\n          uploadFile.url = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result;\n        };\n        handleBeforeUpload(fileRaw).then(function (canUpload) {\n          if (!canUpload) return;\n          var newFiles = toUploadFiles.value.concat();\n          if (props.allowUploadDuplicateFile || !toUploadFiles.value.find(function (file) {\n            return file.name === uploadFile.name;\n          })) {\n            newFiles.push(uploadFile);\n          }\n          toUploadFiles.value = newFiles;\n          if (props.autoUpload) {\n            upload(uploadFile);\n          }\n        });\n      });\n    };\n    var handleMockProgress = function handleMockProgress(file) {\n      var timer = setInterval(function () {\n        if (file.status === \"success\" || file.percent >= 99) {\n          clearInterval(timer);\n          return;\n        }\n        file.percent += 1;\n        handleProgress({\n          file: file,\n          percent: file.percent,\n          type: \"mock\"\n        });\n      }, 10);\n    };\n    var handleProgress = function handleProgress(_ref) {\n      var event = _ref.event,\n        file = _ref.file,\n        percent = _ref.percent,\n        _ref$type = _ref.type,\n        type = _ref$type === void 0 ? \"real\" : _ref$type;\n      if (!file) throw new Error(\"Error file\");\n      file.percent = Math.min(percent, 100);\n      var progressCtx = {\n        percent: percent,\n        e: event,\n        file: file,\n        type: type\n      };\n      emitEvent(\"progress\", progressCtx);\n    };\n    var handleRemove = function handleRemove(e, file, index) {\n      errorMsg.value = \"\";\n      var files = uploadedFiles.value.concat();\n      files.splice(index, 1);\n      setInnerFiles(files, {\n        e: e,\n        trigger: \"remove\",\n        index: index,\n        file: file\n      });\n      emitEvent(\"remove\", {\n        e: e,\n        index: index,\n        file: file\n      });\n      images.value.splice(index, 1);\n    };\n    var upload = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n        var request;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!props.action && !props.requestMethod)) {\n                  _context.next = 3;\n                  break;\n                }\n                console.error(\"TDesign Upload Error: one of action and requestMethod must be exist.\");\n                return _context.abrupt(\"return\");\n              case 3:\n                errorMsg.value = \"\";\n                file.status = \"progress\";\n                if (props.requestMethod) {\n                  handleRequestMethod(file);\n                } else {\n                  if (props.useMockProgress) {\n                    handleMockProgress(file);\n                  }\n                  request = xhr;\n                  xhrReq.value = request({\n                    action: props.action,\n                    data: _objectSpread({\n                      file: file.fileRaw\n                    }, props.data),\n                    file: file,\n                    method: props.method,\n                    headers: props.headers || {},\n                    withCredentials: props.withCredentials,\n                    onError: handleError,\n                    onProgress: handleProgress,\n                    onSuccess: handleSuccess\n                  });\n                }\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return function upload(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var handleRequestMethod = function handleRequestMethod(file) {\n      var _props$requestMethod;\n      if (!isFunction(props.requestMethod)) {\n        console.warn(\"TDesign Upload Warn: `requestMethod` must be a function.\");\n        return;\n      }\n      (_props$requestMethod = props.requestMethod) === null || _props$requestMethod === void 0 ? void 0 : _props$requestMethod.call(props, file).then(function (res) {\n        if (!handleRequestMethodResponse(res)) return;\n        if (res.status === \"success\") {\n          handleSuccess({\n            file: file,\n            response: res.response\n          });\n        } else if (res.status === \"fail\") {\n          var r = res.response || {};\n          handleError({\n            event: void 0,\n            file: file,\n            response: _objectSpread(_objectSpread({}, r), {}, {\n              error: res.error\n            })\n          });\n        }\n      });\n    };\n    var handleRequestMethodResponse = function handleRequestMethodResponse(res) {\n      if (!res) {\n        console.error(\"TDesign Upoad Error: `requestMethodResponse` is required.\");\n        return false;\n      }\n      if (!res.status) {\n        console.error(\"TDesign Upoad Error: `requestMethodResponse.status` is missing, which value is `success` or `fail`\");\n        return false;\n      }\n      if (![\"success\", \"fail\"].includes(res.status)) {\n        console.error(\"TDesign Upoad Error: `requestMethodResponse.status` must be `success` or `fail`\");\n        return false;\n      }\n      if (res.status === \"success\" && (!res.response || !res.response.url)) {\n        console.warn(\"TDesign Upoad Warn: `requestMethodResponse.response.url` is required, when `status` is `success`\");\n      }\n      return true;\n    };\n    var handleSuccess = function handleSuccess(_ref3) {\n      var _res, _res2;\n      var event = _ref3.event,\n        file = _ref3.file,\n        response = _ref3.response;\n      if (!file) throw new Error(\"Error file\");\n      file.status = \"success\";\n      var res = response;\n      if (props.formatResponse && isFunction(props.formatResponse)) {\n        res = props.formatResponse(response, {\n          file: file\n        });\n      }\n      if ((_res = res) !== null && _res !== void 0 && _res.error) {\n        handleError({\n          event: event,\n          file: file,\n          response: res,\n          resFormatted: true\n        });\n        return;\n      }\n      file.url = ((_res2 = res) === null || _res2 === void 0 ? void 0 : _res2.url) || file.url;\n      var index = findIndex(toUploadFiles.value, function (o) {\n        return o.name === file.name;\n      });\n      toUploadFiles.value.splice(index, 1);\n      var newFile = _objectSpread(_objectSpread({}, file), {}, {\n        response: res\n      });\n      var files = uploadedFiles.value.concat(newFile);\n      setInnerFiles(files, {\n        e: event,\n        response: res,\n        trigger: \"upload-success\"\n      });\n      emitEvent(\"success\", {\n        file: file,\n        fileList: files,\n        e: event,\n        response: res\n      });\n      images.value.push(newFile.url);\n    };\n    var handleError = function handleError(options) {\n      var _res3;\n      var event = options.event,\n        file = options.file,\n        response = options.response,\n        resFormatted = options.resFormatted;\n      file.status = \"fail\";\n      var res = response;\n      if (!resFormatted && props.formatResponse && isFunction(props.formatResponse)) {\n        res = props.formatResponse(response, {\n          file: file\n        });\n      }\n      errorMsg.value = (_res3 = res) === null || _res3 === void 0 ? void 0 : _res3.error;\n      if (!uploadedFiles.value.find(function (item) {\n        return item.name === file.name;\n      })) {\n        var files = uploadedFiles.value.concat(file);\n        setInnerFiles(files, {\n          e: event,\n          response: res,\n          trigger: \"upload-fail\"\n        });\n      }\n      emitEvent(\"fail\", {\n        e: event,\n        file: file\n      });\n    };\n    return _objectSpread(_objectSpread({}, toRefs(props)), {}, {\n      UPLOAD_NAME: UPLOAD_NAME,\n      images: images,\n      showViewer: showViewer,\n      initialIndex: initialIndex,\n      prefix: prefix,\n      innerFiles: innerFiles,\n      xhrReq: xhrReq,\n      toUploadFiles: toUploadFiles,\n      errorMsg: errorMsg,\n      inputRef: inputRef,\n      uploadedFiles: uploadedFiles,\n      deleteBtnContent: deleteBtnContent,\n      defaultContent: defaultContent,\n      itemStyle: itemStyle,\n      itemContentStyle: itemContentStyle,\n      emitEvent: emitEvent,\n      setInnerFiles: setInnerFiles,\n      triggerUpload: triggerUpload,\n      handleChange: handleChange,\n      handlePreview: handlePreview,\n      handleReload: handleReload,\n      handleBeforeUpload: handleBeforeUpload,\n      handleSizeLimit: handleSizeLimit,\n      uploadFiles: uploadFiles,\n      handleMockProgress: handleMockProgress,\n      handleProgress: handleProgress,\n      handleRemove: handleRemove,\n      upload: upload,\n      handleRequestMethodResponse: handleRequestMethodResponse,\n      handleSuccess: handleSuccess,\n      handleError: handleError\n    });\n  }\n});\nvar _hoisted_1 = [\"onClick\"];\nvar _hoisted_2 = [\"src\", \"onClick\"];\nvar _hoisted_3 = [\"value\", \"multiple\", \"accept\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_node = resolveComponent(\"t-node\");\n  var _component_close_icon = resolveComponent(\"close-icon\");\n  var _component_refresh_icon = resolveComponent(\"refresh-icon\");\n  var _component_add_icon = resolveComponent(\"add-icon\");\n  var _component_t_image_viewer = resolveComponent(\"t-image-viewer\");\n  return openBlock(), createElementBlock(\"div\", null, [createElementVNode(\"ul\", {\n    class: normalizeClass(\"\".concat(_ctx.UPLOAD_NAME, \"__card\"))\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.uploadedFiles, function (file, index) {\n    return openBlock(), createElementBlock(\"li\", {\n      key: index,\n      class: normalizeClass(\"\".concat(_ctx.UPLOAD_NAME, \"__card-item\")),\n      style: normalizeStyle(_ctx.itemStyle)\n    }, [createElementVNode(\"div\", {\n      class: normalizeClass(\"\".concat(_ctx.UPLOAD_NAME, \"__card-content \").concat(_ctx.UPLOAD_NAME, \"__card-box\")),\n      style: normalizeStyle(_ctx.itemContentStyle)\n    }, [createElementVNode(\"div\", {\n      key: \"delete-icon\",\n      class: normalizeClass(\"\".concat(_ctx.UPLOAD_NAME, \"__card-delete-item\")),\n      onClick: function onClick(e) {\n        return _ctx.handleRemove(e, file, index);\n      }\n    }, [_ctx.deleteBtnContent ? (openBlock(), createBlock(_component_t_node, {\n      key: 0,\n      content: _ctx.deleteBtnContent\n    }, null, 8, [\"content\"])) : (openBlock(), createBlock(_component_close_icon, {\n      key: 1,\n      class: \"close-icon\"\n    }))], 10, _hoisted_1), createElementVNode(\"img\", {\n      class: normalizeClass(\"\".concat(_ctx.UPLOAD_NAME, \"__card-image\")),\n      src: file.url,\n      onClick: function onClick(e) {\n        return _ctx.handlePreview(e, file);\n      }\n    }, null, 10, _hoisted_2), file.status === \"fail\" ? (openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      class: normalizeClass(\"\".concat(_ctx.UPLOAD_NAME, \"__card-mask\"))\n    }, [createElementVNode(\"span\", {\n      key: \"refresh-icon\",\n      class: normalizeClass(\"\".concat(_ctx.UPLOAD_NAME, \"__card-mask-item\"))\n    }, [createVNode(_component_refresh_icon, {\n      onClick: function onClick($event) {\n        return _ctx.handleReload(file);\n      }\n    }, null, 8, [\"onClick\"])], 2)], 2)) : createCommentVNode(\"\", true)], 6)], 6);\n  }), 128)), _ctx.defaultContent ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    onClick: _cache[0] || (_cache[0] = function () {\n      return _ctx.triggerUpload && _ctx.triggerUpload.apply(_ctx, arguments);\n    })\n  }, [createVNode(_component_t_node, {\n    content: _ctx.defaultContent\n  }, null, 8, [\"content\"])])) : (openBlock(), createElementBlock(\"li\", {\n    key: 1,\n    class: normalizeClass(\"\".concat(_ctx.UPLOAD_NAME, \"__card-item\")),\n    onClick: _cache[1] || (_cache[1] = function () {\n      return _ctx.triggerUpload && _ctx.triggerUpload.apply(_ctx, arguments);\n    })\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.UPLOAD_NAME, \"__card-container \").concat(_ctx.UPLOAD_NAME, \"__card-box\"))\n  }, [createVNode(_component_add_icon)], 2)], 2))], 2), createElementVNode(\"input\", {\n    ref: \"inputRef\",\n    value: _ctx.files,\n    type: \"file\",\n    multiple: _ctx.multiple,\n    hidden: \"\",\n    accept: _ctx.accept,\n    onChange: _cache[2] || (_cache[2] = function () {\n      return _ctx.handleChange && _ctx.handleChange.apply(_ctx, arguments);\n    })\n  }, null, 40, _hoisted_3), createVNode(_component_t_image_viewer, {\n    images: _ctx.images,\n    \"onUpdate:images\": _cache[3] || (_cache[3] = function ($event) {\n      return _ctx.images = $event;\n    }),\n    modelValue: _ctx.showViewer,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = function ($event) {\n      return _ctx.showViewer = $event;\n    }),\n    \"initial-index\": _ctx.initialIndex\n  }, null, 8, [\"images\", \"modelValue\", \"initial-index\"])]);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":"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","names":["prefix","config","name","isArray","Array","defineComponent","components","AddIcon","TNode","CloseIcon","RefreshIcon","TImageViewer","props","emits","setup","context","emitEvent","emit","useDefault","_useDefault2","innerFiles","setInnerFiles","internalInstance","getCurrentInstance","defaultContent","computed","renderTNode","deleteBtnContent","ref","UPLOAD_NAME","value","toRefs","gridConfig","column","flexBasis","width","height","triggerUpload","input","inputRef","click","handlePreview","e","file","showViewer","handleReload","uploadFiles","handleChange","formatFileToUploadFile","files","formatFiles","format","isFunction","res","i","length","NewFiles","item","handleBeforeUpload","beforeUpload","resolve","Promise","sizeLimit","handleSizeLimit","fileSize","size","unit","isOverSize","isOverSizeLimit","errorMsg","message","max","tmpFiles","slice","console","fileRaw","uploadFile","lastModified","type","percent","status","FileReader","reader","readAsDataURL","event","target","_event$target","result","then","canUpload","toUploadFiles","concat","newFiles","push","autoUpload","upload","handleMockProgress","setInterval","clearInterval","timer","handleProgress","_ref","_ref$type","Error","min","progressCtx","handleRemove","index","uploadedFiles","trigger","images","splice","action","requestMethod","_context","error","handleRequestMethod","useMockProgress","request","xhrReq","data","method","headers","withCredentials","onError","onProgress","onSuccess","warn","_props$requestMethod","handleRequestMethodResponse","handleSuccess","response","handleError","r","includes","url","_ref3","formatResponse","resFormatted","findIndex","o","newFile","fileList","options","_res3","initialIndex","itemStyle","itemContentStyle","_createElementBlock","_createElementVNode","class","_ctx","_openBlock","key","style","_normalizeClass","onClick","_createBlock","_component_t_node","content","_component_close_icon","src","_createVNode","_component_refresh_icon","_component_add_icon","multiple","hidden","accept","onChange","_component_t_image_viewer"],"sources":["../../src/upload/upload.vue","../../src/upload/upload.vue?vue&type=template&id=89b3fa2e&lang.js"],"sourcesContent":["<template>\n  <div>\n    <ul :class=\"`${UPLOAD_NAME}__card`\">\n      <li v-for=\"(file, index) in uploadedFiles\" :key=\"index\" :class=\"`${UPLOAD_NAME}__card-item`\" :style=\"itemStyle\">\n        <div :class=\"`${UPLOAD_NAME}__card-content ${UPLOAD_NAME}__card-box`\" :style=\"itemContentStyle\">\n          <div\n            key=\"delete-icon\"\n            :class=\"`${UPLOAD_NAME}__card-delete-item`\"\n            @click=\"(e) => handleRemove(e, file, index)\"\n          >\n            <template v-if=\"deleteBtnContent\">\n              <t-node :content=\"deleteBtnContent\"></t-node>\n            </template>\n            <template v-else>\n              <close-icon class=\"close-icon\" />\n            </template>\n          </div>\n          <img :class=\"`${UPLOAD_NAME}__card-image`\" :src=\"file.url\" @click=\"(e) => handlePreview(e, file)\" />\n          <!--上传失败时，reload重试-->\n          <div v-if=\"file.status === 'fail'\" :class=\"`${UPLOAD_NAME}__card-mask`\">\n            <span key=\"refresh-icon\" :class=\"`${UPLOAD_NAME}__card-mask-item`\">\n              <refresh-icon @click=\"handleReload(file)\" />\n            </span>\n          </div>\n        </div>\n      </li>\n      <template v-if=\"defaultContent\">\n        <div @click=\"triggerUpload\">\n          <t-node :content=\"defaultContent\"></t-node>\n        </div>\n      </template>\n      <template v-else>\n        <li :class=\"`${UPLOAD_NAME}__card-item`\" @click=\"triggerUpload\">\n          <div :class=\"`${UPLOAD_NAME}__card-container ${UPLOAD_NAME}__card-box`\">\n            <add-icon></add-icon>\n          </div>\n        </li>\n      </template>\n    </ul>\n    <input\n      ref=\"inputRef\"\n      :value=\"files\"\n      type=\"file\"\n      :multiple=\"multiple\"\n      hidden\n      :accept=\"accept\"\n      @change=\"handleChange\"\n    />\n    <t-image-viewer v-model:images=\"images\" v-model=\"showViewer\" :initial-index=\"initialIndex\"></t-image-viewer>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, SetupContext, getCurrentInstance, ref, Ref, toRefs, computed, ComputedRef } from 'vue';\nimport { AddIcon, CloseIcon, RefreshIcon } from 'tdesign-icons-vue-next';\nimport findIndex from 'lodash/findIndex';\nimport isObject from 'lodash/isObject';\nimport isFunction from 'lodash/isFunction';\n\nimport xhr from '../_common/js/upload/xhr';\nimport { useDefault, useEmitEvent, renderTNode, TNode } from '../shared';\nimport { TdUploadProps, UploadFile, RequestMethodResponse, SizeLimitObj } from './type';\nimport { SuccessContext, InnerProgressContext } from './interface';\nimport UploadProps from './props';\nimport config from '../config';\nimport { isOverSizeLimit } from './util';\nimport TImageViewer from '../image-viewer';\n\nconst { prefix } = config;\nconst name = `${prefix}-upload`;\nconst { isArray } = Array;\n\nexport default defineComponent({\n  name,\n  components: {\n    AddIcon,\n    TNode,\n    CloseIcon,\n    RefreshIcon,\n    TImageViewer,\n  },\n  props: UploadProps,\n  emits: [\n    'update:files',\n    'update:modelValue',\n    'change',\n    'fail',\n    'preview',\n    'progress',\n    'remove',\n    'success',\n    'select-change',\n  ],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const [innerFiles, setInnerFiles] = useDefault<TdUploadProps['files'], TdUploadProps>(\n      props,\n      context.emit,\n      'files',\n      'change',\n    );\n    const internalInstance = getCurrentInstance();\n    const defaultContent = computed(() => renderTNode(internalInstance, 'default'));\n    const deleteBtnContent = computed(() => renderTNode(internalInstance, 'deleteBtn'));\n    const images: Ref<Array<string>> = ref([]);\n    const showViewer = ref(false);\n    const initialIndex = ref(0);\n    const UPLOAD_NAME = name;\n    const xhrReq = ref<XMLHttpRequest | null>(null);\n    // 等待上传的文件\n    const toUploadFiles: Ref<Array<UploadFile>> = ref([]);\n    // 上传成功的文件\n    const uploadedFiles: ComputedRef<UploadFile[]> = computed(() => {\n      if (innerFiles.value && isArray(innerFiles.value)) {\n        // 上传失败的文件用localUrl展示，并且可上传重试\n        return innerFiles.value;\n      }\n      return [];\n    });\n    const errorMsg = ref('');\n    const inputRef = ref<null | HTMLInputElement>(null);\n\n    const itemStyle = computed(() => {\n      const { gridConfig } = toRefs(props);\n      let column = 4;\n      if (isObject(gridConfig.value)) {\n        ({ column } = gridConfig.value as any);\n      }\n      return {\n        flexBasis: `${100 / +column}%`,\n      };\n    });\n\n    const itemContentStyle = computed(() => {\n      let width = 80;\n      let height = 80;\n      const { gridConfig } = toRefs(props);\n      if (isObject(gridConfig.value)) {\n        ({ width, height } = gridConfig.value as any);\n      }\n      return {\n        height: `${height}px`,\n        width: `${width}px`,\n      };\n    });\n\n    const triggerUpload = () => {\n      const input = inputRef.value as HTMLInputElement;\n      if (props.disabled) return;\n      input.click();\n    };\n\n    const handlePreview = (e: MouseEvent, file: UploadFile) => {\n      showViewer.value = true;\n      emitEvent('preview', {\n        e,\n        file,\n      });\n    };\n\n    const handleReload = (file: UploadFile) => {\n      uploadFiles([file.fileRaw]);\n    };\n\n    const handleChange = () => {\n      const input = inputRef.value;\n      if (props.disabled || !input || !input.files) return;\n      const formatFiles = formatFileToUploadFile(input.files);\n      emitEvent('select-change', [...formatFiles]);\n      uploadFiles(formatFiles);\n      input.value = '';\n    };\n\n    const formatFileToUploadFile = (files: FileList): File[] => {\n      const { format } = props;\n      if (!format || !isFunction(format)) {\n        const res = [];\n        for (let i = 0; i < files.length; i++) {\n          res.push(files[i]);\n        }\n        return res;\n      }\n\n      const NewFiles = [...files];\n      NewFiles.forEach((item) => {\n        item = format(item) as any;\n      });\n      return NewFiles;\n    };\n\n    const handleBeforeUpload = (file: File | UploadFile): Promise<boolean> => {\n      if (props.beforeUpload && isFunction(props.beforeUpload)) {\n        const beforeUpload = props.beforeUpload(file);\n        if (beforeUpload instanceof Promise) return beforeUpload;\n        return Promise.resolve(beforeUpload);\n      }\n      return new Promise((resolve) => {\n        if (props.sizeLimit) {\n          resolve(handleSizeLimit(file.size));\n        }\n        resolve(true);\n      });\n    };\n\n    const handleSizeLimit = (fileSize: number) => {\n      let sizeLimit: SizeLimitObj;\n      if (typeof props.sizeLimit === 'number') {\n        sizeLimit = { size: props.sizeLimit, unit: 'KB' };\n      } else if (typeof props.sizeLimit === 'object') {\n        sizeLimit = props.sizeLimit;\n      } else {\n        sizeLimit = { size: 0, unit: 'KB' };\n      }\n      const isOverSize = isOverSizeLimit(fileSize, sizeLimit.size, sizeLimit.unit);\n      if (isOverSize) {\n        errorMsg.value = sizeLimit.message\n          ? sizeLimit.message\n          : `TDesign Upoad Error: uploaded picture exceeds ${props.sizeLimit}${sizeLimit.unit} restrictions`;\n      }\n      return isOverSize;\n    };\n\n    const uploadFiles = (files: File[]) => {\n      const { max } = toRefs(props);\n      let tmpFiles = [...files];\n      if (max.value) {\n        tmpFiles = tmpFiles.slice(0, max.value - uploadedFiles.value.length);\n        if (tmpFiles.length !== files.length) {\n          console.warn(`TDesign Upload Warn: you can only upload ${max.value} files`);\n        }\n      }\n      tmpFiles.forEach((fileRaw: any) => {\n        const uploadFile: UploadFile = {\n          ...fileRaw,\n          fileRaw,\n          lastModified: fileRaw.lastModified,\n          name: fileRaw.name,\n          size: fileRaw.size,\n          type: fileRaw.type,\n          percent: 0,\n          status: 'waiting',\n        };\n        const reader = new FileReader();\n        reader.readAsDataURL(fileRaw);\n        reader.onload = (event: ProgressEvent<FileReader>) => {\n          uploadFile.url = event.target?.result as string;\n        };\n        handleBeforeUpload(fileRaw).then((canUpload) => {\n          if (!canUpload) return;\n          const newFiles: Array<UploadFile> = toUploadFiles.value.concat();\n\n          // 判断是否为重复文件条件，已选是否存在检验\n          if (props.allowUploadDuplicateFile || !toUploadFiles.value.find((file) => file.name === uploadFile.name)) {\n            newFiles.push(uploadFile);\n          }\n          toUploadFiles.value = newFiles;\n          if (props.autoUpload) {\n            upload(uploadFile);\n          }\n        });\n      });\n    };\n\n    /** 模拟进度条 Mock Progress */\n    const handleMockProgress = (file: UploadFile) => {\n      const timer = setInterval(() => {\n        if (file.status === 'success' || file.percent >= 99) {\n          clearInterval(timer);\n          return;\n        }\n        file.percent += 1;\n        handleProgress({\n          file,\n          percent: file.percent,\n          type: 'mock',\n        });\n      }, 10);\n    };\n\n    const handleProgress = ({ event, file, percent, type = 'real' }: InnerProgressContext) => {\n      if (!file) throw new Error('Error file');\n      file.percent = Math.min(percent, 100);\n      const progressCtx = {\n        percent,\n        e: event,\n        file,\n        type,\n      };\n      emitEvent('progress', progressCtx);\n    };\n\n    const handleRemove = (e: MouseEvent, file: UploadFile, index: number) => {\n      errorMsg.value = '';\n      const files = uploadedFiles.value.concat();\n      files.splice(index, 1);\n      setInnerFiles(files, { e, trigger: 'remove', index, file });\n      emitEvent('remove', { e, index, file });\n      images.value.splice(index, 1);\n    };\n\n    const upload = async (file: UploadFile): Promise<void> => {\n      if (!props.action && !props.requestMethod) {\n        console.error('TDesign Upload Error: one of action and requestMethod must be exist.');\n        return;\n      }\n      errorMsg.value = '';\n      file.status = 'progress';\n      // requestMethod 为父组件定义的自定义上传方法\n      if (props.requestMethod) {\n        handleRequestMethod(file);\n      } else {\n        // 模拟进度条\n        if (props.useMockProgress) {\n          handleMockProgress(file);\n        }\n        const request = xhr;\n        xhrReq.value = request({\n          action: props.action,\n          data: {\n            file: file.fileRaw,\n            ...props.data,\n          },\n          file,\n          method: props.method,\n          headers: props.headers || {},\n          withCredentials: props.withCredentials,\n          onError: handleError,\n          onProgress: handleProgress,\n          onSuccess: handleSuccess,\n        } as any);\n      }\n    };\n\n    const handleRequestMethod = (file: UploadFile) => {\n      if (!isFunction(props.requestMethod)) {\n        console.warn('TDesign Upload Warn: `requestMethod` must be a function.');\n        return;\n      }\n      props.requestMethod?.(file).then((res: RequestMethodResponse) => {\n        if (!handleRequestMethodResponse(res)) return;\n        if (res.status === 'success') {\n          handleSuccess({ file, response: res.response });\n        } else if (res.status === 'fail') {\n          const r = res.response || {};\n          handleError({ event: undefined, file, response: { ...r, error: res.error } });\n        }\n      });\n    };\n\n    const handleRequestMethodResponse = (res: RequestMethodResponse) => {\n      if (!res) {\n        console.error('TDesign Upoad Error: `requestMethodResponse` is required.');\n        return false;\n      }\n      if (!res.status) {\n        console.error(\n          'TDesign Upoad Error: `requestMethodResponse.status` is missing, which value is `success` or `fail`',\n        );\n        return false;\n      }\n      if (!['success', 'fail'].includes(res.status)) {\n        console.error('TDesign Upoad Error: `requestMethodResponse.status` must be `success` or `fail`');\n        return false;\n      }\n      if (res.status === 'success' && (!res.response || !res.response.url)) {\n        console.warn(\n          'TDesign Upoad Warn: `requestMethodResponse.response.url` is required, when `status` is `success`',\n        );\n      }\n      return true;\n    };\n\n    const handleSuccess = ({ event, file, response }: SuccessContext) => {\n      if (!file) throw new Error('Error file');\n      file.status = 'success';\n      let res = response;\n      if (props.formatResponse && isFunction(props.formatResponse)) {\n        res = props.formatResponse(response, { file: file as UploadFile });\n      }\n      // 如果返回值存在 error，则认为当前接口上传失败\n      if (res?.error) {\n        handleError({\n          event,\n          file: file as UploadFile,\n          response: res,\n          resFormatted: true,\n        });\n        return;\n      }\n      file.url = res?.url || file.url;\n      // 从待上传文件队列中移除上传成功的文件\n      const index = findIndex(toUploadFiles.value, (o: UploadFile) => o.name === file.name);\n      toUploadFiles.value.splice(index, 1);\n      // 上传成功的文件发送到 files\n      const newFile = { ...file, response: res };\n      const files = uploadedFiles.value.concat(newFile as UploadFile);\n      setInnerFiles(files, { e: event, response: res, trigger: 'upload-success' });\n      emitEvent('success', {\n        file,\n        fileList: files,\n        e: event,\n        response: res,\n      });\n      images.value.push(newFile.url as string);\n    };\n\n    const handleError = (options: {\n      event?: ProgressEvent;\n      file: UploadFile;\n      response?: any;\n      resFormatted?: boolean;\n    }) => {\n      const { event, file, response, resFormatted } = options;\n      file.status = 'fail';\n      let res = response;\n      if (!resFormatted && props.formatResponse && isFunction(props.formatResponse)) {\n        res = props.formatResponse(response, { file });\n      }\n      errorMsg.value = res?.error;\n      if (\n        !uploadedFiles.value.find((item) => {\n          return item.name === file.name;\n        })\n      ) {\n        const files = uploadedFiles.value.concat(file);\n        setInnerFiles(files, { e: event, response: res, trigger: 'upload-fail' });\n      }\n      emitEvent('fail', { e: event, file });\n    };\n\n    return {\n      ...toRefs(props),\n      UPLOAD_NAME,\n      images,\n      showViewer,\n      initialIndex,\n      prefix,\n      innerFiles,\n      xhrReq,\n      toUploadFiles,\n      errorMsg,\n      inputRef,\n      uploadedFiles,\n      deleteBtnContent,\n      defaultContent,\n      itemStyle,\n      itemContentStyle,\n      emitEvent,\n      setInnerFiles,\n      triggerUpload,\n      handleChange,\n      handlePreview,\n      handleReload,\n      handleBeforeUpload,\n      handleSizeLimit,\n      uploadFiles,\n      handleMockProgress,\n      handleProgress,\n      handleRemove,\n      upload,\n      handleRequestMethodResponse,\n      handleSuccess,\n      handleError,\n    };\n  },\n});\n</script>\n","<template>\n  <div>\n    <ul :class=\"`${UPLOAD_NAME}__card`\">\n      <li v-for=\"(file, index) in uploadedFiles\" :key=\"index\" :class=\"`${UPLOAD_NAME}__card-item`\" :style=\"itemStyle\">\n        <div :class=\"`${UPLOAD_NAME}__card-content ${UPLOAD_NAME}__card-box`\" :style=\"itemContentStyle\">\n          <div\n            key=\"delete-icon\"\n            :class=\"`${UPLOAD_NAME}__card-delete-item`\"\n            @click=\"(e) => handleRemove(e, file, index)\"\n          >\n            <template v-if=\"deleteBtnContent\">\n              <t-node :content=\"deleteBtnContent\"></t-node>\n            </template>\n            <template v-else>\n              <close-icon class=\"close-icon\" />\n            </template>\n          </div>\n          <img :class=\"`${UPLOAD_NAME}__card-image`\" :src=\"file.url\" @click=\"(e) => handlePreview(e, file)\" />\n          <!--上传失败时，reload重试-->\n          <div v-if=\"file.status === 'fail'\" :class=\"`${UPLOAD_NAME}__card-mask`\">\n            <span key=\"refresh-icon\" :class=\"`${UPLOAD_NAME}__card-mask-item`\">\n              <refresh-icon @click=\"handleReload(file)\" />\n            </span>\n          </div>\n        </div>\n      </li>\n      <template v-if=\"defaultContent\">\n        <div @click=\"triggerUpload\">\n          <t-node :content=\"defaultContent\"></t-node>\n        </div>\n      </template>\n      <template v-else>\n        <li :class=\"`${UPLOAD_NAME}__card-item`\" @click=\"triggerUpload\">\n          <div :class=\"`${UPLOAD_NAME}__card-container ${UPLOAD_NAME}__card-box`\">\n            <add-icon></add-icon>\n          </div>\n        </li>\n      </template>\n    </ul>\n    <input\n      ref=\"inputRef\"\n      :value=\"files\"\n      type=\"file\"\n      :multiple=\"multiple\"\n      hidden\n      :accept=\"accept\"\n      @change=\"handleChange\"\n    />\n    <t-image-viewer v-model:images=\"images\" v-model=\"showViewer\" :initial-index=\"initialIndex\"></t-image-viewer>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, SetupContext, getCurrentInstance, ref, Ref, toRefs, computed, ComputedRef } from 'vue';\nimport { AddIcon, CloseIcon, RefreshIcon } from 'tdesign-icons-vue-next';\nimport findIndex from 'lodash/findIndex';\nimport isObject from 'lodash/isObject';\nimport isFunction from 'lodash/isFunction';\n\nimport xhr from '../_common/js/upload/xhr';\nimport { useDefault, useEmitEvent, renderTNode, TNode } from '../shared';\nimport { TdUploadProps, UploadFile, RequestMethodResponse, SizeLimitObj } from './type';\nimport { SuccessContext, InnerProgressContext } from './interface';\nimport UploadProps from './props';\nimport config from '../config';\nimport { isOverSizeLimit } from './util';\nimport TImageViewer from '../image-viewer';\n\nconst { prefix } = config;\nconst name = `${prefix}-upload`;\nconst { isArray } = Array;\n\nexport default defineComponent({\n  name,\n  components: {\n    AddIcon,\n    TNode,\n    CloseIcon,\n    RefreshIcon,\n    TImageViewer,\n  },\n  props: UploadProps,\n  emits: [\n    'update:files',\n    'update:modelValue',\n    'change',\n    'fail',\n    'preview',\n    'progress',\n    'remove',\n    'success',\n    'select-change',\n  ],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const [innerFiles, setInnerFiles] = useDefault<TdUploadProps['files'], TdUploadProps>(\n      props,\n      context.emit,\n      'files',\n      'change',\n    );\n    const internalInstance = getCurrentInstance();\n    const defaultContent = computed(() => renderTNode(internalInstance, 'default'));\n    const deleteBtnContent = computed(() => renderTNode(internalInstance, 'deleteBtn'));\n    const images: Ref<Array<string>> = ref([]);\n    const showViewer = ref(false);\n    const initialIndex = ref(0);\n    const UPLOAD_NAME = name;\n    const xhrReq = ref<XMLHttpRequest | null>(null);\n    // 等待上传的文件\n    const toUploadFiles: Ref<Array<UploadFile>> = ref([]);\n    // 上传成功的文件\n    const uploadedFiles: ComputedRef<UploadFile[]> = computed(() => {\n      if (innerFiles.value && isArray(innerFiles.value)) {\n        // 上传失败的文件用localUrl展示，并且可上传重试\n        return innerFiles.value;\n      }\n      return [];\n    });\n    const errorMsg = ref('');\n    const inputRef = ref<null | HTMLInputElement>(null);\n\n    const itemStyle = computed(() => {\n      const { gridConfig } = toRefs(props);\n      let column = 4;\n      if (isObject(gridConfig.value)) {\n        ({ column } = gridConfig.value as any);\n      }\n      return {\n        flexBasis: `${100 / +column}%`,\n      };\n    });\n\n    const itemContentStyle = computed(() => {\n      let width = 80;\n      let height = 80;\n      const { gridConfig } = toRefs(props);\n      if (isObject(gridConfig.value)) {\n        ({ width, height } = gridConfig.value as any);\n      }\n      return {\n        height: `${height}px`,\n        width: `${width}px`,\n      };\n    });\n\n    const triggerUpload = () => {\n      const input = inputRef.value as HTMLInputElement;\n      if (props.disabled) return;\n      input.click();\n    };\n\n    const handlePreview = (e: MouseEvent, file: UploadFile) => {\n      showViewer.value = true;\n      emitEvent('preview', {\n        e,\n        file,\n      });\n    };\n\n    const handleReload = (file: UploadFile) => {\n      uploadFiles([file.fileRaw]);\n    };\n\n    const handleChange = () => {\n      const input = inputRef.value;\n      if (props.disabled || !input || !input.files) return;\n      const formatFiles = formatFileToUploadFile(input.files);\n      emitEvent('select-change', [...formatFiles]);\n      uploadFiles(formatFiles);\n      input.value = '';\n    };\n\n    const formatFileToUploadFile = (files: FileList): File[] => {\n      const { format } = props;\n      if (!format || !isFunction(format)) {\n        const res = [];\n        for (let i = 0; i < files.length; i++) {\n          res.push(files[i]);\n        }\n        return res;\n      }\n\n      const NewFiles = [...files];\n      NewFiles.forEach((item) => {\n        item = format(item) as any;\n      });\n      return NewFiles;\n    };\n\n    const handleBeforeUpload = (file: File | UploadFile): Promise<boolean> => {\n      if (props.beforeUpload && isFunction(props.beforeUpload)) {\n        const beforeUpload = props.beforeUpload(file);\n        if (beforeUpload instanceof Promise) return beforeUpload;\n        return Promise.resolve(beforeUpload);\n      }\n      return new Promise((resolve) => {\n        if (props.sizeLimit) {\n          resolve(handleSizeLimit(file.size));\n        }\n        resolve(true);\n      });\n    };\n\n    const handleSizeLimit = (fileSize: number) => {\n      let sizeLimit: SizeLimitObj;\n      if (typeof props.sizeLimit === 'number') {\n        sizeLimit = { size: props.sizeLimit, unit: 'KB' };\n      } else if (typeof props.sizeLimit === 'object') {\n        sizeLimit = props.sizeLimit;\n      } else {\n        sizeLimit = { size: 0, unit: 'KB' };\n      }\n      const isOverSize = isOverSizeLimit(fileSize, sizeLimit.size, sizeLimit.unit);\n      if (isOverSize) {\n        errorMsg.value = sizeLimit.message\n          ? sizeLimit.message\n          : `TDesign Upoad Error: uploaded picture exceeds ${props.sizeLimit}${sizeLimit.unit} restrictions`;\n      }\n      return isOverSize;\n    };\n\n    const uploadFiles = (files: File[]) => {\n      const { max } = toRefs(props);\n      let tmpFiles = [...files];\n      if (max.value) {\n        tmpFiles = tmpFiles.slice(0, max.value - uploadedFiles.value.length);\n        if (tmpFiles.length !== files.length) {\n          console.warn(`TDesign Upload Warn: you can only upload ${max.value} files`);\n        }\n      }\n      tmpFiles.forEach((fileRaw: any) => {\n        const uploadFile: UploadFile = {\n          ...fileRaw,\n          fileRaw,\n          lastModified: fileRaw.lastModified,\n          name: fileRaw.name,\n          size: fileRaw.size,\n          type: fileRaw.type,\n          percent: 0,\n          status: 'waiting',\n        };\n        const reader = new FileReader();\n        reader.readAsDataURL(fileRaw);\n        reader.onload = (event: ProgressEvent<FileReader>) => {\n          uploadFile.url = event.target?.result as string;\n        };\n        handleBeforeUpload(fileRaw).then((canUpload) => {\n          if (!canUpload) return;\n          const newFiles: Array<UploadFile> = toUploadFiles.value.concat();\n\n          // 判断是否为重复文件条件，已选是否存在检验\n          if (props.allowUploadDuplicateFile || !toUploadFiles.value.find((file) => file.name === uploadFile.name)) {\n            newFiles.push(uploadFile);\n          }\n          toUploadFiles.value = newFiles;\n          if (props.autoUpload) {\n            upload(uploadFile);\n          }\n        });\n      });\n    };\n\n    /** 模拟进度条 Mock Progress */\n    const handleMockProgress = (file: UploadFile) => {\n      const timer = setInterval(() => {\n        if (file.status === 'success' || file.percent >= 99) {\n          clearInterval(timer);\n          return;\n        }\n        file.percent += 1;\n        handleProgress({\n          file,\n          percent: file.percent,\n          type: 'mock',\n        });\n      }, 10);\n    };\n\n    const handleProgress = ({ event, file, percent, type = 'real' }: InnerProgressContext) => {\n      if (!file) throw new Error('Error file');\n      file.percent = Math.min(percent, 100);\n      const progressCtx = {\n        percent,\n        e: event,\n        file,\n        type,\n      };\n      emitEvent('progress', progressCtx);\n    };\n\n    const handleRemove = (e: MouseEvent, file: UploadFile, index: number) => {\n      errorMsg.value = '';\n      const files = uploadedFiles.value.concat();\n      files.splice(index, 1);\n      setInnerFiles(files, { e, trigger: 'remove', index, file });\n      emitEvent('remove', { e, index, file });\n      images.value.splice(index, 1);\n    };\n\n    const upload = async (file: UploadFile): Promise<void> => {\n      if (!props.action && !props.requestMethod) {\n        console.error('TDesign Upload Error: one of action and requestMethod must be exist.');\n        return;\n      }\n      errorMsg.value = '';\n      file.status = 'progress';\n      // requestMethod 为父组件定义的自定义上传方法\n      if (props.requestMethod) {\n        handleRequestMethod(file);\n      } else {\n        // 模拟进度条\n        if (props.useMockProgress) {\n          handleMockProgress(file);\n        }\n        const request = xhr;\n        xhrReq.value = request({\n          action: props.action,\n          data: {\n            file: file.fileRaw,\n            ...props.data,\n          },\n          file,\n          method: props.method,\n          headers: props.headers || {},\n          withCredentials: props.withCredentials,\n          onError: handleError,\n          onProgress: handleProgress,\n          onSuccess: handleSuccess,\n        } as any);\n      }\n    };\n\n    const handleRequestMethod = (file: UploadFile) => {\n      if (!isFunction(props.requestMethod)) {\n        console.warn('TDesign Upload Warn: `requestMethod` must be a function.');\n        return;\n      }\n      props.requestMethod?.(file).then((res: RequestMethodResponse) => {\n        if (!handleRequestMethodResponse(res)) return;\n        if (res.status === 'success') {\n          handleSuccess({ file, response: res.response });\n        } else if (res.status === 'fail') {\n          const r = res.response || {};\n          handleError({ event: undefined, file, response: { ...r, error: res.error } });\n        }\n      });\n    };\n\n    const handleRequestMethodResponse = (res: RequestMethodResponse) => {\n      if (!res) {\n        console.error('TDesign Upoad Error: `requestMethodResponse` is required.');\n        return false;\n      }\n      if (!res.status) {\n        console.error(\n          'TDesign Upoad Error: `requestMethodResponse.status` is missing, which value is `success` or `fail`',\n        );\n        return false;\n      }\n      if (!['success', 'fail'].includes(res.status)) {\n        console.error('TDesign Upoad Error: `requestMethodResponse.status` must be `success` or `fail`');\n        return false;\n      }\n      if (res.status === 'success' && (!res.response || !res.response.url)) {\n        console.warn(\n          'TDesign Upoad Warn: `requestMethodResponse.response.url` is required, when `status` is `success`',\n        );\n      }\n      return true;\n    };\n\n    const handleSuccess = ({ event, file, response }: SuccessContext) => {\n      if (!file) throw new Error('Error file');\n      file.status = 'success';\n      let res = response;\n      if (props.formatResponse && isFunction(props.formatResponse)) {\n        res = props.formatResponse(response, { file: file as UploadFile });\n      }\n      // 如果返回值存在 error，则认为当前接口上传失败\n      if (res?.error) {\n        handleError({\n          event,\n          file: file as UploadFile,\n          response: res,\n          resFormatted: true,\n        });\n        return;\n      }\n      file.url = res?.url || file.url;\n      // 从待上传文件队列中移除上传成功的文件\n      const index = findIndex(toUploadFiles.value, (o: UploadFile) => o.name === file.name);\n      toUploadFiles.value.splice(index, 1);\n      // 上传成功的文件发送到 files\n      const newFile = { ...file, response: res };\n      const files = uploadedFiles.value.concat(newFile as UploadFile);\n      setInnerFiles(files, { e: event, response: res, trigger: 'upload-success' });\n      emitEvent('success', {\n        file,\n        fileList: files,\n        e: event,\n        response: res,\n      });\n      images.value.push(newFile.url as string);\n    };\n\n    const handleError = (options: {\n      event?: ProgressEvent;\n      file: UploadFile;\n      response?: any;\n      resFormatted?: boolean;\n    }) => {\n      const { event, file, response, resFormatted } = options;\n      file.status = 'fail';\n      let res = response;\n      if (!resFormatted && props.formatResponse && isFunction(props.formatResponse)) {\n        res = props.formatResponse(response, { file });\n      }\n      errorMsg.value = res?.error;\n      if (\n        !uploadedFiles.value.find((item) => {\n          return item.name === file.name;\n        })\n      ) {\n        const files = uploadedFiles.value.concat(file);\n        setInnerFiles(files, { e: event, response: res, trigger: 'upload-fail' });\n      }\n      emitEvent('fail', { e: event, file });\n    };\n\n    return {\n      ...toRefs(props),\n      UPLOAD_NAME,\n      images,\n      showViewer,\n      initialIndex,\n      prefix,\n      innerFiles,\n      xhrReq,\n      toUploadFiles,\n      errorMsg,\n      inputRef,\n      uploadedFiles,\n      deleteBtnContent,\n      defaultContent,\n      itemStyle,\n      itemContentStyle,\n      emitEvent,\n      setInnerFiles,\n      triggerUpload,\n      handleChange,\n      handlePreview,\n      handleReload,\n      handleBeforeUpload,\n      handleSizeLimit,\n      uploadFiles,\n      handleMockProgress,\n      handleProgress,\n      handleRemove,\n      upload,\n      handleRequestMethodResponse,\n      handleSuccess,\n      handleError,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}