{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _typeof from '@babel/runtime/helpers/typeof';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport { defineComponent, ref, toRefs, computed, getCurrentInstance, nextTick, onMounted, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, createCommentVNode, createElementVNode, normalizeStyle, toDisplayString } from 'vue';\nimport '../shared/index.js';\nimport config from '../config.js';\nimport TextareaProps from './props.js';\nimport calcTextareaHeight from '../_common/js/utils/calcTextareaHeight.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { useEmitEvent } from '../shared/useEmitEvent/index.js';\nimport { useVModel } from '../shared/useVModel/index.js';\nimport { renderTNode } from '../shared/render.js';\nimport { getCharacterLength } from '../shared/util.js';\nimport '../shared/functions.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '../_common/js/utils/helper.js';\nimport '@babel/runtime/helpers/objectWithoutProperties';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar componentName = \"\".concat(prefix, \"-textarea\");\nvar script = defineComponent({\n  name: componentName,\n  components: {\n    TNode: TNodeComponent\n  },\n  props: TextareaProps,\n  emits: [\"update:value\", \"update:modelValue\", \"focus\", \"blur\", \"change\"],\n  setup: function setup(props, context) {\n    var emitEvent = useEmitEvent(props, context.emit);\n    var textareaRef = ref(null);\n    var textareaStyle = ref();\n    var textareaLength = ref(0);\n    var _toRefs = toRefs(props),\n      value = _toRefs.value,\n      modelValue = _toRefs.modelValue;\n    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),\n      _useVModel2 = _slicedToArray(_useVModel, 2),\n      innerValue = _useVModel2[0],\n      setInnerValue = _useVModel2[1];\n    var textareaClassNames = computed(function () {\n      return [\"\".concat(componentName, \"__wrapper\"), _defineProperty({}, \"\".concat(componentName, \"-is-disabled\"), props.disabled)];\n    });\n    var internalInstance = getCurrentInstance();\n    var labelContent = computed(function () {\n      return renderTNode(internalInstance, \"label\");\n    });\n    var setInputValue = function setInputValue() {\n      var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      var input = textareaRef.value;\n      var sV = String(v);\n      if (!input) {\n        return;\n      }\n      if (input.value !== sV) {\n        input.value = sV;\n      }\n    };\n    var adjustTextareaHeight = function adjustTextareaHeight() {\n      if (props.autosize === true) {\n        textareaStyle.value = calcTextareaHeight(textareaRef.value);\n      } else if (_typeof(props.autosize) === \"object\") {\n        var _props$autosize = props.autosize,\n          minRows = _props$autosize.minRows,\n          maxRows = _props$autosize.maxRows;\n        textareaStyle.value = calcTextareaHeight(textareaRef.value, minRows, maxRows);\n      } else if (context.attrs.rows) {\n        textareaStyle.value = {\n          height: \"auto\",\n          minHeight: \"auto\"\n        };\n      }\n    };\n    var handleInput = function handleInput(e) {\n      if (e.isComposing || e.inputType === \"insertCompositionText\") return;\n      textareaValueChangeHandle(e);\n    };\n    var textareaValueChangeHandle = function textareaValueChangeHandle(e) {\n      var target = e.target;\n      var value2 = target.value;\n      if (props.maxcharacter && props.maxcharacter > 0 && !Number.isNaN(props.maxcharacter)) {\n        var _getCharacterLength = getCharacterLength(value2, props.maxcharacter),\n          _getCharacterLength$l = _getCharacterLength.length,\n          length = _getCharacterLength$l === void 0 ? 0 : _getCharacterLength$l,\n          _getCharacterLength$c = _getCharacterLength.characters,\n          characters = _getCharacterLength$c === void 0 ? \"\" : _getCharacterLength$c;\n        setInnerValue(characters);\n        textareaLength.value = length;\n      } else {\n        setInnerValue(value2);\n        textareaLength.value = String(innerValue.value).length;\n      }\n      nextTick(function () {\n        return setInputValue(innerValue.value);\n      });\n      adjustTextareaHeight();\n    };\n    var handleCompositionend = function handleCompositionend(e) {\n      textareaValueChangeHandle(e);\n    };\n    var handleFocus = function handleFocus(e) {\n      emitEvent(\"focus\", innerValue.value, {\n        e: e\n      });\n    };\n    var handleBlur = function handleBlur(e) {\n      emitEvent(\"blur\", innerValue.value, {\n        e: e\n      });\n    };\n    onMounted(function () {\n      if (props.autofocus) {\n        var _textareaRef$value;\n        (_textareaRef$value = textareaRef.value) === null || _textareaRef$value === void 0 ? void 0 : _textareaRef$value.focus();\n      }\n      adjustTextareaHeight();\n    });\n    return _objectSpread(_objectSpread({\n      componentName: componentName\n    }, toRefs(props)), {}, {\n      labelContent: labelContent,\n      innerValue: innerValue,\n      textareaRef: textareaRef,\n      textareaStyle: textareaStyle,\n      textareaClassNames: textareaClassNames,\n      textareaLength: textareaLength,\n      handleFocus: handleFocus,\n      handleBlur: handleBlur,\n      handleInput: handleInput,\n      handleCompositionend: handleCompositionend\n    });\n  }\n});\nvar _hoisted_1 = [\"value\", \"name\", \"maxlength\", \"disabled\", \"placeholder\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_node = resolveComponent(\"t-node\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.componentName)\n  }, [_ctx.labelContent ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.componentName, \"__name\"))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.labelContent\n  }, null, 8, [\"content\"])], 2)) : createCommentVNode(\"\", true), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.textareaClassNames)\n  }, [createElementVNode(\"textarea\", {\n    ref: \"textareaRef\",\n    value: _ctx.innerValue,\n    style: normalizeStyle(_ctx.textareaStyle),\n    name: _ctx.name,\n    maxlength: _ctx.maxlength || -1,\n    disabled: _ctx.disabled,\n    placeholder: _ctx.placeholder,\n    onFocus: _cache[0] || (_cache[0] = function () {\n      return _ctx.handleFocus && _ctx.handleFocus.apply(_ctx, arguments);\n    }),\n    onBlur: _cache[1] || (_cache[1] = function () {\n      return _ctx.handleBlur && _ctx.handleBlur.apply(_ctx, arguments);\n    }),\n    onInput: _cache[2] || (_cache[2] = function () {\n      return _ctx.handleInput && _ctx.handleInput.apply(_ctx, arguments);\n    }),\n    onCompositionend: _cache[3] || (_cache[3] = function () {\n      return _ctx.handleCompositionend && _ctx.handleCompositionend.apply(_ctx, arguments);\n    })\n  }, null, 44, _hoisted_1), _ctx.maxcharacter || _ctx.maxlength ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.componentName, \"__count\"))\n  }, toDisplayString(\"\".concat(_ctx.textareaLength, \"/\").concat(_ctx.maxcharacter || _ctx.maxlength)), 3)) : createCommentVNode(\"\", true)], 2)], 2);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":"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","names":["prefix","config","componentName","defineComponent","name","components","TNode","props","emits","setup","context","emitEvent","emit","ref","textareaStyle","toRefs","value","modelValue","useVModel","defaultValue","onChange","_useVModel2","innerValue","setInnerValue","computed","internalInstance","getCurrentInstance","labelContent","renderTNode","setInputValue","v","input","textareaRef","String","sV","adjustTextareaHeight","autosize","calcTextareaHeight","minRows","maxRows","rows","height","minHeight","handleInput","e","isComposing","inputType","textareaValueChangeHandle","target","maxcharacter","Number","getCharacterLength","_getCharacterLength$l","length","_getCharacterLength$c","characters","textareaLength","nextTick","handleCompositionend","handleFocus","handleBlur","onMounted","autofocus","focus","textareaClassNames","class","_ctx","_createElementBlock","_createVNode","_component_t_node","content","_createElementVNode","style","maxlength","disabled","placeholder","onFocus","onBlur","onInput","onCompositionend"],"sources":["../../src/textarea/textarea.vue","../../src/textarea/textarea.vue?vue&type=template&id=67798370&lang.js"],"sourcesContent":["<template>\n  <div :class=\"componentName\">\n    <div v-if=\"labelContent\" :class=\"`${componentName}__name`\">\n      <t-node :content=\"labelContent\"></t-node>\n    </div>\n    <div :class=\"textareaClassNames\">\n      <textarea\n        ref=\"textareaRef\"\n        :value=\"innerValue\"\n        :style=\"textareaStyle\"\n        :name=\"name\"\n        :maxlength=\"maxlength || -1\"\n        :disabled=\"disabled\"\n        :placeholder=\"placeholder\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @input=\"handleInput\"\n        @compositionend=\"handleCompositionend\"\n      />\n      <div v-if=\"maxcharacter || maxlength\" :class=\"`${componentName}__count`\">\n        {{ `${textareaLength}/${maxcharacter || maxlength}` }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, ref, onMounted, defineComponent, getCurrentInstance, toRefs, SetupContext, nextTick } from 'vue';\nimport { useEmitEvent, renderTNode, TNode, getCharacterLength, useVModel } from '../shared';\nimport config from '../config';\nimport TextareaProps from './props';\nimport { TdTextareaProps, TextareaValue } from './type';\nimport calcTextareaHeight from '../_common/js/utils/calcTextareaHeight';\n\nconst { prefix } = config;\nconst componentName = `${prefix}-textarea`;\n\nexport default defineComponent({\n  name: componentName,\n  components: {\n    TNode,\n  },\n  props: TextareaProps,\n  emits: ['update:value', 'update:modelValue', 'focus', 'blur', 'change'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const textareaRef = ref<null | HTMLElement>(null);\n    const textareaStyle = ref();\n    const textareaLength = ref(0);\n    const { value, modelValue } = toRefs(props);\n    const [innerValue, setInnerValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n\n    const textareaClassNames = computed(() => [\n      `${componentName}__wrapper`,\n      {\n        [`${componentName}-is-disabled`]: props.disabled,\n      },\n    ]);\n    const internalInstance = getCurrentInstance();\n    const labelContent = computed(() => renderTNode(internalInstance, 'label'));\n\n    const setInputValue = (v: TextareaValue = '') => {\n      const input = textareaRef.value as HTMLTextAreaElement;\n      const sV = String(v);\n      if (!input) {\n        return;\n      }\n      if (input.value !== sV) {\n        input.value = sV;\n      }\n    };\n\n    const adjustTextareaHeight = () => {\n      if (props.autosize === true) {\n        textareaStyle.value = calcTextareaHeight(textareaRef.value as HTMLTextAreaElement);\n      } else if (typeof props.autosize === 'object') {\n        const { minRows, maxRows } = props.autosize;\n        textareaStyle.value = calcTextareaHeight(textareaRef.value as HTMLTextAreaElement, minRows, maxRows);\n      } else if (context.attrs.rows) {\n        textareaStyle.value = { height: 'auto', minHeight: 'auto' };\n      }\n    };\n\n    const handleInput = (e: any) => {\n      if (e.isComposing || e.inputType === 'insertCompositionText') return;\n      textareaValueChangeHandle(e);\n    };\n\n    const textareaValueChangeHandle = (e: InputEvent) => {\n      const { target } = e;\n      const { value } = target as HTMLInputElement;\n      if (props.maxcharacter && props.maxcharacter > 0 && !Number.isNaN(props.maxcharacter)) {\n        const { length = 0, characters = '' } = getCharacterLength(value, props.maxcharacter) as {\n          length: number;\n          characters: string;\n        };\n        setInnerValue(characters);\n        textareaLength.value = length;\n      } else {\n        setInnerValue(value);\n        textareaLength.value = String(innerValue.value).length;\n      }\n      nextTick(() => setInputValue(innerValue.value));\n      adjustTextareaHeight();\n    };\n\n    const handleCompositionend = (e: InputEvent | CompositionEvent) => {\n      textareaValueChangeHandle(e as InputEvent);\n    };\n\n    const handleFocus = (e: FocusEvent) => {\n      emitEvent('focus', innerValue.value, { e });\n    };\n    const handleBlur = (e: FocusEvent) => {\n      emitEvent('blur', innerValue.value, { e });\n    };\n\n    onMounted(() => {\n      if (props.autofocus) {\n        textareaRef.value?.focus();\n      }\n      adjustTextareaHeight();\n    });\n\n    return {\n      componentName,\n      ...toRefs(props),\n      labelContent,\n      innerValue,\n      textareaRef,\n      textareaStyle,\n      textareaClassNames,\n      textareaLength,\n      handleFocus,\n      handleBlur,\n      handleInput,\n      handleCompositionend,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"componentName\">\n    <div v-if=\"labelContent\" :class=\"`${componentName}__name`\">\n      <t-node :content=\"labelContent\"></t-node>\n    </div>\n    <div :class=\"textareaClassNames\">\n      <textarea\n        ref=\"textareaRef\"\n        :value=\"innerValue\"\n        :style=\"textareaStyle\"\n        :name=\"name\"\n        :maxlength=\"maxlength || -1\"\n        :disabled=\"disabled\"\n        :placeholder=\"placeholder\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @input=\"handleInput\"\n        @compositionend=\"handleCompositionend\"\n      />\n      <div v-if=\"maxcharacter || maxlength\" :class=\"`${componentName}__count`\">\n        {{ `${textareaLength}/${maxcharacter || maxlength}` }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, ref, onMounted, defineComponent, getCurrentInstance, toRefs, SetupContext, nextTick } from 'vue';\nimport { useEmitEvent, renderTNode, TNode, getCharacterLength, useVModel } from '../shared';\nimport config from '../config';\nimport TextareaProps from './props';\nimport { TdTextareaProps, TextareaValue } from './type';\nimport calcTextareaHeight from '../_common/js/utils/calcTextareaHeight';\n\nconst { prefix } = config;\nconst componentName = `${prefix}-textarea`;\n\nexport default defineComponent({\n  name: componentName,\n  components: {\n    TNode,\n  },\n  props: TextareaProps,\n  emits: ['update:value', 'update:modelValue', 'focus', 'blur', 'change'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const textareaRef = ref<null | HTMLElement>(null);\n    const textareaStyle = ref();\n    const textareaLength = ref(0);\n    const { value, modelValue } = toRefs(props);\n    const [innerValue, setInnerValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n\n    const textareaClassNames = computed(() => [\n      `${componentName}__wrapper`,\n      {\n        [`${componentName}-is-disabled`]: props.disabled,\n      },\n    ]);\n    const internalInstance = getCurrentInstance();\n    const labelContent = computed(() => renderTNode(internalInstance, 'label'));\n\n    const setInputValue = (v: TextareaValue = '') => {\n      const input = textareaRef.value as HTMLTextAreaElement;\n      const sV = String(v);\n      if (!input) {\n        return;\n      }\n      if (input.value !== sV) {\n        input.value = sV;\n      }\n    };\n\n    const adjustTextareaHeight = () => {\n      if (props.autosize === true) {\n        textareaStyle.value = calcTextareaHeight(textareaRef.value as HTMLTextAreaElement);\n      } else if (typeof props.autosize === 'object') {\n        const { minRows, maxRows } = props.autosize;\n        textareaStyle.value = calcTextareaHeight(textareaRef.value as HTMLTextAreaElement, minRows, maxRows);\n      } else if (context.attrs.rows) {\n        textareaStyle.value = { height: 'auto', minHeight: 'auto' };\n      }\n    };\n\n    const handleInput = (e: any) => {\n      if (e.isComposing || e.inputType === 'insertCompositionText') return;\n      textareaValueChangeHandle(e);\n    };\n\n    const textareaValueChangeHandle = (e: InputEvent) => {\n      const { target } = e;\n      const { value } = target as HTMLInputElement;\n      if (props.maxcharacter && props.maxcharacter > 0 && !Number.isNaN(props.maxcharacter)) {\n        const { length = 0, characters = '' } = getCharacterLength(value, props.maxcharacter) as {\n          length: number;\n          characters: string;\n        };\n        setInnerValue(characters);\n        textareaLength.value = length;\n      } else {\n        setInnerValue(value);\n        textareaLength.value = String(innerValue.value).length;\n      }\n      nextTick(() => setInputValue(innerValue.value));\n      adjustTextareaHeight();\n    };\n\n    const handleCompositionend = (e: InputEvent | CompositionEvent) => {\n      textareaValueChangeHandle(e as InputEvent);\n    };\n\n    const handleFocus = (e: FocusEvent) => {\n      emitEvent('focus', innerValue.value, { e });\n    };\n    const handleBlur = (e: FocusEvent) => {\n      emitEvent('blur', innerValue.value, { e });\n    };\n\n    onMounted(() => {\n      if (props.autofocus) {\n        textareaRef.value?.focus();\n      }\n      adjustTextareaHeight();\n    });\n\n    return {\n      componentName,\n      ...toRefs(props),\n      labelContent,\n      innerValue,\n      textareaRef,\n      textareaStyle,\n      textareaClassNames,\n      textareaLength,\n      handleFocus,\n      handleBlur,\n      handleInput,\n      handleCompositionend,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}