{"ast":null,"code":"/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport { CloseIcon } from 'tdesign-icons-vue-next';\nimport { defineComponent, getCurrentInstance, computed, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, createVNode, createCommentVNode } from 'vue';\nimport config from '../config.js';\nimport CheckTagProps from './check-tag-props.js';\nimport '../shared/index.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { useEmitEvent } from '../shared/useEmitEvent/index.js';\nimport { renderContent, renderTNode } from '../shared/render.js';\nimport { useVModel } from '../shared/useVModel/index.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/typeof';\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-check-tag\");\nvar CheckTag = defineComponent({\n  name: name,\n  components: {\n    CloseIcon: CloseIcon,\n    TNode: TNodeComponent\n  },\n  props: CheckTagProps,\n  emits: [\"change\", \"click\", \"update:checked\", \"update:modelValue\"],\n  setup: function setup(props, context) {\n    var emitEvent = useEmitEvent(props, context.emit);\n    var internalInstance = getCurrentInstance();\n    var tagContent = computed(function () {\n      return renderContent(internalInstance, \"default\", \"content\");\n    });\n    var iconContent = computed(function () {\n      return renderTNode(internalInstance, \"icon\");\n    });\n    var baseClass = \"\".concat(prefix, \"-tag\");\n    var _toRefs = toRefs(props),\n      checked = _toRefs.checked,\n      modelValue = _toRefs.modelValue;\n    var _useVModel = useVModel(checked, modelValue, props.defaultChecked, props.onChange, \"checked\"),\n      _useVModel2 = _slicedToArray(_useVModel, 2),\n      innerChecked = _useVModel2[0],\n      setInnerChecked = _useVModel2[1];\n    var classes = computed(function () {\n      var _ref;\n      return [\"\".concat(baseClass), \"\".concat(baseClass, \"--checkable\"), \"\".concat(baseClass, \"--shape-\").concat(props.shape), \"\".concat(baseClass, \"--size-\").concat(props.size), (_ref = {}, _defineProperty(_ref, \"\".concat(prefix, \"-is-closable \").concat(baseClass, \"--closable\"), props.closable), _defineProperty(_ref, \"\".concat(prefix, \"-is-disabled \").concat(baseClass, \"--disabled\"), props.disabled), _defineProperty(_ref, \"\".concat(prefix, \"-is-checked \").concat(baseClass, \"--checked\"), !props.disabled && innerChecked.value), _ref)];\n    });\n    var onClickClose = function onClickClose(e) {\n      if (!props.disabled) {\n        emitEvent(\"close\", {\n          e: e\n        });\n      }\n    };\n    var handleClick = function handleClick(e) {\n      if (!props.disabled) {\n        emitEvent(\"click\", {\n          e: e\n        });\n        setInnerChecked(!innerChecked.value);\n      }\n    };\n    return {\n      baseClass: baseClass,\n      classes: classes,\n      onClickClose: onClickClose,\n      handleClick: handleClick,\n      iconContent: iconContent,\n      tagContent: tagContent,\n      innerChecked: innerChecked\n    };\n  }\n});\nvar _hoisted_1 = [\"aria-disabled\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_node = resolveComponent(\"t-node\");\n  var _component_close_icon = resolveComponent(\"close-icon\");\n  return openBlock(), createElementBlock(\"span\", {\n    class: normalizeClass(_ctx.classes),\n    \"aria-disabled\": _ctx.disabled,\n    role: \"button\",\n    onClick: _cache[1] || (_cache[1] = function () {\n      return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);\n    })\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(\"\".concat(_ctx.baseClass, \"__icon\"))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.iconContent\n  }, null, 8, [\"content\"])], 2), createElementVNode(\"span\", {\n    class: normalizeClass(\"\".concat(_ctx.baseClass, \"__text\"))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.tagContent\n  }, null, 8, [\"content\"])], 2), _ctx.closable && !_ctx.disabled ? (openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.baseClass, \"__icon-close\")),\n    onClick: _cache[0] || (_cache[0] = function () {\n      return _ctx.onClickClose && _ctx.onClickClose.apply(_ctx, arguments);\n    })\n  }, [createVNode(_component_close_icon)], 2)) : createCommentVNode(\"\", true)], 10, _hoisted_1);\n}\nCheckTag.render = render;\nexport { CheckTag as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAQA,SAAWC,OAAXD;AACR,IAAME,OAAUF;AAEVG,eAAWC,eAAgB;EAC/BF;EACAG,UAAY;IACVC;IACAC;GACF;EACAC,KAAO;EACPC,KAAO,GAAC,QAAU,WAAS,kBAAkB,mBAAmB;EAChEC,OAAMF,sBAAOG,OAAuB;IAClC,IAAMC,SAAY,gBAAaJ,KAAO,UAAQK,IAAI;IAClD,IAAMC,mBAAmBC,kBAAmB;IAC5C,IAAMC,aAAaC,QAAS;MAAA,OAAMC,cAAcJ,gBAAkB,aAAW,SAAS,CAAC;KAAA;IACvF,IAAMK,cAAcF,QAAS;MAAA,OAAMG,WAAY,mBAAkB,MAAM,CAAC;KAAA;IACxE,IAAMC,YAAerB;IAErB,IAAgCsB,iBAAOd,KAAK;MAApCe;MAASC,UAAW,WAAXA,UAAW;IACtB,iBAAkCC,UACtCF,SACAC,YACAhB,KAAM,iBACNA,KAAM,WACN,UACF;MAAAkB;MANOC,YAAc;MAAAC,eAAe;IAQ9B,cAAUX,SAAS;MAAA;MAAA,OAAM,WAC1BI,UACAA,iDACAA,8BAAoBb,KAAM,mBAC1Ba,6BAAmBb,KAAM,oDAEtBR,MAAsB,qCAAwBQ,oBAAM,4CACpDR,MAAsB,oDAAwBQ,KAAM,UACpDR,iEAAqBqB,yBAAuB,CAACb,MAAMqB,YAAYF,YAAa,OAEnF;KAAA;IAEK,mBAAe,SAAfG,aAAgBC,CAAwB;MACxC,KAACvB,MAAMqB,QAAU;QACTjB,mBAAS;UAAEmB;QAAE,CAAC;MAC1B;KACF;IAEM,kBAAc,SAAdC,YAAeD,CAAkB;MACjC,KAACvB,MAAMqB,QAAU;QACTjB,mBAAS;UAAEmB;QAAE,CAAC;QACRH,iBAACD,aAAaM,KAAK;MACrC;KACF;IAEO;MACLZ;MACAa;MACAJ;MACAE;MACAb;MACAH;MACAW;KACF;EACF;AACF,CAAC;;;;;oBClFC,qBAUM;IAVCQ,qBAAO,MAAOD;IAAG,iBAAeE,IAAQ;IAAEC,IAAK;IAAUC;aAAOF,KAAWJ;IAAA;MAChFO,mBAEM;IAFCJ,sBAAUC,eAASf;MACxBmB,YAAuCC;IAA9BC,OAAS,OAAWvB;EAAA,+BAE/BoB,mBAEM;IAFCJ,sBAAUC,eAASf;MACxBmB,YAAsCC;IAA7BC,OAAS,OAAU1B;EAAA,+BAElBoB,kBAAaA,KAAQP,yBAAjCc,mBAEM;;IAF8BR,gCAAUC,KAASf;IAAiBiB;aAAOF,KAAYN;IAAA;MACzFU,YAAaI","names":["prefix","config","name","CheckTag","defineComponent","components","CloseIcon","TNode","props","emits","setup","context","emitEvent","emit","internalInstance","getCurrentInstance","tagContent","computed","renderContent","iconContent","renderTNode","baseClass","toRefs","checked","modelValue","useVModel","_useVModel2","innerChecked","setInnerChecked","disabled","onClickClose","e","handleClick","value","classes","class","_ctx","role","onClick","_createElementVNode","_createVNode","_component_t_node","content","_createElementBlock","_component_close_icon"],"sources":["../../src/tag/check-tag.vue","../../src/tag/check-tag.vue?vue&type=template&id=7aafb2e1&lang.js"],"sourcesContent":["<template>\n  <span :class=\"classes\" :aria-disabled=\"disabled\" role=\"button\" @click=\"handleClick\">\n    <span :class=\"`${baseClass}__icon`\">\n      <t-node :content=\"iconContent\"></t-node>\n    </span>\n    <span :class=\"`${baseClass}__text`\">\n      <t-node :content=\"tagContent\"></t-node>\n    </span>\n    <span v-if=\"closable && !disabled\" :class=\"`${baseClass}__icon-close`\" @click=\"onClickClose\">\n      <close-icon />\n    </span>\n  </span>\n</template>\n\n<script lang=\"ts\">\nimport { CloseIcon } from 'tdesign-icons-vue-next';\nimport { defineComponent, computed, toRefs, getCurrentInstance, SetupContext } from 'vue';\nimport config from '../config';\nimport CheckTagProps from './check-tag-props';\nimport { useEmitEvent, renderContent, renderTNode, TNode, useVModel } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-check-tag`;\n\nconst CheckTag = defineComponent({\n  name,\n  components: {\n    CloseIcon,\n    TNode,\n  },\n  props: CheckTagProps,\n  emits: ['change', 'click', 'update:checked', 'update:modelValue'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const internalInstance = getCurrentInstance();\n    const tagContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const iconContent = computed(() => renderTNode(internalInstance, 'icon'));\n    const baseClass = `${prefix}-tag`;\n\n    const { checked, modelValue } = toRefs(props);\n    const [innerChecked, setInnerChecked] = useVModel(\n      checked,\n      modelValue,\n      props.defaultChecked,\n      props.onChange,\n      'checked',\n    );\n\n    const classes = computed(() => [\n      `${baseClass}`,\n      `${baseClass}--checkable`,\n      `${baseClass}--shape-${props.shape}`,\n      `${baseClass}--size-${props.size}`,\n      {\n        [`${prefix}-is-closable ${baseClass}--closable`]: props.closable,\n        [`${prefix}-is-disabled ${baseClass}--disabled`]: props.disabled,\n        [`${prefix}-is-checked ${baseClass}--checked`]: !props.disabled && innerChecked.value,\n      },\n    ]);\n\n    const onClickClose = (e: MouseEvent): void => {\n      if (!props.disabled) {\n        emitEvent('close', { e });\n      }\n    };\n\n    const handleClick = (e: MouseEvent) => {\n      if (!props.disabled) {\n        emitEvent('click', { e });\n        setInnerChecked(!innerChecked.value);\n      }\n    };\n\n    return {\n      baseClass,\n      classes,\n      onClickClose,\n      handleClick,\n      iconContent,\n      tagContent,\n      innerChecked,\n    };\n  },\n});\n\nexport default CheckTag;\n</script>\n","<template>\n  <span :class=\"classes\" :aria-disabled=\"disabled\" role=\"button\" @click=\"handleClick\">\n    <span :class=\"`${baseClass}__icon`\">\n      <t-node :content=\"iconContent\"></t-node>\n    </span>\n    <span :class=\"`${baseClass}__text`\">\n      <t-node :content=\"tagContent\"></t-node>\n    </span>\n    <span v-if=\"closable && !disabled\" :class=\"`${baseClass}__icon-close`\" @click=\"onClickClose\">\n      <close-icon />\n    </span>\n  </span>\n</template>\n\n<script lang=\"ts\">\nimport { CloseIcon } from 'tdesign-icons-vue-next';\nimport { defineComponent, computed, toRefs, getCurrentInstance, SetupContext } from 'vue';\nimport config from '../config';\nimport CheckTagProps from './check-tag-props';\nimport { useEmitEvent, renderContent, renderTNode, TNode, useVModel } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-check-tag`;\n\nconst CheckTag = defineComponent({\n  name,\n  components: {\n    CloseIcon,\n    TNode,\n  },\n  props: CheckTagProps,\n  emits: ['change', 'click', 'update:checked', 'update:modelValue'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const internalInstance = getCurrentInstance();\n    const tagContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const iconContent = computed(() => renderTNode(internalInstance, 'icon'));\n    const baseClass = `${prefix}-tag`;\n\n    const { checked, modelValue } = toRefs(props);\n    const [innerChecked, setInnerChecked] = useVModel(\n      checked,\n      modelValue,\n      props.defaultChecked,\n      props.onChange,\n      'checked',\n    );\n\n    const classes = computed(() => [\n      `${baseClass}`,\n      `${baseClass}--checkable`,\n      `${baseClass}--shape-${props.shape}`,\n      `${baseClass}--size-${props.size}`,\n      {\n        [`${prefix}-is-closable ${baseClass}--closable`]: props.closable,\n        [`${prefix}-is-disabled ${baseClass}--disabled`]: props.disabled,\n        [`${prefix}-is-checked ${baseClass}--checked`]: !props.disabled && innerChecked.value,\n      },\n    ]);\n\n    const onClickClose = (e: MouseEvent): void => {\n      if (!props.disabled) {\n        emitEvent('close', { e });\n      }\n    };\n\n    const handleClick = (e: MouseEvent) => {\n      if (!props.disabled) {\n        emitEvent('click', { e });\n        setInnerChecked(!innerChecked.value);\n      }\n    };\n\n    return {\n      baseClass,\n      classes,\n      onClickClose,\n      handleClick,\n      iconContent,\n      tagContent,\n      innerChecked,\n    };\n  },\n});\n\nexport default CheckTag;\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}