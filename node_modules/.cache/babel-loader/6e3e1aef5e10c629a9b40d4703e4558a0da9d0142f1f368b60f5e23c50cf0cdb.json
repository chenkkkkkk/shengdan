{"ast":null,"code":"/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport { ref, reactive } from 'vue';\nimport { useRafFn } from '@vueuse/core';\nimport { getShowTimes, getRemainTimes, getScreenFps } from './utils.js';\nfunction useCountDown(props) {\n  var _ref = props || {},\n    _ref$time = _ref.time,\n    time = _ref$time === void 0 ? 0 : _ref$time,\n    autoStart = _ref.autoStart,\n    millisecond = _ref.millisecond,\n    _ref$format = _ref.format,\n    format = _ref$format === void 0 ? \"HH:mm:ss\" : _ref$format,\n    onFinish = _ref.onFinish,\n    onChange = _ref.onChange;\n  var fps = ref();\n  var count = ref(Number(time));\n  var showTimes = reactive(getShowTimes(getRemainTimes(time), format, !!millisecond));\n  var _useRafFn = useRafFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _getShowTimes, _getShowTimes$forEach;\n      var res, times;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (fps.value) {\n                _context.next = 5;\n                break;\n              }\n              _context.next = 3;\n              return getScreenFps === null || getScreenFps === void 0 ? void 0 : getScreenFps();\n            case 3:\n              res = _context.sent;\n              fps.value = res || 60;\n            case 5:\n              count.value = parseInt(\"\".concat(Number(count.value) - 1e3 / fps.value), 10);\n              if (count.value <= 0) {\n                pause === null || pause === void 0 ? void 0 : pause();\n                count.value = 0;\n              }\n              times = getRemainTimes(count.value);\n              onChange === null || onChange === void 0 ? void 0 : onChange(times);\n              count.value === 0 && (onFinish === null || onFinish === void 0 ? void 0 : onFinish());\n              (_getShowTimes = getShowTimes(times, format)) === null || _getShowTimes === void 0 ? void 0 : (_getShowTimes$forEach = _getShowTimes.forEach) === null || _getShowTimes$forEach === void 0 ? void 0 : _getShowTimes$forEach.call(_getShowTimes, function (i, idx) {\n                return showTimes[idx].value = i === null || i === void 0 ? void 0 : i.value;\n              });\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })), {\n      immediate: autoStart\n    }),\n    pause = _useRafFn.pause,\n    resume = _useRafFn.resume;\n  return {\n    time: count,\n    showTimes: showTimes,\n    pause: pause,\n    resume: resume\n  };\n}\nexport { useCountDown };","map":{"version":3,"mappings":";;;;;;;;;;;AAKO,SAASA,aAAaC,KAA4C;EACjE,IAAgFA,gBAAS,EAAC;IAAAC,iBAAxFC,IAAO;IAAPA,IAAO;IAAGC,SAAW,QAAXA,SAAW;IAAAC;IAAAC,mBAAaC,MAAS;IAATA,MAAS;IAAYC,QAAU,QAAVA,QAAU;IAAAC;EAEzE,IAAMC,MAAMC,GAAI;EAChB,IAAMC,KAAQ,OAAIC,MAAO,KAAI,CAAC;EACxB,gBAAYC,QAAS,cAAaC,cAAe,KAAI,GAAGR,MAAQ,GAAC,CAACF,WAAW,CAAC;EAG9E,gBAAoBW,uBACxBC;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACOP,IAAIQ,KAAO;gBAAAC;gBAAA;cAAA;cAAAA;cAAA,OACIC,YAAe,aAAfA,YAAe,uBAAfA,YAAe;YAAA;cAA3BC;cACNX,IAAIQ,QAAQG,GAAO;YAAA;cAEfT,cAAQU,QAAS,CAAGT,gBAAO,OAAMK,KAAK,CAAI,SAAOR,GAAI,SAAS,EAAE;cAClE,UAAMQ,SAAS,CAAG;gBACZK;gBACRX,MAAMM,KAAQ;cAChB;cAEMM,QAAQT,cAAe,OAAMG,KAAK;cACxCT,6DAAWe,KAAK;cACVZ,gBAAU,MAAKJ,QAAW,KAAXA,gBAAW,KAAXA,0BAAW;cACnB,qCAAOD,MAAM,4EAAbkB,aAAgBC,QAAU,MAA1B,8FAA0B,UAACC,CAAG;gBAAA,OAASC,SAAU,MAAKV,KAAQ,2CAAGA,KAAM;eAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACtF,CACA;MAAEW,WAAWzB;IAAU,EACzB;IAlBQmB,KAAO,aAAPA,KAAO;IAAAO;EAuBf,OAAO;IAAE3B,MAAMS,KAAO;IAAAgB;IAAWL;IAAOO,MAAO,EAAPA;GAAO;AACjD","names":["useCountDown","props","_ref$time","time","autoStart","millisecond","_ref$format","format","onFinish","onChange","fps","ref","count","Number","reactive","getRemainTimes","useRafFn","_asyncToGenerator","value","_context","getScreenFps","res","parseInt","pause","times","_getShowTimes","forEach","i","showTimes","immediate","resume"],"sources":["../../../src/shared/useCountDown/index.ts"],"sourcesContent":["import { watch, ref, reactive } from 'vue';\nimport { useRafFn } from '@vueuse/core';\nimport { TdUseCountDownProps, TdUseCountDown } from './type';\nimport { getRemainTimes, getShowTimes, getScreenFps } from './utils';\n\nexport function useCountDown(props: TdUseCountDownProps): TdUseCountDown {\n  const { time = 0, autoStart, millisecond, format = 'HH:mm:ss', onFinish, onChange } = props || {};\n  // state\n  const fps = ref();\n  const count = ref(Number(time));\n  const showTimes = reactive(getShowTimes(getRemainTimes(time), format, !!millisecond));\n\n  // raf\n  const { pause, resume } = useRafFn(\n    async () => {\n      if (!fps.value) {\n        const res = await getScreenFps?.();\n        fps.value = res || 60;\n      }\n      count.value = parseInt(`${Number(count.value) - 1000 / fps.value}`, 10);\n      if (count.value <= 0) {\n        pause?.();\n        count.value = 0;\n      }\n      // console.log('count:', count.value);\n      const times = getRemainTimes(count.value);\n      onChange?.(times);\n      count.value === 0 && onFinish?.();\n      getShowTimes(times, format)?.forEach?.((i, idx) => (showTimes[idx].value = i?.value));\n    },\n    { immediate: autoStart },\n  );\n\n  /**\n   * return\n   */\n  return { time: count, showTimes, pause, resume };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}