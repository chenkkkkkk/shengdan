{"ast":null,"code":"/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport { defineComponent, getCurrentInstance, toRefs, computed, resolveComponent, withDirectives, openBlock, createElementBlock, normalizeClass, normalizeStyle, createVNode, createCommentVNode, createElementVNode, vShow } from 'vue';\nimport { ChevronLeftIcon, HomeIcon } from 'tdesign-icons-vue-next';\nimport config from '../config.js';\nimport '../shared/index.js';\nimport NavbarProps from './props.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { renderTNode } from '../shared/render.js';\nimport { useEmitEvent } from '../shared/useEmitEvent/index.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/defineProperty';\nimport '@babel/runtime/helpers/typeof';\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-navbar\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    TChevronLeftIcon: ChevronLeftIcon,\n    TNode: TNodeComponent,\n    THomeIcon: HomeIcon\n  },\n  props: NavbarProps,\n  emits: [\"left-click\", \"right-click\"],\n  setup: function setup(props, context) {\n    var internalInstance = getCurrentInstance();\n    var _toRefs = toRefs(props),\n      title = _toRefs.title,\n      titleMaxLength = _toRefs.titleMaxLength,\n      fixed = _toRefs.fixed,\n      background = _toRefs.background;\n    var navStyle = computed(function () {\n      return \"position: \".concat(fixed.value ? \"fixed\" : \"relative\", \"; background: \").concat(background.value || \"\", \";\");\n    });\n    var titleContent = computed(function () {\n      if (titleMaxLength.value != null && title.value) {\n        if (titleMaxLength.value <= 0) {\n          console.warn(\"titleMaxLength must be greater than 0\");\n        } else {\n          return title.value.length <= titleMaxLength.value ? props.title : \"\".concat(title.value.slice(0, titleMaxLength.value), \"...\");\n        }\n      }\n      return renderTNode(internalInstance, \"title\");\n    });\n    var leftContent = computed(function () {\n      return renderTNode(internalInstance, \"left-icon\");\n    });\n    var rightContent = computed(function () {\n      return renderTNode(internalInstance, \"right-icon\");\n    });\n    var homeContent = computed(function () {\n      return renderTNode(internalInstance, \"home-icon\");\n    });\n    var emitEvent = useEmitEvent(props, context.emit);\n    var handleLeftClick = function handleLeftClick() {\n      emitEvent(\"left-click\");\n    };\n    var handleRightClick = function handleRightClick() {\n      emitEvent(\"right-click\");\n    };\n    return {\n      name: name,\n      titleContent: titleContent,\n      leftContent: leftContent,\n      rightContent: rightContent,\n      navStyle: navStyle,\n      homeContent: homeContent,\n      handleLeftClick: handleLeftClick,\n      handleRightClick: handleRightClick\n    };\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_chevron_left_icon = resolveComponent(\"t-chevron-left-icon\");\n  var _component_t_home_icon = resolveComponent(\"t-home-icon\");\n  var _component_t_node = resolveComponent(\"t-node\");\n  return withDirectives((openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.name),\n    style: normalizeStyle(\"\".concat(_ctx.navStyle))\n  }, [_ctx.homeContent || _ctx.leftContent ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__back\"))\n  }, [_ctx.leftIcon === true ? (openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__back--arrow\")),\n    onClick: _cache[0] || (_cache[0] = function () {\n      return _ctx.handleLeftClick && _ctx.handleLeftClick.apply(_ctx, arguments);\n    })\n  }, [createVNode(_component_t_chevron_left_icon)], 2)) : createCommentVNode(\"\", true), _ctx.homeIcon === true ? (openBlock(), createElementBlock(\"span\", {\n    key: 1,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__back--arrow\"))\n  }, [createVNode(_component_t_home_icon)], 2)) : createCommentVNode(\"\", true), createVNode(_component_t_node, {\n    content: _ctx.homeContent\n  }, null, 8, [\"content\"]), createVNode(_component_t_node, {\n    content: _ctx.leftContent\n  }, null, 8, [\"content\"])], 2)) : createCommentVNode(\"\", true), createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__text\"))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.titleContent\n  }, null, 8, [\"content\"])], 2), createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__right\")),\n    onClick: _cache[1] || (_cache[1] = function () {\n      return _ctx.handleRightClick && _ctx.handleRightClick.apply(_ctx, arguments);\n    })\n  }, [createVNode(_component_t_node, {\n    content: _ctx.rightContent\n  }, null, 8, [\"content\"])], 2)], 6)), [[vShow, _ctx.visible]]);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,IAAQA,SAAWC,OAAXD;AACR,IAAME,OAAUF;AAEhB,aAAeG,eAAgB;EAC7BD;EACAE,UAAY;IAAEC,gBAAkB,EAAlBA,eAAkB;IAAAC;IAAOC,SAAU,EAAVA;GAAU;EACjDC,KAAO;EACPC,OAAO,CAAC,cAAc,aAAa;EACnCC,OAAMF,sBAAOG,OAAuB;IAClC,IAAMC,mBAAmBC,kBAAmB;IAC5C,IAAqDC,iBAAON,KAAK;MAAzDO,KAAO,WAAPA,KAAO;MAAAC;MAAgBC;MAAOC,UAAW,WAAXA,UAAW;IAEjD,IAAMC,QAAW,YACf;MAAA,2BAAmBF,MAAMG,QAAQ,OAAU,wCAA2BF,WAAWE,KAAS;IAAA,EAC5F;IAEM,mBAAeC,SAAS,YAAM;MAClC,IAAIL,cAAe,UAAS,IAAQ,UAAMI,KAAO;QAC3C,mBAAeA,SAAS,CAAG;UAC7BE,QAAQC,KAAK,uCAAuC;QACtD,CAAO;UACL,OAAOR,KAAM,OAAMS,MAAU,mBAAeJ,KACxC,SAAML,KACN,aAAIA,KAAM,OAAiBU,KAAM,IAAGT,eAAeI,KAAK;QAC9D;MACF;MAEO,mBAAYR,kBAAkB,OAAO;IAC9C,CAAC;IAED,IAAMc,cAAcL,QAAS;MAAA,OAAMM,WAAY,mBAAkB,WAAW,CAAC;KAAA;IAC7E,IAAMC,eAAeP,QAAS;MAAA,OAAMM,WAAY,mBAAkB,YAAY,CAAC;KAAA;IAC/E,IAAME,cAAcR,QAAS;MAAA,OAAMM,WAAY,mBAAkB,WAAW,CAAC;KAAA;IAE7E,IAAMG,SAAY,gBAAatB,KAAO,UAAQuB,IAAI;IAElD,IAAMC,kBAAkB,SAAlBA,kBAAwB;MAC5BF,UAAU,YAAY;KACxB;IAEA,IAAMG,mBAAmB,SAAnBA,mBAAyB;MAC7BH,UAAU,aAAa;KACzB;IAEO;MACL5B;MACAgC;MACAR;MACAE;MACAT;MACAU;MACAG;MACAC;KACF;EACF;AACF,CAAC;;;;;oCCnFC,qBAmBK;IAnBkBE,qBAAO,MAAIjC;IAAGkC,sBAAUC,eAAQlB;MAC1CkB,gBAAe,SAAWX,4BAArCY,mBASK;;IATmCH,sBAAUE,eAAInC;MACxCmC,KAASE,kCAArBD,mBAEM;;IAF0BH,gCAAUE,KAAInC;IAAkBsC;aAAOH,KAAeL;IAAA;MACpFS,YAAsBC,sEAEZL,KAAOM,kCAAnBL,mBAEM;;IAF0BH,sBAAUE,eAAInC;MAC5CuC,YAAcG,8DAEhBH,YAAuCI;IAA9BC,OAAS,OAAWjB;EAAA,0BAC7BY,YAAuCI;IAA9BC,OAAS,OAAWpB;GAAA,8DAG/BqB,mBAEK;IAFCZ,sBAAUE,eAAInC;MAClBuC,YAAwCI;IAA/BC,OAAS,OAAYZ;EAAA,+BAGhCa,mBAEK;IAFCZ,gCAAUE,KAAInC;IAAYsC;aAAOH,KAAgBJ;IAAA;MACrDQ,YAAwCI;IAA/BC,OAAS,OAAYlB;GAAA,2CAjBrB,OAAOoB","names":["prefix","config","name","defineComponent","components","TChevronLeftIcon","TNode","THomeIcon","props","emits","setup","context","internalInstance","getCurrentInstance","toRefs","title","titleMaxLength","fixed","background","navStyle","value","computed","console","warn","length","slice","leftContent","renderTNode","rightContent","homeContent","emitEvent","emit","handleLeftClick","handleRightClick","titleContent","class","style","_ctx","_createElementBlock","leftIcon","onClick","_createVNode","_component_t_chevron_left_icon","homeIcon","_component_t_home_icon","_component_t_node","content","_createElementVNode","visible"],"sources":["../../src/navbar/navbar.vue","../../src/navbar/navbar.vue?vue&type=template&id=422b0e7d&lang.js"],"sourcesContent":["<template>\n  <div v-show=\"visible\" :class=\"name\" :style=\"`${navStyle}`\">\n    <div v-if=\"homeContent || leftContent\" :class=\"`${name}__back`\">\n      <span v-if=\"leftIcon === true\" :class=\"`${name}__back--arrow`\" @click=\"handleLeftClick\">\n        <t-chevron-left-icon />\n      </span>\n      <span v-if=\"homeIcon === true\" :class=\"`${name}__back--arrow`\">\n        <t-home-icon />\n      </span>\n      <t-node :content=\"homeContent\"></t-node>\n      <t-node :content=\"leftContent\"></t-node>\n    </div>\n\n    <div :class=\"`${name}__text`\">\n      <t-node :content=\"titleContent\"></t-node>\n    </div>\n\n    <div :class=\"`${name}__right`\" @click=\"handleRightClick\">\n      <t-node :content=\"rightContent\"></t-node>\n    </div>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, SetupContext, toRefs } from 'vue';\nimport { ChevronLeftIcon as TChevronLeftIcon, HomeIcon as THomeIcon } from 'tdesign-icons-vue-next';\nimport config from '../config';\nimport { renderTNode, TNode, useEmitEvent } from '../shared';\nimport NavbarProps from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-navbar`;\n\nexport default defineComponent({\n  name,\n  components: { TChevronLeftIcon, TNode, THomeIcon },\n  props: NavbarProps,\n  emits: ['left-click', 'right-click'],\n  setup(props, context: SetupContext) {\n    const internalInstance = getCurrentInstance();\n    const { title, titleMaxLength, fixed, background } = toRefs(props);\n\n    const navStyle = computed(\n      () => `position: ${fixed.value ? 'fixed' : 'relative'}; background: ${background.value || ''};`,\n    );\n\n    const titleContent = computed(() => {\n      if (titleMaxLength.value != null && title.value) {\n        if (titleMaxLength.value <= 0) {\n          console.warn('titleMaxLength must be greater than 0');\n        } else {\n          return title.value.length <= titleMaxLength.value\n            ? props.title\n            : `${(title.value as string).slice(0, titleMaxLength.value)}...`;\n        }\n      }\n\n      return renderTNode(internalInstance, 'title');\n    });\n\n    const leftContent = computed(() => renderTNode(internalInstance, 'left-icon'));\n    const rightContent = computed(() => renderTNode(internalInstance, 'right-icon'));\n    const homeContent = computed(() => renderTNode(internalInstance, 'home-icon'));\n\n    const emitEvent = useEmitEvent(props, context.emit);\n\n    const handleLeftClick = () => {\n      emitEvent('left-click');\n    };\n\n    const handleRightClick = () => {\n      emitEvent('right-click');\n    };\n\n    return {\n      name,\n      titleContent,\n      leftContent,\n      rightContent,\n      navStyle,\n      homeContent,\n      handleLeftClick,\n      handleRightClick,\n    };\n  },\n});\n</script>\n","<template>\n  <div v-show=\"visible\" :class=\"name\" :style=\"`${navStyle}`\">\n    <div v-if=\"homeContent || leftContent\" :class=\"`${name}__back`\">\n      <span v-if=\"leftIcon === true\" :class=\"`${name}__back--arrow`\" @click=\"handleLeftClick\">\n        <t-chevron-left-icon />\n      </span>\n      <span v-if=\"homeIcon === true\" :class=\"`${name}__back--arrow`\">\n        <t-home-icon />\n      </span>\n      <t-node :content=\"homeContent\"></t-node>\n      <t-node :content=\"leftContent\"></t-node>\n    </div>\n\n    <div :class=\"`${name}__text`\">\n      <t-node :content=\"titleContent\"></t-node>\n    </div>\n\n    <div :class=\"`${name}__right`\" @click=\"handleRightClick\">\n      <t-node :content=\"rightContent\"></t-node>\n    </div>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, SetupContext, toRefs } from 'vue';\nimport { ChevronLeftIcon as TChevronLeftIcon, HomeIcon as THomeIcon } from 'tdesign-icons-vue-next';\nimport config from '../config';\nimport { renderTNode, TNode, useEmitEvent } from '../shared';\nimport NavbarProps from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-navbar`;\n\nexport default defineComponent({\n  name,\n  components: { TChevronLeftIcon, TNode, THomeIcon },\n  props: NavbarProps,\n  emits: ['left-click', 'right-click'],\n  setup(props, context: SetupContext) {\n    const internalInstance = getCurrentInstance();\n    const { title, titleMaxLength, fixed, background } = toRefs(props);\n\n    const navStyle = computed(\n      () => `position: ${fixed.value ? 'fixed' : 'relative'}; background: ${background.value || ''};`,\n    );\n\n    const titleContent = computed(() => {\n      if (titleMaxLength.value != null && title.value) {\n        if (titleMaxLength.value <= 0) {\n          console.warn('titleMaxLength must be greater than 0');\n        } else {\n          return title.value.length <= titleMaxLength.value\n            ? props.title\n            : `${(title.value as string).slice(0, titleMaxLength.value)}...`;\n        }\n      }\n\n      return renderTNode(internalInstance, 'title');\n    });\n\n    const leftContent = computed(() => renderTNode(internalInstance, 'left-icon'));\n    const rightContent = computed(() => renderTNode(internalInstance, 'right-icon'));\n    const homeContent = computed(() => renderTNode(internalInstance, 'home-icon'));\n\n    const emitEvent = useEmitEvent(props, context.emit);\n\n    const handleLeftClick = () => {\n      emitEvent('left-click');\n    };\n\n    const handleRightClick = () => {\n      emitEvent('right-click');\n    };\n\n    return {\n      name,\n      titleContent,\n      leftContent,\n      rightContent,\n      navStyle,\n      homeContent,\n      handleLeftClick,\n      handleRightClick,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}