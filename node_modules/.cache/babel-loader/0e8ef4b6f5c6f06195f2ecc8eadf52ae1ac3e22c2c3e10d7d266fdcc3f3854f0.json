{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { defineComponent, getCurrentInstance, inject, computed, ref, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, createBlock, mergeProps, createVNode, createCommentVNode } from 'vue';\nimport _Badge from '../badge/index.js';\nimport _Image from '../image/index.js';\nimport config from '../config.js';\nimport AvatarProps from './props.js';\nimport ClASSNAMES from '../shared/constants.js';\nimport '../shared/index.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { useEmitEvent } from '../shared/useEmitEvent/index.js';\nimport { renderTNode, renderContent } from '../shared/render.js';\nimport '../badge/badge.js';\nimport '@babel/runtime/helpers/slicedToArray';\nimport '../badge/props.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/typeof';\nimport './style/css.js';\nimport '../badge/type.js';\nimport '../image/image.js';\nimport 'tdesign-icons-vue-next';\nimport '../image/props.js';\nimport '../image/type.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-avatar\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    TNode: TNodeComponent,\n    TBadge: _Badge,\n    TImage: _Image\n  },\n  props: AvatarProps,\n  emits: [\"error\"],\n  setup: function setup(props, context) {\n    var emitEvent = useEmitEvent(props, context.emit);\n    var internalInstance = getCurrentInstance();\n    var avatarGroupProps = inject(\"avatarGroup\", {});\n    var iconContent = computed(function () {\n      return renderTNode(internalInstance, \"icon\");\n    });\n    var avatarContent = computed(function () {\n      return renderContent(internalInstance, \"default\", \"content\");\n    });\n    var sizeValue = ref(props.size || avatarGroupProps && avatarGroupProps.size);\n    var avatarClass = computed(function () {\n      return [\"\".concat(name), sizeValue.value ? ClASSNAMES.SIZE[sizeValue.value] : \"\", _defineProperty({}, \"\".concat(name, \"--\").concat(props.shape), props.shape)];\n    });\n    var isCustomSize = computed(function () {\n      return sizeValue.value && !ClASSNAMES.SIZE[sizeValue.value];\n    });\n    var customSize = computed(function () {\n      return isCustomSize.value ? {\n        height: sizeValue.value,\n        width: sizeValue.value\n      } : {};\n    });\n    var handleImgLoadCompleted = function handleImgLoadCompleted(e) {\n      emitEvent(\"load\", e);\n    };\n    var handleImgLoadError = function handleImgLoadError(e) {\n      emitEvent(\"error\", e);\n    };\n    var baseImageProps = {\n      src: props.image,\n      alt: props.alt\n    };\n    var customImageProps = computed(function () {\n      return _objectSpread(_objectSpread({}, props.imageProps), baseImageProps);\n    });\n    return _objectSpread(_objectSpread({\n      name: name\n    }, toRefs(props)), {}, {\n      iconContent: iconContent,\n      avatarContent: avatarContent,\n      avatarClass: avatarClass,\n      customSize: customSize,\n      handleImgLoadCompleted: handleImgLoadCompleted,\n      handleImgLoadError: handleImgLoadError,\n      customImageProps: customImageProps\n    });\n  }\n});\nvar _hoisted_1 = {\n  key: 2\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_image = resolveComponent(\"t-image\");\n  var _component_t_node = resolveComponent(\"t-node\");\n  var _component_t_badge = resolveComponent(\"t-badge\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.avatarClass),\n    style: normalizeStyle(_ctx.customSize)\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__inner\"))\n  }, [_ctx.image && !_ctx.hideOnLoadFailed ? (openBlock(), createBlock(_component_t_image, mergeProps({\n    key: 0,\n    style: _ctx.customSize\n  }, _ctx.customImageProps, {\n    onLoad: _ctx.handleImgLoadCompleted,\n    onError: _ctx.handleImgLoadError\n  }), null, 16, [\"style\", \"onLoad\", \"onError\"])) : _ctx.iconContent !== void 0 ? (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__icon\"))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.iconContent\n  }, null, 8, [\"content\"])], 2)) : (openBlock(), createElementBlock(\"span\", _hoisted_1, [createVNode(_component_t_node, {\n    content: _ctx.avatarContent\n  }, null, 8, [\"content\"])]))], 2), _ctx.badgeProps ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__badge\"))\n  }, [createVNode(_component_t_badge, {\n    count: _ctx.badgeProps.count,\n    \"max-count\": _ctx.badgeProps.maxCount,\n    dot: _ctx.badgeProps.dot,\n    content: _ctx.badgeProps.content,\n    size: _ctx.badgeProps.size,\n    offset: _ctx.badgeProps.offset\n  }, null, 8, [\"count\", \"max-count\", \"dot\", \"content\", \"size\", \"offset\"])], 2)) : createCommentVNode(\"\", true)], 6);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,IAAQA,SAAWC,OAAXD;AACR,IAAME,OAAUF;AAEhB,aAAeG,eAAgB;EAC7BD;EACAE,UAAY;IAAEC,KAAO,EAAPA,cAAO;IAAAC;IAAQC,MAAO,EAAPA;GAAO;EACpCC,KAAO;EACPC,OAAO,CAAC,OAAO;EACfC,OAAMF,sBAAOG,OAAuB;IAClC,IAAMC,SAAY,gBAAaJ,KAAO,UAAQK,IAAI;IAClD,IAAMC,mBAAmBC,kBAAmB;IAC5C,IAAMC,gBAAmB,UAAO,aAAe,IAAE;IACjD,IAAMC,cAAcC,QAAS;MAAA,OAAMC,WAAY,mBAAkB,MAAM,CAAC;KAAA;IACxE,IAAMC,gBAAgBF,QAAS;MAAA,OAAMG,cAAcP,gBAAkB,aAAW,SAAS,CAAC;KAAA;IAC1F,IAAMQ,YAAYC,GAAI,OAAMC,IAAS,wBAAoBR,iBAAiBQ,IAAK;IACzE,kBAAcN,SAAS;MAAA,OAAM,WAC9BhB,OACHoB,SAAU,SAAQG,UAAW,MAAKH,UAAUI,KAAS,QAE/CxB,kCAAS,qBAAMyB,MAAUnB,OAAM,OAEtC;KAAA;IAEK,mBAAeU,SAAS;MAAA,OAAMI,UAAUI,SAAS,CAACD,WAAWG,IAAK,WAAUF,KAAM;KAAA;IAClF,iBAAaR,SAAS,YAAM;MAChC,OAAOW,aAAaH,KAChB;QACEI,QAAQR,SAAU;QAClBS,OAAOT,SAAU;UAEnB,EAAC;IACP,CAAC;IACK,6BAAyB,SAAzBU,uBAA0BC,CAAW;MACzCrB,UAAU,QAAQqB,CAAC;KACrB;IACM,yBAAqB,SAArBC,mBAAsBD,CAAW;MACrCrB,UAAU,SAASqB,CAAC;KACtB;IAEA,IAAME,cAAiB;MACrBC,KAAK5B,KAAM;MACX6B,KAAK7B,KAAM;KACb;IACM,uBAAmBU,SAAS;MAAA,uCAC7BV,KAAM,cACN2B;IAAA,CACH;IAEK;MACLjC;KACGoC,SAAO9B,KAAK;MACfS;MACAG;MACAmB;MACAC;MACAR;MACAE;MACAO;IAAA;EAEJ;AACF,CAAC;;;;;;;;oBCpGC,qBA2BK;IA3BCC,qBAAO,MAAWH;IAAGI,qBAAO,MAAUH;MAC1CI,mBAcK;IAdCF,sBAAUG,eAAI3C;MAEV2C,eAAUA,KAAgBC,oBADlCC,wBAMC,qBANDC,UAMC;;IAJEL,OAAOE,IAAU;KACVA,KAAgBJ;IACvBQ,QAAMJ,IAAsB;IAC5BK,SAAOL,IAAkB;mDAEZA,gBAAgB,4BAAhCM,mBAEK;;IAFuCT,sBAAUG,eAAI3C;MACxDkD,YAAuCC;IAA9BC,OAAS,OAAWrC;GAAA,4CAE/B,qBAEM,qBADJmC,YAAyCC;IAAhCC,OAAS,OAAalC;GAAA,iCAGxByB,IAAU,4BAArBM,mBAUK;;IAVmBT,sBAAUG,eAAI3C;MACpCkD,YAQSG;IAPNC,OAAOX,KAAUY,UAAC;IAClB,aAAWZ,KAAUY,UAAC;IACtBC,KAAKb,KAAUY,UAAC;IAChBH,SAAST,KAAUY,UAAC;IACpBjC,MAAMqB,KAAUY,UAAC;IACjBE,QAAQd,KAAUY,UAAC","names":["prefix","config","name","defineComponent","components","TNode","TBadge","TImage","props","emits","setup","context","emitEvent","emit","internalInstance","getCurrentInstance","avatarGroupProps","iconContent","computed","renderTNode","avatarContent","renderContent","sizeValue","ref","size","CLASSNAMES","value","shape","SIZE","isCustomSize","height","width","handleImgLoadCompleted","e","handleImgLoadError","baseImageProps","src","alt","toRefs","avatarClass","customSize","customImageProps","class","style","_createElementVNode","_ctx","hideOnLoadFailed","_openBlock","_mergeProps","onLoad","onError","_createElementBlock","_createVNode","_component_t_node","content","_component_t_badge","count","badgeProps","dot","offset"],"sources":["../../src/avatar/avatar.vue","../../src/avatar/avatar.vue?vue&type=template&id=e8e1eade&lang.js"],"sourcesContent":["<template>\n  <div :class=\"avatarClass\" :style=\"customSize\">\n    <div :class=\"`${name}__inner`\">\n      <t-image\n        v-if=\"image && !hideOnLoadFailed\"\n        :style=\"customSize\"\n        v-bind=\"customImageProps\"\n        @load=\"handleImgLoadCompleted\"\n        @error=\"handleImgLoadError\"\n      />\n      <div v-else-if=\"iconContent !== undefined\" :class=\"`${name}__icon`\">\n        <t-node :content=\"iconContent\"></t-node>\n      </div>\n      <span v-else>\n        <t-node :content=\"avatarContent\"></t-node>\n      </span>\n    </div>\n    <div v-if=\"badgeProps\" :class=\"`${name}__badge`\">\n      <t-badge\n        :count=\"badgeProps.count\"\n        :max-count=\"badgeProps.maxCount\"\n        :dot=\"badgeProps.dot\"\n        :content=\"badgeProps.content\"\n        :size=\"badgeProps.size\"\n        :offset=\"badgeProps.offset\"\n      >\n      </t-badge>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, toRefs, defineComponent, getCurrentInstance, inject, ref, SetupContext } from 'vue';\nimport TBadge from '../badge';\nimport TImage from '../image';\nimport config from '../config';\nimport AvatarProps from './props';\nimport { TdAvatarGroupProps } from './type';\nimport CLASSNAMES from '../shared/constants';\nimport { renderContent, renderTNode, TNode, useEmitEvent } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-avatar`;\n\nexport default defineComponent({\n  name,\n  components: { TNode, TBadge, TImage },\n  props: AvatarProps,\n  emits: ['error'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const internalInstance = getCurrentInstance();\n    const avatarGroupProps = inject('avatarGroup', {}) as TdAvatarGroupProps;\n    const iconContent = computed(() => renderTNode(internalInstance, 'icon'));\n    const avatarContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const sizeValue = ref(props.size || (avatarGroupProps && avatarGroupProps.size));\n    const avatarClass = computed(() => [\n      `${name}`,\n      sizeValue.value ? CLASSNAMES.SIZE[sizeValue.value] : '',\n      {\n        [`${name}--${props.shape}`]: props.shape,\n      },\n    ]);\n\n    const isCustomSize = computed(() => sizeValue.value && !CLASSNAMES.SIZE[sizeValue.value]);\n    const customSize = computed(() => {\n      return isCustomSize.value\n        ? {\n            height: sizeValue.value,\n            width: sizeValue.value,\n          }\n        : {};\n    });\n    const handleImgLoadCompleted = (e: any) => {\n      emitEvent('load', e);\n    };\n    const handleImgLoadError = (e: any) => {\n      emitEvent('error', e);\n    };\n\n    const baseImageProps = {\n      src: props.image,\n      alt: props.alt,\n    };\n    const customImageProps = computed(() => ({\n      ...props.imageProps,\n      ...baseImageProps,\n    }));\n\n    return {\n      name,\n      ...toRefs(props),\n      iconContent,\n      avatarContent,\n      avatarClass,\n      customSize,\n      handleImgLoadCompleted,\n      handleImgLoadError,\n      customImageProps,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"avatarClass\" :style=\"customSize\">\n    <div :class=\"`${name}__inner`\">\n      <t-image\n        v-if=\"image && !hideOnLoadFailed\"\n        :style=\"customSize\"\n        v-bind=\"customImageProps\"\n        @load=\"handleImgLoadCompleted\"\n        @error=\"handleImgLoadError\"\n      />\n      <div v-else-if=\"iconContent !== undefined\" :class=\"`${name}__icon`\">\n        <t-node :content=\"iconContent\"></t-node>\n      </div>\n      <span v-else>\n        <t-node :content=\"avatarContent\"></t-node>\n      </span>\n    </div>\n    <div v-if=\"badgeProps\" :class=\"`${name}__badge`\">\n      <t-badge\n        :count=\"badgeProps.count\"\n        :max-count=\"badgeProps.maxCount\"\n        :dot=\"badgeProps.dot\"\n        :content=\"badgeProps.content\"\n        :size=\"badgeProps.size\"\n        :offset=\"badgeProps.offset\"\n      >\n      </t-badge>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, toRefs, defineComponent, getCurrentInstance, inject, ref, SetupContext } from 'vue';\nimport TBadge from '../badge';\nimport TImage from '../image';\nimport config from '../config';\nimport AvatarProps from './props';\nimport { TdAvatarGroupProps } from './type';\nimport CLASSNAMES from '../shared/constants';\nimport { renderContent, renderTNode, TNode, useEmitEvent } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-avatar`;\n\nexport default defineComponent({\n  name,\n  components: { TNode, TBadge, TImage },\n  props: AvatarProps,\n  emits: ['error'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const internalInstance = getCurrentInstance();\n    const avatarGroupProps = inject('avatarGroup', {}) as TdAvatarGroupProps;\n    const iconContent = computed(() => renderTNode(internalInstance, 'icon'));\n    const avatarContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const sizeValue = ref(props.size || (avatarGroupProps && avatarGroupProps.size));\n    const avatarClass = computed(() => [\n      `${name}`,\n      sizeValue.value ? CLASSNAMES.SIZE[sizeValue.value] : '',\n      {\n        [`${name}--${props.shape}`]: props.shape,\n      },\n    ]);\n\n    const isCustomSize = computed(() => sizeValue.value && !CLASSNAMES.SIZE[sizeValue.value]);\n    const customSize = computed(() => {\n      return isCustomSize.value\n        ? {\n            height: sizeValue.value,\n            width: sizeValue.value,\n          }\n        : {};\n    });\n    const handleImgLoadCompleted = (e: any) => {\n      emitEvent('load', e);\n    };\n    const handleImgLoadError = (e: any) => {\n      emitEvent('error', e);\n    };\n\n    const baseImageProps = {\n      src: props.image,\n      alt: props.alt,\n    };\n    const customImageProps = computed(() => ({\n      ...props.imageProps,\n      ...baseImageProps,\n    }));\n\n    return {\n      name,\n      ...toRefs(props),\n      iconContent,\n      avatarContent,\n      avatarClass,\n      customSize,\n      handleImgLoadCompleted,\n      handleImgLoadError,\n      customImageProps,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}