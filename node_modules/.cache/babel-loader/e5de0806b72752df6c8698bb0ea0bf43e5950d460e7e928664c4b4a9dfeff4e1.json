{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { h, defineComponent, getCurrentInstance, computed, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, Fragment, createBlock, normalizeProps, mergeProps, createCommentVNode, createVNode } from 'vue';\nimport { InfoCircleIcon, CheckCircleIcon, CloseCircleIcon } from 'tdesign-icons-vue-next';\nimport resultProps from './props.js';\nimport config from '../config.js';\nimport '../shared/index.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { renderTNode } from '../shared/render.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useEmitEvent/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/typeof';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-result\");\nvar iconDefault = {\n  default: h(InfoCircleIcon),\n  success: h(CheckCircleIcon),\n  warning: h(InfoCircleIcon),\n  error: h(CloseCircleIcon)\n};\nvar script = defineComponent({\n  name: name,\n  components: {\n    TNode: TNodeComponent\n  },\n  props: resultProps,\n  setup: function setup(props) {\n    var internalInstance = getCurrentInstance();\n    var imageContent = computed(function () {\n      return renderTNode(internalInstance, \"image\");\n    });\n    var titleContent = computed(function () {\n      return renderTNode(internalInstance, \"title\");\n    });\n    var descriptionContent = computed(function () {\n      return renderTNode(internalInstance, \"description\");\n    });\n    var classes = computed(function () {\n      return [\"\".concat(name), \"\".concat(name, \"--theme-\").concat(props.theme)];\n    });\n    var iconContent;\n    if (props.icon !== \"\") {\n      if (Object.keys(iconDefault).includes(props === null || props === void 0 ? void 0 : props.theme)) {\n        var key = props.theme;\n        iconContent = computed(function () {\n          return iconDefault === null || iconDefault === void 0 ? void 0 : iconDefault[key];\n        });\n      }\n      iconContent = props.icon ? computed(function () {\n        return renderTNode(internalInstance, \"icon\");\n      }) : iconContent;\n    }\n    var baseImageProps = {\n      src: props.image\n    };\n    var customImageProps = computed(function () {\n      return _objectSpread(_objectSpread({}, props.imageProps), baseImageProps);\n    });\n    return _objectSpread({\n      name: name,\n      classes: classes,\n      imageContent: imageContent,\n      customImageProps: customImageProps,\n      iconContent: iconContent,\n      titleContent: titleContent,\n      descriptionContent: descriptionContent\n    }, toRefs(props));\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_image = resolveComponent(\"t-image\");\n  var _component_t_node = resolveComponent(\"t-node\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.classes)\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__thumb\"))\n  }, [_ctx.imageContent ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [typeof _ctx.image === \"string\" ? (openBlock(), createBlock(_component_t_image, normalizeProps(mergeProps({\n    key: 0\n  }, _ctx.customImageProps)), null, 16)) : (openBlock(), createBlock(_component_t_node, {\n    key: 1,\n    content: _ctx.imageContent\n  }, null, 8, [\"content\"]))], 64)) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [_ctx.iconContent !== void 0 ? (openBlock(), createBlock(_component_t_node, {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__icon\")),\n    content: _ctx.iconContent\n  }, null, 8, [\"class\", \"content\"])) : createCommentVNode(\"\", true)], 64))], 2), _ctx.titleContent ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__title\"))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.titleContent\n  }, null, 8, [\"content\"])], 2)) : createCommentVNode(\"\", true), _ctx.descriptionContent ? (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__description\"))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.descriptionContent\n  }, null, 8, [\"content\"])], 2)) : createCommentVNode(\"\", true)], 2);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,IAAQA,SAAWC,OAAXD;AACR,IAAME,OAAUF;AAEhB,IAAMG,WAAc;EAClBC,SAASC,EAAEC,cAAc;EACzBC,SAASF,EAAEG,eAAe;EAC1BC,SAASJ,EAAEC,cAAc;EACzBI,OAAOL,EAAEM,eAAe;AAC1B;AAEA,aAAeC,eAAgB;EAC7BV;EACAW,UAAY;IACVC;GACF;EACAC,KAAO;EACPC,sBAAMD,KAAO;IACX,IAAME,mBAAmBC,kBAAmB;IAC5C,IAAMC,eAAeC,QAAS;MAAA,OAAMC,WAAY,mBAAkB,OAAO,CAAC;KAAA;IAC1E,IAAMC,eAAeF,QAAS;MAAA,OAAMC,WAAY,mBAAkB,OAAO,CAAC;KAAA;IAC1E,IAAME,qBAAqBH,QAAS;MAAA,OAAMC,WAAY,mBAAkB,aAAa,CAAC;KAAA;IAEhF,cAAUD,QAAS;MAAA,OAAM,WAAIlB,KAAWA,qCAAea,KAAM,OAAQ;KAAA;IAEvE;IACA,UAAMS,SAAS,EAAI;MACrB,IAAIC,OAAOC,IAAK,YAAW,EAAEC,QAAS,qDAAOC,KAAe,CAAG;QAC7D,IAAMC,MAAMd,KAAM;QACJe,uBAAS;UAAA,OAAM3B,sEAAc0B,GAAI;SAAA;MACjD;MACcC,oBAAMN,OAAOJ,QAAS;QAAA,OAAMC,YAAYJ,gBAAkB,QAAM,CAAC;MAAA,EAAI;IACrF;IAEA,IAAMc,cAAiB;MACrBC,KAAKjB,KAAM;KACb;IAEM,uBAAmBK,SAAS;MAAA,uCAC7BL,KAAM,cACNgB;IAAA,CACH;IAEK;MACL7B;MACA+B;MACAd;MACAe;MACAJ;MACAR;MACAC;KACGY,SAAOpB,KAAK;EAEnB;AACF,CAAC;;;;oBChFC,qBAgBK;IAhBCqB,qBAAO,MAAOH;MAClBI,mBAQK;IARCD,sBAAUE,eAAIpC;MACFoC,KAAYnB,6BAA5BoB,mBAGUC;IAAAX;EAAA,WAFcS,IAAM,mBAA5B,4BAA6E;;GAA3B,OAAgBJ,6CAClE,cAA+CO;;IAA/BC,SAASJ,IAAY;mDAEvCC,mBAEUC;IAAAX;EAAA,IADMS,gBAAgB,4BAA9BK,YAAiGF;;IAAvDL,gCAAUE,KAAIpC;IAAWwC,SAASJ,IAAW;iFAGhFA,IAAY,8BAAvBC,mBAEK;;IAFqBH,sBAAUE,eAAIpC;MACtC0C,YAAwCH;IAA/BC,OAAS,OAAYpB;EAAA,+DAErBgB,IAAkB,oCAA7BC,mBAEK;;IAF2BH,sBAAUE,eAAIpC;MAC5C0C,YAA8CH;IAArCC,OAAS,OAAkBnB;GAAA","names":["prefix","config","name","iconDefault","default","h","InfoCircleIcon","success","CheckCircleIcon","warning","error","CloseCircleIcon","defineComponent","components","TNode","props","setup","internalInstance","getCurrentInstance","imageContent","computed","renderTNode","titleContent","descriptionContent","icon","Object","keys","includes","theme","key","iconContent","baseImageProps","src","classes","customImageProps","toRefs","class","_createElementVNode","_ctx","_createElementBlock","_Fragment","_component_t_node","content","_createBlock","_createVNode"],"sources":["../../src/result/result.vue","../../src/result/result.vue?vue&type=template&id=3d78f957&lang.js"],"sourcesContent":["<template>\n  <div :class=\"classes\">\n    <div :class=\"`${name}__thumb`\">\n      <template v-if=\"imageContent\">\n        <t-image v-if=\"typeof image === 'string'\" v-bind=\"customImageProps\"></t-image>\n        <t-node v-else :content=\"imageContent\"></t-node>\n      </template>\n      <template v-else>\n        <t-node v-if=\"iconContent !== undefined\" :class=\"`${name}__icon`\" :content=\"iconContent\"></t-node>\n      </template>\n    </div>\n    <div v-if=\"titleContent\" :class=\"`${name}__title`\">\n      <t-node :content=\"titleContent\"></t-node>\n    </div>\n    <div v-if=\"descriptionContent\" :class=\"`${name}__description`\">\n      <t-node :content=\"descriptionContent\"></t-node>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { h, computed, toRefs, getCurrentInstance, SetupContext, defineComponent } from 'vue';\nimport { InfoCircleIcon, CheckCircleIcon, CloseCircleIcon } from 'tdesign-icons-vue-next';\nimport resultProps from './props';\nimport config from '../config';\nimport { TdResultProps } from './type';\nimport { useEmitEvent, renderContent, renderTNode, TNode } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-result`;\n\nconst iconDefault = {\n  default: h(InfoCircleIcon),\n  success: h(CheckCircleIcon),\n  warning: h(InfoCircleIcon),\n  error: h(CloseCircleIcon),\n};\n\nexport default defineComponent({\n  name,\n  components: {\n    TNode,\n  },\n  props: resultProps,\n  setup(props) {\n    const internalInstance = getCurrentInstance();\n    const imageContent = computed(() => renderTNode(internalInstance, 'image'));\n    const titleContent = computed(() => renderTNode(internalInstance, 'title'));\n    const descriptionContent = computed(() => renderTNode(internalInstance, 'description'));\n\n    const classes = computed(() => [`${name}`, `${name}--theme-${props.theme}`]);\n\n    let iconContent: any;\n    if (props.icon !== '') {\n      if (Object.keys(iconDefault).includes(props?.theme as string)) {\n        const key = props.theme as string;\n        iconContent = computed(() => iconDefault?.[key]);\n      }\n      iconContent = props.icon ? computed(() => renderTNode(internalInstance, 'icon')) : iconContent;\n    }\n\n    const baseImageProps = {\n      src: props.image,\n    };\n\n    const customImageProps = computed(() => ({\n      ...props.imageProps,\n      ...baseImageProps,\n    }));\n\n    return {\n      name,\n      classes,\n      imageContent,\n      customImageProps,\n      iconContent,\n      titleContent,\n      descriptionContent,\n      ...toRefs(props),\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"classes\">\n    <div :class=\"`${name}__thumb`\">\n      <template v-if=\"imageContent\">\n        <t-image v-if=\"typeof image === 'string'\" v-bind=\"customImageProps\"></t-image>\n        <t-node v-else :content=\"imageContent\"></t-node>\n      </template>\n      <template v-else>\n        <t-node v-if=\"iconContent !== undefined\" :class=\"`${name}__icon`\" :content=\"iconContent\"></t-node>\n      </template>\n    </div>\n    <div v-if=\"titleContent\" :class=\"`${name}__title`\">\n      <t-node :content=\"titleContent\"></t-node>\n    </div>\n    <div v-if=\"descriptionContent\" :class=\"`${name}__description`\">\n      <t-node :content=\"descriptionContent\"></t-node>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { h, computed, toRefs, getCurrentInstance, SetupContext, defineComponent } from 'vue';\nimport { InfoCircleIcon, CheckCircleIcon, CloseCircleIcon } from 'tdesign-icons-vue-next';\nimport resultProps from './props';\nimport config from '../config';\nimport { TdResultProps } from './type';\nimport { useEmitEvent, renderContent, renderTNode, TNode } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-result`;\n\nconst iconDefault = {\n  default: h(InfoCircleIcon),\n  success: h(CheckCircleIcon),\n  warning: h(InfoCircleIcon),\n  error: h(CloseCircleIcon),\n};\n\nexport default defineComponent({\n  name,\n  components: {\n    TNode,\n  },\n  props: resultProps,\n  setup(props) {\n    const internalInstance = getCurrentInstance();\n    const imageContent = computed(() => renderTNode(internalInstance, 'image'));\n    const titleContent = computed(() => renderTNode(internalInstance, 'title'));\n    const descriptionContent = computed(() => renderTNode(internalInstance, 'description'));\n\n    const classes = computed(() => [`${name}`, `${name}--theme-${props.theme}`]);\n\n    let iconContent: any;\n    if (props.icon !== '') {\n      if (Object.keys(iconDefault).includes(props?.theme as string)) {\n        const key = props.theme as string;\n        iconContent = computed(() => iconDefault?.[key]);\n      }\n      iconContent = props.icon ? computed(() => renderTNode(internalInstance, 'icon')) : iconContent;\n    }\n\n    const baseImageProps = {\n      src: props.image,\n    };\n\n    const customImageProps = computed(() => ({\n      ...props.imageProps,\n      ...baseImageProps,\n    }));\n\n    return {\n      name,\n      classes,\n      imageContent,\n      customImageProps,\n      iconContent,\n      titleContent,\n      descriptionContent,\n      ...toRefs(props),\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}