{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { defineComponent, getCurrentInstance, computed, h, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, createBlock, createCommentVNode, Fragment, createVNode } from 'vue';\nimport { ChevronRightIcon } from 'tdesign-icons-vue-next';\nimport '../shared/index.js';\nimport config from '../config.js';\nimport CellProps from './props.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { useEmitEvent } from '../shared/useEmitEvent/index.js';\nimport { renderContent, renderTNode } from '../shared/render.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/typeof';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-cell\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    TNode: TNodeComponent\n  },\n  props: CellProps,\n  emits: [\"click\"],\n  setup: function setup(props, context) {\n    var emitEvent = useEmitEvent(props, context.emit);\n    var internalInstance = getCurrentInstance();\n    var noteContent = computed(function () {\n      return renderContent(internalInstance, \"default\", \"note\");\n    });\n    var titleContent = computed(function () {\n      return renderTNode(internalInstance, \"title\");\n    });\n    var descriptionContent = computed(function () {\n      return renderTNode(internalInstance, \"description\");\n    });\n    var chevronRightIcon = h(ChevronRightIcon);\n    var rightIconContent = computed(function () {\n      if (props.arrow) {\n        return chevronRightIcon;\n      }\n      return renderTNode(internalInstance, \"rightIcon\");\n    });\n    var imageContent = computed(function () {\n      return renderTNode(internalInstance, \"image\");\n    });\n    var leftIconContent = computed(function () {\n      return renderTNode(internalInstance, \"leftIcon\");\n    });\n    var styleCell = computed(function () {\n      var _ref;\n      return [\"\".concat(name), \"\".concat(name, \"--\").concat(props.align), (_ref = {}, _defineProperty(_ref, \"\".concat(name, \"--hover\"), props.hover), _defineProperty(_ref, \"\".concat(name, \"--bordered\"), props.bordered), _ref)];\n    });\n    var onClick = function onClick(e) {\n      return emitEvent(\"click\", e);\n    };\n    return _objectSpread(_objectSpread({}, toRefs(props)), {}, {\n      name: name,\n      onClick: onClick,\n      styleCell: styleCell,\n      imageContent: imageContent,\n      rightIconContent: rightIconContent,\n      leftIconContent: leftIconContent,\n      noteContent: noteContent,\n      titleContent: titleContent,\n      descriptionContent: descriptionContent\n    });\n  }\n});\nvar _hoisted_1 = [\"src\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_node = resolveComponent(\"t-node\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.styleCell),\n    onClick: _cache[0] || (_cache[0] = function () {\n      return _ctx.onClick && _ctx.onClick.apply(_ctx, arguments);\n    })\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__left-icon\"))\n  }, [_ctx.leftIconContent ? (openBlock(), createBlock(_component_t_node, {\n    key: 0,\n    content: _ctx.leftIconContent\n  }, null, 8, [\"content\"])) : createCommentVNode(\"\", true), _ctx.image ? (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [typeof _ctx.image === \"string\" ? (openBlock(), createElementBlock(\"img\", {\n    key: 0,\n    src: _ctx.image,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__image\"))\n  }, null, 10, _hoisted_1)) : (openBlock(), createBlock(_component_t_node, {\n    key: 1,\n    content: _ctx.imageContent\n  }, null, 8, [\"content\"]))], 64)) : createCommentVNode(\"\", true)], 2), _ctx.titleContent ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__title\"))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.titleContent\n  }, null, 8, [\"content\"]), _ctx.required ? (openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.name, \"--required\"))\n  }, \"\\xA0*\", 2)) : createCommentVNode(\"\", true), _ctx.descriptionContent ? (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__description\"))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.descriptionContent\n  }, null, 8, [\"content\"])], 2)) : createCommentVNode(\"\", true)], 2)) : createCommentVNode(\"\", true), _ctx.noteContent ? (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__note\"))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.noteContent\n  }, null, 8, [\"content\"])], 2)) : createCommentVNode(\"\", true), _ctx.rightIconContent ? (openBlock(), createElementBlock(\"div\", {\n    key: 2,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__right-icon\"))\n  }, [createVNode(_component_t_node, {\n    content: _ctx.rightIconContent\n  }, null, 8, [\"content\"])], 2)) : createCommentVNode(\"\", true)], 2);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,IAAQA,SAAWC,OAAXD;AACR,IAAME,OAAUF;AAEhB,aAAeG,eAAgB;EAC7BD;EACAE,YAAY;IAAEC,KAAM,EAANA;GAAM;EACpBC,KAAO;EACPC,OAAO,CAAC,OAAO;EACfC,OAAMF,sBAAOG,OAAuB;IAClC,IAAMC,SAAY,gBAAaJ,KAAO,UAAQK,IAAI;IAClD,IAAMC,mBAAmBC,kBAAmB;IAC5C,IAAMC,cAAcC,QAAS;MAAA,OAAMC,cAAcJ,gBAAkB,aAAW,MAAM,CAAC;KAAA;IACrF,IAAMK,eAAeF,QAAS;MAAA,OAAMG,WAAY,mBAAkB,OAAO,CAAC;KAAA;IAC1E,IAAMC,qBAAqBJ,QAAS;MAAA,OAAMG,WAAY,mBAAkB,aAAa,CAAC;KAAA;IAEhF,uBAAmBE,EAAEC,gBAAgB;IACrC,uBAAmBN,SAAS,YAAM;MACtC,IAAIT,MAAMgB,KAAO;QACR;MACT;MACO,mBAAYV,kBAAkB,WAAW;IAClD,CAAC;IAED,IAAMW,eAAeR,QAAS;MAAA,OAAMG,WAAY,mBAAkB,OAAO,CAAC;KAAA;IAC1E,IAAMM,kBAAkBT,QAAS;MAAA,OAAMG,WAAY,mBAAkB,UAAU,CAAC;KAAA;IAE1E,gBAAYH,SAAS;MAAA;MAAA,OAAM,WAC5Bb,KACAA,+BAASI,KAAM,OAEZJ,gEAAgBI,KAAM,OACtBJ,uDAAmBI,KAAM,UAEhC;KAAA;IAED,IAAMmB,OAAU,YAAVA,OAAU,CAACC,CAAa;MAAA,iBAAU,SAASA,CAAC;IAAA;IAE3C,OACFC,uCAAOrB,KAAK;MACfJ;MACAuB;MACAG;MACAL;MACAM;MACAL;MACAV;MACAG;MACAE;IAAA;EAEJ;AACF,CAAC;;;;oBChFC,qBAoBK;IApBCW,qBAAO,MAASF;IAAGH;aAAOM,KAAON;IAAA;MACrCO,mBAMK;IANCF,sBAAUC,eAAI7B;MACJ6B,IAAe,iCAA7BE,YAAkEC;;IAAlCC,SAASJ,IAAe;4DACxCA,KAAKK,sBAArBC,mBAGUC;IAAAC;EAAA,WAFUR,IAAI,oCAAtBM,mBAA8E;;IAAvCG,KAAKT,IAAK;IAAGD,sBAAUC,eAAI7B;4CAClE+B,YAA+CC;;IAA/BC,SAASJ,IAAY;wEAG9BA,IAAY,8BAAvBM,mBAKK;;IALqBP,sBAAUC,eAAI7B;MACtCuC,YAAyCP;IAAhCC,OAAS,OAAYlB;GAAA,yBAAuBc,IAAQ,0BAApBM,mBAAgE;;IAAzCP,sBAAUC,eAAI7B;KAAc,OAAO,sCACxF6B,IAAkB,oCAA7BM,mBAEK;;IAF2BP,sBAAUC,eAAI7B;MAC5CuC,YAA8CP;IAArCC,OAAS,OAAkBhB;EAAA,oGAG7BY,IAAW,6BAAtBM,mBAEK;;IAFoBP,sBAAUC,eAAI7B;MACrCuC,YAAuCP;IAA9BC,OAAS,OAAWrB;EAAA,+DAEpBiB,IAAgB,kCAA3BM,mBAEK;;IAFyBP,sBAAUC,eAAI7B;MAC1CuC,YAA4CP;IAAnCC,OAAS,OAAgBN;GAAA","names":["prefix","config","name","defineComponent","components","TNode","props","emits","setup","context","emitEvent","emit","internalInstance","getCurrentInstance","noteContent","computed","renderContent","titleContent","renderTNode","descriptionContent","h","ChevronRightIcon","arrow","imageContent","leftIconContent","onClick","e","toRefs","styleCell","rightIconContent","class","_ctx","_createElementVNode","_createBlock","_component_t_node","content","image","_createElementBlock","_Fragment","key","src","_createVNode"],"sources":["../../src/cell/cell.vue","../../src/cell/cell.vue?vue&type=template&id=7c8286ac&lang.js"],"sourcesContent":["<template>\n  <div :class=\"styleCell\" @click=\"onClick\">\n    <div :class=\"`${name}__left-icon`\">\n      <t-node v-if=\"leftIconContent\" :content=\"leftIconContent\"></t-node>\n      <template v-if=\"image\">\n        <img v-if=\"typeof image === 'string'\" :src=\"image\" :class=\"`${name}__image`\" />\n        <t-node v-else :content=\"imageContent\"></t-node>\n      </template>\n    </div>\n    <div v-if=\"titleContent\" :class=\"`${name}__title`\">\n      <t-node :content=\"titleContent\"></t-node><span v-if=\"required\" :class=\"`${name}--required`\">&nbsp;*</span>\n      <div v-if=\"descriptionContent\" :class=\"`${name}__description`\">\n        <t-node :content=\"descriptionContent\"></t-node>\n      </div>\n    </div>\n    <div v-if=\"noteContent\" :class=\"`${name}__note`\">\n      <t-node :content=\"noteContent\"></t-node>\n    </div>\n    <div v-if=\"rightIconContent\" :class=\"`${name}__right-icon`\">\n      <t-node :content=\"rightIconContent\"></t-node>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, toRefs, h, SetupContext } from 'vue';\nimport { ChevronRightIcon } from 'tdesign-icons-vue-next';\nimport { renderTNode, renderContent, TNode, useEmitEvent } from '../shared';\nimport config from '../config';\nimport CellProps from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-cell`;\n\nexport default defineComponent({\n  name,\n  components: { TNode },\n  props: CellProps,\n  emits: ['click'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const internalInstance = getCurrentInstance();\n    const noteContent = computed(() => renderContent(internalInstance, 'default', 'note'));\n    const titleContent = computed(() => renderTNode(internalInstance, 'title'));\n    const descriptionContent = computed(() => renderTNode(internalInstance, 'description'));\n\n    const chevronRightIcon = h(ChevronRightIcon);\n    const rightIconContent = computed(() => {\n      if (props.arrow) {\n        return chevronRightIcon;\n      }\n      return renderTNode(internalInstance, 'rightIcon');\n    });\n\n    const imageContent = computed(() => renderTNode(internalInstance, 'image'));\n    const leftIconContent = computed(() => renderTNode(internalInstance, 'leftIcon'));\n\n    const styleCell = computed(() => [\n      `${name}`,\n      `${name}--${props.align}`,\n      {\n        [`${name}--hover`]: props.hover,\n        [`${name}--bordered`]: props.bordered,\n      },\n    ]);\n\n    const onClick = (e: Event) => emitEvent('click', e);\n\n    return {\n      ...toRefs(props),\n      name,\n      onClick,\n      styleCell,\n      imageContent,\n      rightIconContent,\n      leftIconContent,\n      noteContent,\n      titleContent,\n      descriptionContent,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"styleCell\" @click=\"onClick\">\n    <div :class=\"`${name}__left-icon`\">\n      <t-node v-if=\"leftIconContent\" :content=\"leftIconContent\"></t-node>\n      <template v-if=\"image\">\n        <img v-if=\"typeof image === 'string'\" :src=\"image\" :class=\"`${name}__image`\" />\n        <t-node v-else :content=\"imageContent\"></t-node>\n      </template>\n    </div>\n    <div v-if=\"titleContent\" :class=\"`${name}__title`\">\n      <t-node :content=\"titleContent\"></t-node><span v-if=\"required\" :class=\"`${name}--required`\">&nbsp;*</span>\n      <div v-if=\"descriptionContent\" :class=\"`${name}__description`\">\n        <t-node :content=\"descriptionContent\"></t-node>\n      </div>\n    </div>\n    <div v-if=\"noteContent\" :class=\"`${name}__note`\">\n      <t-node :content=\"noteContent\"></t-node>\n    </div>\n    <div v-if=\"rightIconContent\" :class=\"`${name}__right-icon`\">\n      <t-node :content=\"rightIconContent\"></t-node>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, toRefs, h, SetupContext } from 'vue';\nimport { ChevronRightIcon } from 'tdesign-icons-vue-next';\nimport { renderTNode, renderContent, TNode, useEmitEvent } from '../shared';\nimport config from '../config';\nimport CellProps from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-cell`;\n\nexport default defineComponent({\n  name,\n  components: { TNode },\n  props: CellProps,\n  emits: ['click'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const internalInstance = getCurrentInstance();\n    const noteContent = computed(() => renderContent(internalInstance, 'default', 'note'));\n    const titleContent = computed(() => renderTNode(internalInstance, 'title'));\n    const descriptionContent = computed(() => renderTNode(internalInstance, 'description'));\n\n    const chevronRightIcon = h(ChevronRightIcon);\n    const rightIconContent = computed(() => {\n      if (props.arrow) {\n        return chevronRightIcon;\n      }\n      return renderTNode(internalInstance, 'rightIcon');\n    });\n\n    const imageContent = computed(() => renderTNode(internalInstance, 'image'));\n    const leftIconContent = computed(() => renderTNode(internalInstance, 'leftIcon'));\n\n    const styleCell = computed(() => [\n      `${name}`,\n      `${name}--${props.align}`,\n      {\n        [`${name}--hover`]: props.hover,\n        [`${name}--bordered`]: props.bordered,\n      },\n    ]);\n\n    const onClick = (e: Event) => emitEvent('click', e);\n\n    return {\n      ...toRefs(props),\n      name,\n      onClick,\n      styleCell,\n      imageContent,\n      rightIconContent,\n      leftIconContent,\n      noteContent,\n      titleContent,\n      descriptionContent,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}