{"ast":null,"code":"/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport { ref } from 'vue';\nfunction getDirection(x, y) {\n  if (x > y) {\n    return \"horizontal\";\n  }\n  if (y > x) {\n    return \"vertical\";\n  }\n  return \"\";\n}\nfunction useTouch() {\n  var startX = ref(0);\n  var startY = ref(0);\n  var deltaX = ref(0);\n  var deltaY = ref(0);\n  var offsetX = ref(0);\n  var offsetY = ref(0);\n  var direction = ref(\"\");\n  var isVertical = function isVertical() {\n    return direction.value === \"vertical\";\n  };\n  var isHorizontal = function isHorizontal() {\n    return direction.value === \"horizontal\";\n  };\n  var reset = function reset() {\n    deltaX.value = 0;\n    deltaY.value = 0;\n    offsetX.value = 0;\n    offsetY.value = 0;\n    direction.value = \"\";\n  };\n  var start = function start(event) {\n    reset();\n    startX.value = event.touches[0].clientX;\n    startY.value = event.touches[0].clientY;\n  };\n  var move = function move(event) {\n    var touch = event.touches[0];\n    deltaX.value = (touch.clientX < 0 ? 0 : touch.clientX) - startX.value;\n    deltaY.value = touch.clientY - startY.value;\n    offsetX.value = Math.abs(deltaX.value);\n    offsetY.value = Math.abs(deltaY.value);\n    var LOCK_DIRECTION_DISTANCE = 10;\n    if (!direction.value || offsetX.value < LOCK_DIRECTION_DISTANCE && offsetY.value < LOCK_DIRECTION_DISTANCE) {\n      direction.value = getDirection(offsetX.value, offsetY.value);\n    }\n  };\n  return {\n    move: move,\n    start: start,\n    reset: reset,\n    startX: startX,\n    startY: startY,\n    deltaX: deltaX,\n    deltaY: deltaY,\n    offsetX: offsetX,\n    offsetY: offsetY,\n    direction: direction,\n    isVertical: isVertical,\n    isHorizontal: isHorizontal\n  };\n}\nexport { useTouch };","map":{"version":3,"mappings":";;;;;;;AAIA,SAASA,aAAaC,GAAWC,CAAW;EAC1C,IAAID,IAAIC,CAAG;IACF;EACT;EACA,IAAIA,IAAID,CAAG;IACF;EACT;EACO;AACT;AAEO,SAASE,QAAW;EACnB,aAASC,IAAI,CAAC;EACd,aAASA,IAAI,CAAC;EACd,aAASA,IAAI,CAAC;EACd,aAASA,IAAI,CAAC;EACd,cAAUA,IAAI,CAAC;EACf,cAAUA,IAAI,CAAC;EACf,gBAAYA,IAAe,EAAE;EAE7B,iBAAa,SAAbC;IAAA,OAAmBC,UAAUC,KAAU;EAAA;EACvC,mBAAe,SAAfC;IAAA,OAAqBF,UAAUC,KAAU;EAAA;EAE/C,IAAME,QAAQ,SAARA,QAAc;IAClBC,OAAOH,KAAQ;IACfI,OAAOJ,KAAQ;IACfK,QAAQL,KAAQ;IAChBM,QAAQN,KAAQ;IAChBD,UAAUC,KAAQ;GACpB;EAEM,YAAS,SAATO,MAAUC,KAAsB;IAC9BN;IACCO,eAAQD,KAAM,SAAQ,CAAG;IACzBE,eAAQF,KAAM,SAAQ,CAAG;GAClC;EAEM,WAAQ,SAARG,KAASH,KAAsB;IAC7B,YAAQA,MAAMI,OAAQ;IAE5BT,OAAOH,SAASa,KAAM,WAAU,IAAI,CAAI,SAAMC,WAAWL,MAAO;IACzDL,eAAQS,KAAM,WAAUH,MAAO;IACtCL,QAAQL,KAAQ,QAAKe,GAAI,QAAOf,KAAK;IACrCM,QAAQN,KAAQ,QAAKe,GAAI,QAAOf,KAAK;IAGrC,IAAMgB,uBAA0B;IAC5B,KAACjB,UAAUC,KAAU,YAAQA,QAAQgB,uBAA2B,YAAQhB,QAAQgB,uBAA0B;MAC5GjB,UAAUC,KAAQ,gBAAaK,OAAQ,QAAOC,QAAQN,KAAK;IAC7D;GACF;EAEO;IACLW;IACAJ;IACAL;IACAO;IACAC;IACAP;IACAC;IACAC;IACAC;IACAP;IACAD;IACAG;GACF;AACF","names":["getDirection","x","y","useTouch","ref","isVertical","direction","value","isHorizontal","reset","deltaX","deltaY","offsetX","offsetY","start","event","startX","startY","move","touches","touch","clientX","abs","LOCK_DIRECTION_DISTANCE"],"sources":["../../../src/shared/useTouch/index.ts"],"sourcesContent":["import { ref } from 'vue';\n\ntype Direction = '' | 'vertical' | 'horizontal';\n\nfunction getDirection(x: number, y: number) {\n  if (x > y) {\n    return 'horizontal';\n  }\n  if (y > x) {\n    return 'vertical';\n  }\n  return '';\n}\n\nexport function useTouch() {\n  const startX = ref(0);\n  const startY = ref(0);\n  const deltaX = ref(0);\n  const deltaY = ref(0);\n  const offsetX = ref(0);\n  const offsetY = ref(0);\n  const direction = ref<Direction>('');\n\n  const isVertical = () => direction.value === 'vertical';\n  const isHorizontal = () => direction.value === 'horizontal';\n\n  const reset = () => {\n    deltaX.value = 0;\n    deltaY.value = 0;\n    offsetX.value = 0;\n    offsetY.value = 0;\n    direction.value = '';\n  };\n\n  const start = ((event: TouchEvent) => {\n    reset();\n    startX.value = event.touches[0].clientX;\n    startY.value = event.touches[0].clientY;\n  }) as EventListener;\n\n  const move = ((event: TouchEvent) => {\n    const touch = event.touches[0];\n    // safari back will set clientX to negative number\n    deltaX.value = (touch.clientX < 0 ? 0 : touch.clientX) - startX.value;\n    deltaY.value = touch.clientY - startY.value;\n    offsetX.value = Math.abs(deltaX.value);\n    offsetY.value = Math.abs(deltaY.value);\n\n    // lock direction when distance is greater than a certain value\n    const LOCK_DIRECTION_DISTANCE = 10;\n    if (!direction.value || (offsetX.value < LOCK_DIRECTION_DISTANCE && offsetY.value < LOCK_DIRECTION_DISTANCE)) {\n      direction.value = getDirection(offsetX.value, offsetY.value);\n    }\n  }) as EventListener;\n\n  return {\n    move,\n    start,\n    reset,\n    startX,\n    startY,\n    deltaX,\n    deltaY,\n    offsetX,\n    offsetY,\n    direction,\n    isVertical,\n    isHorizontal,\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}