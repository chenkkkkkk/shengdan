{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport { h, defineComponent, getCurrentInstance, reactive, computed, ref, toRefs, onMounted, nextTick, watch, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, createVNode, createCommentVNode, normalizeStyle, createBlock, withModifiers } from 'vue';\nimport { InfoCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-vue-next';\nimport isFunction from 'lodash/isFunction';\nimport NoticeBarProps from './props.js';\nimport config from '../config.js';\nimport '../shared/index.js';\nimport TNodeComponent from '../shared/render-tnode.js';\nimport { useEmitEvent } from '../shared/useEmitEvent/index.js';\nimport { renderTNode } from '../shared/render.js';\nimport { useVModel } from '../shared/useVModel/index.js';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/constants.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport 'lodash/camelCase';\nimport '../shared/useChildSlots/index.js';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '@babel/runtime/helpers/typeof';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-notice-bar\");\nvar iconDefault = {\n  info: h(InfoCircleFilledIcon),\n  success: h(CheckCircleFilledIcon),\n  warning: h(InfoCircleFilledIcon),\n  error: h(CloseCircleFilledIcon)\n};\nvar script = defineComponent({\n  name: name,\n  components: {\n    TNode: TNodeComponent\n  },\n  props: NoticeBarProps,\n  emits: [\"click\", \"change\"],\n  setup: function setup(props, context) {\n    var emitEvent = useEmitEvent(props, context.emit);\n    var internalInstance = getCurrentInstance();\n    var state = reactive({\n      duration: 0,\n      offset: 0,\n      listWidth: 0,\n      itemWidth: 0,\n      timer: null,\n      nextTimer: null,\n      scroll: {\n        marquee: false,\n        speed: 50,\n        loop: -1,\n        delay: 0\n      }\n    });\n    var rootClasses = computed(function () {\n      return [\"\".concat(name), \"\".concat(name, \"--\").concat(props.theme)];\n    });\n    var prefixIconContent = computed(function () {\n      var iconContent = null;\n      if (isFunction(props.prefixIcon) || context.slots.prefixIcon) {\n        iconContent = renderTNode(internalInstance, \"prefixIcon\");\n      } else if (props.prefixIcon) {\n        var key = props.theme;\n        iconContent = (iconDefault === null || iconDefault === void 0 ? void 0 : iconDefault[key]) || null;\n      }\n      return iconContent;\n    });\n    var suffixIconContent = computed(function () {\n      return renderTNode(internalInstance, \"suffixIcon\");\n    });\n    var showExtraText = computed(function () {\n      return renderTNode(internalInstance, \"extra\");\n    });\n    var showContent = computed(function () {\n      return renderTNode(internalInstance, \"content\");\n    });\n    function handleClick(trigger) {\n      emitEvent(\"click\", trigger);\n    }\n    var animateStyle = computed(function () {\n      return {\n        transform: state.offset ? \"translateX(\".concat(state.offset, \"px)\") : \"\",\n        transitionDuration: \"\".concat(state.duration, \"s\"),\n        transitionTimingFunction: \"linear\"\n      };\n    });\n    var listDOM = ref();\n    var itemDOM = ref();\n    var _toRefs = toRefs(props),\n      visible = _toRefs.visible,\n      modelValue = _toRefs.modelValue;\n    var _useVModel = useVModel(visible, modelValue, props.defaultVisible, props.onChange),\n      _useVModel2 = _slicedToArray(_useVModel, 2),\n      isShow = _useVModel2[0],\n      setStatusValue = _useVModel2[1];\n    function handleScrolling() {\n      var _props$marquee, _marquee$speed, _marquee$delay;\n      if (!(props !== null && props !== void 0 && props.marquee) || (props === null || props === void 0 ? void 0 : (_props$marquee = props.marquee) === null || _props$marquee === void 0 ? void 0 : _props$marquee.loop) === 0) {\n        return;\n      }\n      if (typeof props.marquee === \"boolean\") {\n        state.scroll = _objectSpread(_objectSpread({}, state.scroll), {}, {\n          marquee: props.marquee\n        });\n      }\n      var marquee = props.marquee;\n      state.scroll = {\n        marquee: true,\n        loop: typeof (marquee === null || marquee === void 0 ? void 0 : marquee.loop) === \"undefined\" ? state.scroll.loop : marquee.loop,\n        speed: (_marquee$speed = marquee.speed) !== null && _marquee$speed !== void 0 ? _marquee$speed : state.scroll.speed,\n        delay: (_marquee$delay = marquee.delay) !== null && _marquee$delay !== void 0 ? _marquee$delay : state.scroll.delay\n      };\n      setTimeout(function () {\n        var _listDOM$value, _itemDOM$value;\n        var listDOMWidth = (_listDOM$value = listDOM.value) === null || _listDOM$value === void 0 ? void 0 : _listDOM$value.getBoundingClientRect().width;\n        var itemDOMWidth = (_itemDOM$value = itemDOM.value) === null || _itemDOM$value === void 0 ? void 0 : _itemDOM$value.getBoundingClientRect().width;\n        if (itemDOMWidth > listDOMWidth) {\n          state.offset = -itemDOMWidth;\n          state.duration = itemDOMWidth / state.scroll.speed;\n          state.listWidth = listDOMWidth;\n          state.itemWidth = itemDOMWidth;\n        }\n      }, state.scroll.delay);\n    }\n    function handleTransitionend() {\n      state.scroll.loop = --state.scroll.loop;\n      if (state.scroll.loop === 0) {\n        state.scroll = _objectSpread(_objectSpread({}, state.scroll), {}, {\n          marquee: false\n        });\n        return;\n      }\n      state.offset = state.listWidth;\n      state.duration = 0;\n      setTimeout(function () {\n        state.offset = -state.itemWidth;\n        state.duration = (state.itemWidth + state.listWidth) / state.scroll.speed;\n      }, 0);\n    }\n    onMounted(function () {\n      nextTick(function () {\n        if (isShow.value) {\n          handleScrolling();\n        }\n      });\n    });\n    watch(function () {\n      return isShow.value;\n    }, function () {\n      emitEvent(\"change\", isShow.value);\n      nextTick(function () {\n        if (isShow.value) {\n          state.offset = state.listWidth;\n          state.duration = 0;\n          handleScrolling();\n        }\n      });\n    });\n    return _objectSpread(_objectSpread(_objectSpread({\n      name: name\n    }, toRefs(props)), toRefs(state)), {}, {\n      rootClasses: rootClasses,\n      prefixIconContent: prefixIconContent,\n      suffixIconContent: suffixIconContent,\n      showExtraText: showExtraText,\n      showContent: showContent,\n      isShow: isShow,\n      handleClick: handleClick,\n      listDOM: listDOM,\n      itemDOM: itemDOM,\n      animateStyle: animateStyle,\n      handleScrolling: handleScrolling,\n      handleTransitionend: handleTransitionend\n    });\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_node = resolveComponent(\"t-node\");\n  return _ctx.isShow ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.rootClasses)\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__inner\"))\n  }, [_ctx.prefixIconContent ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__hd\")),\n    onClick: _cache[0] || (_cache[0] = function () {\n      return _ctx.handleClick(\"prefix-icon\");\n    })\n  }, [createVNode(_component_t_node, {\n    content: _ctx.prefixIconContent\n  }, null, 8, [\"content\"])], 2)) : createCommentVNode(\"\", true), createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__bd\"))\n  }, [createElementVNode(\"div\", {\n    ref: \"listDOM\",\n    class: normalizeClass(\"\".concat(_ctx.name, \"__list \").concat(_ctx.scroll.marquee ? \"\".concat(_ctx.name, \"__list--scrolling\") : \"\"))\n  }, [createElementVNode(\"div\", {\n    ref: \"itemDOM\",\n    class: normalizeClass(\"\".concat(_ctx.name, \"__item \").concat(_ctx.showExtraText ? \"\".concat(_ctx.name, \"__item-detail\") : \"\")),\n    style: normalizeStyle(_ctx.scroll.marquee ? _ctx.animateStyle : \"\"),\n    onTransitionend: _cache[3] || (_cache[3] = function ($event) {\n      return _ctx.handleTransitionend();\n    })\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__text\")),\n    onClick: _cache[2] || (_cache[2] = function () {\n      return _ctx.handleClick(\"content\");\n    })\n  }, [_ctx.showContent ? (openBlock(), createBlock(_component_t_node, {\n    key: 0,\n    content: _ctx.showContent\n  }, null, 8, [\"content\"])) : createCommentVNode(\"\", true), createElementVNode(\"span\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__text-detail\")),\n    onClick: _cache[1] || (_cache[1] = withModifiers(function () {\n      return _ctx.handleClick(\"extra\");\n    }, [\"stop\"]))\n  }, [_ctx.showExtraText ? (openBlock(), createBlock(_component_t_node, {\n    key: 0,\n    content: _ctx.showExtraText\n  }, null, 8, [\"content\"])) : createCommentVNode(\"\", true)], 2)], 2)], 38)], 2)], 2), _ctx.suffixIconContent !== void 0 ? (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__ft\")),\n    onClick: _cache[4] || (_cache[4] = function () {\n      return _ctx.handleClick(\"suffix-icon\");\n    })\n  }, [createVNode(_component_t_node, {\n    content: _ctx.suffixIconContent\n  }, null, 8, [\"content\"])], 2)) : createCommentVNode(\"\", true)], 2)], 2)) : createCommentVNode(\"\", true);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":"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","names":["prefix","config","name","iconDefault","info","h","InfoCircleFilledIcon","success","CheckCircleFilledIcon","warning","error","CloseCircleFilledIcon","defineComponent","components","TNode","props","emits","setup","context","emitEvent","emit","internalInstance","getCurrentInstance","state","reactive","duration","offset","listWidth","itemWidth","timer","nextTimer","scroll","marquee","speed","loop","delay","computed","iconContent","isFunction","slots","prefixIcon","key","suffixIconContent","renderTNode","showExtraText","showContent","handleClick","trigger","transform","transitionDuration","transitionTimingFunction","listDOM","ref","itemDOM","toRefs","visible","modelValue","useVModel","_useVModel2","isShow","setStatusValue","handleScrolling","_props$marquee","setTimeout","listDOMWidth","value","_listDOM$value","getBoundingClientRect","itemDOMWidth","_itemDOM$value","handleTransitionend","onMounted","nextTick","watch","rootClasses","prefixIconContent","animateStyle","_ctx","_createElementBlock","class","_createElementVNode","onClick","_createVNode","_component_t_node","content","_normalizeClass","style","_normalizeStyle","onTransitionend","_createBlock"],"sources":["../../src/notice-bar/notice-bar.vue","../../src/notice-bar/notice-bar.vue?vue&type=template&id=a46bc1e6&lang.js"],"sourcesContent":["<template>\n  <div v-if=\"isShow\" :class=\"rootClasses\">\n    <div :class=\"`${name}__inner`\">\n      <div v-if=\"prefixIconContent\" :class=\"`${name}__hd`\" @click=\"() => handleClick('prefix-icon')\">\n        <t-node :content=\"prefixIconContent\"></t-node>\n      </div>\n\n      <div :class=\"`${name}__bd`\">\n        <div ref=\"listDOM\" :class=\"`${name}__list ${scroll.marquee ? `${name}__list--scrolling` : ''}`\">\n          <div\n            ref=\"itemDOM\"\n            :class=\"`${name}__item ${showExtraText ? `${name}__item-detail` : ''}`\"\n            :style=\"scroll.marquee ? animateStyle : ''\"\n            @transitionend=\"handleTransitionend()\"\n          >\n            <span :class=\"`${name}__text`\" @click=\"() => handleClick('content')\">\n              <t-node v-if=\"showContent\" :content=\"showContent\"></t-node>\n              <span :class=\"`${name}__text-detail`\" @click.stop=\"() => handleClick('extra')\">\n                <t-node v-if=\"showExtraText\" :content=\"showExtraText\"></t-node>\n              </span>\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div v-if=\"suffixIconContent !== undefined\" :class=\"`${name}__ft`\" @click=\"() => handleClick('suffix-icon')\">\n        <t-node :content=\"suffixIconContent\"></t-node>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  reactive,\n  ref,\n  toRefs,\n  SetupContext,\n  computed,\n  onMounted,\n  nextTick,\n  defineComponent,\n  h,\n  getCurrentInstance,\n  watch,\n  watchEffect,\n} from 'vue';\nimport { InfoCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-vue-next';\nimport isFunction from 'lodash/isFunction';\nimport NoticeBarProps from './props';\nimport { NoticeBarTrigger, DrawMarquee } from './type';\nimport config from '../config';\nimport { useEmitEvent, renderTNode, TNode, useVModel } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-notice-bar`;\nconst iconDefault = {\n  info: h(InfoCircleFilledIcon),\n  success: h(CheckCircleFilledIcon),\n  warning: h(InfoCircleFilledIcon),\n  error: h(CloseCircleFilledIcon),\n};\nexport default defineComponent({\n  name,\n  components: { TNode },\n  props: NoticeBarProps,\n  emits: ['click', 'change'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const internalInstance = getCurrentInstance();\n    // 初始化数据\n    const state = reactive({\n      duration: 0,\n      offset: 0,\n      listWidth: 0,\n      itemWidth: 0,\n      timer: null,\n      nextTimer: null,\n      scroll: {\n        marquee: false,\n        speed: 50,\n        loop: -1, // 值为 -1 表示循环播放，值为 0 表示不循环播放\n        delay: 0,\n      },\n    });\n\n    const rootClasses = computed(() => [`${name}`, `${name}--${props.theme}`]);\n\n    // prefix-icon\n    const prefixIconContent = computed(() => {\n      let iconContent = null;\n      if (isFunction(props.prefixIcon) || context.slots.prefixIcon) {\n        iconContent = renderTNode(internalInstance, 'prefixIcon');\n      } else if (props.prefixIcon) {\n        const key = props.theme as string;\n        iconContent = iconDefault?.[key] || null;\n      }\n      return iconContent;\n    });\n\n    // suffix-icon\n    const suffixIconContent = computed(() => renderTNode(internalInstance, 'suffixIcon'));\n    // extra\n    const showExtraText = computed(() => renderTNode(internalInstance, 'extra'));\n    // content\n    const showContent = computed(() => renderTNode(internalInstance, 'content'));\n    // click\n    function handleClick(trigger: NoticeBarTrigger) {\n      emitEvent('click', trigger);\n    }\n    // 动画 i\n    const animateStyle = computed(() => ({\n      transform: state.offset ? `translateX(${state.offset}px)` : '',\n      transitionDuration: `${state.duration}s`,\n      transitionTimingFunction: 'linear',\n    }));\n\n    const listDOM = ref();\n    const itemDOM = ref();\n\n    const { visible, modelValue } = toRefs(props);\n    const [isShow, setStatusValue] = useVModel(\n      visible,\n      modelValue,\n      props.defaultVisible,\n      props.onChange as (value: boolean | undefined) => void,\n    );\n    function handleScrolling() {\n      if (!props?.marquee || (props?.marquee as DrawMarquee)?.loop === 0) {\n        return;\n      }\n      // 初始化动画参数\n      if (typeof props.marquee === 'boolean') {\n        state.scroll = { ...state.scroll, marquee: props.marquee };\n      }\n      const marquee = props.marquee as DrawMarquee;\n      state.scroll = {\n        marquee: true,\n        loop: typeof marquee?.loop === 'undefined' ? state.scroll.loop : marquee.loop,\n        speed: marquee.speed ?? state.scroll.speed,\n        delay: marquee.delay ?? state.scroll.delay,\n      };\n      // 设置动画\n      setTimeout(() => {\n        const listDOMWidth = listDOM.value?.getBoundingClientRect().width;\n        const itemDOMWidth = itemDOM.value?.getBoundingClientRect().width;\n        if (itemDOMWidth > listDOMWidth) {\n          state.offset = -itemDOMWidth;\n          state.duration = itemDOMWidth / state.scroll.speed;\n          state.listWidth = listDOMWidth;\n          state.itemWidth = itemDOMWidth;\n        }\n      }, state.scroll.delay);\n    }\n    // 动画结束后，初始化动画\n    function handleTransitionend() {\n      // 触发再次滚的\n      state.scroll.loop = --state.scroll.loop;\n      if (state.scroll.loop === 0) {\n        state.scroll = {\n          ...state.scroll,\n          marquee: false,\n        };\n        return;\n      }\n      state.offset = state.listWidth;\n      state.duration = 0;\n\n      setTimeout(() => {\n        state.offset = -state.itemWidth;\n        state.duration = (state.itemWidth + state.listWidth) / state.scroll.speed;\n      }, 0);\n    }\n    onMounted(() => {\n      nextTick(() => {\n        if (isShow.value) {\n          handleScrolling();\n        }\n      });\n    });\n    watch(\n      () => isShow.value,\n      () => {\n        emitEvent('change', isShow.value);\n        nextTick(() => {\n          if (isShow.value) {\n            state.offset = state.listWidth;\n            state.duration = 0;\n            handleScrolling();\n          }\n        });\n      },\n    );\n\n    return {\n      name,\n      ...toRefs(props),\n      ...toRefs(state),\n      rootClasses,\n      prefixIconContent,\n      suffixIconContent,\n      showExtraText,\n      showContent,\n      isShow,\n      handleClick,\n      listDOM,\n      itemDOM,\n      animateStyle,\n      handleScrolling,\n      handleTransitionend,\n    };\n  },\n});\n</script>\n","<template>\n  <div v-if=\"isShow\" :class=\"rootClasses\">\n    <div :class=\"`${name}__inner`\">\n      <div v-if=\"prefixIconContent\" :class=\"`${name}__hd`\" @click=\"() => handleClick('prefix-icon')\">\n        <t-node :content=\"prefixIconContent\"></t-node>\n      </div>\n\n      <div :class=\"`${name}__bd`\">\n        <div ref=\"listDOM\" :class=\"`${name}__list ${scroll.marquee ? `${name}__list--scrolling` : ''}`\">\n          <div\n            ref=\"itemDOM\"\n            :class=\"`${name}__item ${showExtraText ? `${name}__item-detail` : ''}`\"\n            :style=\"scroll.marquee ? animateStyle : ''\"\n            @transitionend=\"handleTransitionend()\"\n          >\n            <span :class=\"`${name}__text`\" @click=\"() => handleClick('content')\">\n              <t-node v-if=\"showContent\" :content=\"showContent\"></t-node>\n              <span :class=\"`${name}__text-detail`\" @click.stop=\"() => handleClick('extra')\">\n                <t-node v-if=\"showExtraText\" :content=\"showExtraText\"></t-node>\n              </span>\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div v-if=\"suffixIconContent !== undefined\" :class=\"`${name}__ft`\" @click=\"() => handleClick('suffix-icon')\">\n        <t-node :content=\"suffixIconContent\"></t-node>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  reactive,\n  ref,\n  toRefs,\n  SetupContext,\n  computed,\n  onMounted,\n  nextTick,\n  defineComponent,\n  h,\n  getCurrentInstance,\n  watch,\n  watchEffect,\n} from 'vue';\nimport { InfoCircleFilledIcon, CheckCircleFilledIcon, CloseCircleFilledIcon } from 'tdesign-icons-vue-next';\nimport isFunction from 'lodash/isFunction';\nimport NoticeBarProps from './props';\nimport { NoticeBarTrigger, DrawMarquee } from './type';\nimport config from '../config';\nimport { useEmitEvent, renderTNode, TNode, useVModel } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-notice-bar`;\nconst iconDefault = {\n  info: h(InfoCircleFilledIcon),\n  success: h(CheckCircleFilledIcon),\n  warning: h(InfoCircleFilledIcon),\n  error: h(CloseCircleFilledIcon),\n};\nexport default defineComponent({\n  name,\n  components: { TNode },\n  props: NoticeBarProps,\n  emits: ['click', 'change'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const internalInstance = getCurrentInstance();\n    // 初始化数据\n    const state = reactive({\n      duration: 0,\n      offset: 0,\n      listWidth: 0,\n      itemWidth: 0,\n      timer: null,\n      nextTimer: null,\n      scroll: {\n        marquee: false,\n        speed: 50,\n        loop: -1, // 值为 -1 表示循环播放，值为 0 表示不循环播放\n        delay: 0,\n      },\n    });\n\n    const rootClasses = computed(() => [`${name}`, `${name}--${props.theme}`]);\n\n    // prefix-icon\n    const prefixIconContent = computed(() => {\n      let iconContent = null;\n      if (isFunction(props.prefixIcon) || context.slots.prefixIcon) {\n        iconContent = renderTNode(internalInstance, 'prefixIcon');\n      } else if (props.prefixIcon) {\n        const key = props.theme as string;\n        iconContent = iconDefault?.[key] || null;\n      }\n      return iconContent;\n    });\n\n    // suffix-icon\n    const suffixIconContent = computed(() => renderTNode(internalInstance, 'suffixIcon'));\n    // extra\n    const showExtraText = computed(() => renderTNode(internalInstance, 'extra'));\n    // content\n    const showContent = computed(() => renderTNode(internalInstance, 'content'));\n    // click\n    function handleClick(trigger: NoticeBarTrigger) {\n      emitEvent('click', trigger);\n    }\n    // 动画 i\n    const animateStyle = computed(() => ({\n      transform: state.offset ? `translateX(${state.offset}px)` : '',\n      transitionDuration: `${state.duration}s`,\n      transitionTimingFunction: 'linear',\n    }));\n\n    const listDOM = ref();\n    const itemDOM = ref();\n\n    const { visible, modelValue } = toRefs(props);\n    const [isShow, setStatusValue] = useVModel(\n      visible,\n      modelValue,\n      props.defaultVisible,\n      props.onChange as (value: boolean | undefined) => void,\n    );\n    function handleScrolling() {\n      if (!props?.marquee || (props?.marquee as DrawMarquee)?.loop === 0) {\n        return;\n      }\n      // 初始化动画参数\n      if (typeof props.marquee === 'boolean') {\n        state.scroll = { ...state.scroll, marquee: props.marquee };\n      }\n      const marquee = props.marquee as DrawMarquee;\n      state.scroll = {\n        marquee: true,\n        loop: typeof marquee?.loop === 'undefined' ? state.scroll.loop : marquee.loop,\n        speed: marquee.speed ?? state.scroll.speed,\n        delay: marquee.delay ?? state.scroll.delay,\n      };\n      // 设置动画\n      setTimeout(() => {\n        const listDOMWidth = listDOM.value?.getBoundingClientRect().width;\n        const itemDOMWidth = itemDOM.value?.getBoundingClientRect().width;\n        if (itemDOMWidth > listDOMWidth) {\n          state.offset = -itemDOMWidth;\n          state.duration = itemDOMWidth / state.scroll.speed;\n          state.listWidth = listDOMWidth;\n          state.itemWidth = itemDOMWidth;\n        }\n      }, state.scroll.delay);\n    }\n    // 动画结束后，初始化动画\n    function handleTransitionend() {\n      // 触发再次滚的\n      state.scroll.loop = --state.scroll.loop;\n      if (state.scroll.loop === 0) {\n        state.scroll = {\n          ...state.scroll,\n          marquee: false,\n        };\n        return;\n      }\n      state.offset = state.listWidth;\n      state.duration = 0;\n\n      setTimeout(() => {\n        state.offset = -state.itemWidth;\n        state.duration = (state.itemWidth + state.listWidth) / state.scroll.speed;\n      }, 0);\n    }\n    onMounted(() => {\n      nextTick(() => {\n        if (isShow.value) {\n          handleScrolling();\n        }\n      });\n    });\n    watch(\n      () => isShow.value,\n      () => {\n        emitEvent('change', isShow.value);\n        nextTick(() => {\n          if (isShow.value) {\n            state.offset = state.listWidth;\n            state.duration = 0;\n            handleScrolling();\n          }\n        });\n      },\n    );\n\n    return {\n      name,\n      ...toRefs(props),\n      ...toRefs(state),\n      rootClasses,\n      prefixIconContent,\n      suffixIconContent,\n      showExtraText,\n      showContent,\n      isShow,\n      handleClick,\n      listDOM,\n      itemDOM,\n      animateStyle,\n      handleScrolling,\n      handleTransitionend,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}