{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport { CheckIcon } from 'tdesign-icons-vue-next';\nimport { defineComponent, toRefs, inject, computed, ref, onBeforeMount, reactive, watch, nextTick, h, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, renderSlot, Fragment, createBlock, withCtx, renderList, createCommentVNode, createVNode, createTextVNode } from 'vue';\nimport _Radio from '../radio/index.js';\nimport config from '../config.js';\nimport _Button from '../button/index.js';\nimport CheckBox, { CheckboxGroup } from '../checkbox/index.js';\nimport _RadioGroup from '../radio-group/index.js';\nimport '../shared/index.js';\nimport DropdownItemProps from './dropdown-item-props.js';\nimport { useEmitEvent } from '../shared/useEmitEvent/index.js';\nimport { useVModel } from '../shared/useVModel/index.js';\nimport '../radio/radio.js';\nimport '../shared/constants.js';\nimport '../radio/props.js';\nimport '../shared/render-tnode.js';\nimport '../shared/functions.js';\nimport '../shared/render.js';\nimport '@babel/runtime/helpers/typeof';\nimport 'lodash/camelCase';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport './style/css.js';\nimport '../radio/type.js';\nimport '../button/button.js';\nimport '../button/props.js';\nimport '../button/type.js';\nimport '../checkbox/checkbox.js';\nimport '../checkbox/props.js';\nimport '../checkbox/group.js';\nimport '../checkbox/checkbox-group-props.js';\nimport '../checkbox/hooks/index.js';\nimport '../checkbox/hooks/getOptions.js';\nimport '../checkbox/hooks/setCheckAllStatus.js';\nimport 'lodash/intersection';\nimport '../checkbox/type.js';\nimport '../radio-group/radio-group.js';\nimport '../radio/radio-group-props.js';\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-dropdown-item\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    TRadio: _Radio,\n    TButton: _Button,\n    TCheckbox: CheckBox,\n    TRadioGroup: _RadioGroup,\n    TCheckboxGroup: CheckboxGroup\n  },\n  props: DropdownItemProps,\n  emits: [\"change\", \"open\", \"opened\", \"close\", \"closed\", \"update:value\", \"update:modelValue\"],\n  setup: function setup(props, context) {\n    var emitEvent = useEmitEvent(props, context.emit);\n    var _toRefs = toRefs(props),\n      value = _toRefs.value,\n      modelValue = _toRefs.modelValue;\n    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),\n      _useVModel2 = _slicedToArray(_useVModel, 2),\n      passInValue = _useVModel2[0],\n      setValue = _useVModel2[1];\n    var menuProps = inject(\"dropdownMenuProps\");\n    var menuState = inject(\"dropdownMenuState\");\n    var _inject = inject(\"dropdownMenuControl\"),\n      expandMenu = _inject.expandMenu,\n      collapseMenu = _inject.collapseMenu;\n    var menuAniControl = inject(\"dropdownAniControl\");\n    var classes = computed(function () {\n      return [\"\".concat(name), _defineProperty({}, \"\".concat(prefix, \"-is-expanded\"), state.isExpanded)];\n    });\n    var itemId = ref(0);\n    onBeforeMount(function () {\n      itemId.value = menuState.childCount;\n      menuState.childCount += 1;\n    });\n    var state = reactive({\n      showOverlay: computed(function () {\n        return menuProps.overlay;\n      }),\n      isShowItems: false,\n      isExpanded: false,\n      expandStyle: {},\n      transitionStyle: computed(function () {\n        return {\n          transition: \"transform \".concat(menuProps.duration, \"ms ease\"),\n          \"-webkit-transition\": \"transform \".concat(menuProps.duration, \"ms ease\")\n        };\n      }),\n      multiple: computed(function () {\n        return props.multiple;\n      }),\n      optionsLayout: computed(function () {\n        return props.optionsLayout;\n      }),\n      options: computed(function () {\n        return props.options;\n      })\n    });\n    var isCheckedRadio = function isCheckedRadio(value2) {\n      return value2 === radioSelect.value;\n    };\n    var styleDropRadio = function styleDropRadio(value2) {\n      var _ref2;\n      return [\"\".concat(name, \"__radio\"), (_ref2 = {}, _defineProperty(_ref2, \"\".concat(prefix, \"-is-tick\"), !props.multiple), _defineProperty(_ref2, \"\".concat(prefix, \"-is-checked\"), isCheckedRadio(value2)), _ref2)];\n    };\n    var styleContent = computed(function () {\n      var _props$optionsColumns, _ref3;\n      var optionsLayout = props.optionsLayout;\n      var layoutCol = +((_props$optionsColumns = props.optionsColumns) !== null && _props$optionsColumns !== void 0 ? _props$optionsColumns : 0);\n      var isTree = optionsLayout === \"tree\";\n      var treeCol = isTree ? treeState.leafLevel + 1 : 0;\n      return [\"\".concat(name, \"__content\"), (_ref3 = {}, _defineProperty(_ref3, \"\".concat(prefix, \"-is-tree\"), isTree), _defineProperty(_ref3, \"\".concat(prefix, \"-is-single\"), !isTree && !props.multiple), _defineProperty(_ref3, \"\".concat(prefix, \"-is-multi\"), !isTree && props.multiple), _defineProperty(_ref3, \"\".concat(prefix, \"-is-col1\"), layoutCol === 1 || treeCol === 1), _defineProperty(_ref3, \"\".concat(prefix, \"-is-col2\"), layoutCol === 2 || treeCol === 2), _defineProperty(_ref3, \"\".concat(prefix, \"-is-col3\"), layoutCol === 3 || treeCol === 3), _ref3)];\n    });\n    var setExpand = function setExpand(val) {\n      var bottom = menuState.barRect.bottom;\n      state.expandStyle = {\n        zIndex: menuProps.zIndex,\n        top: \"\".concat(bottom, \"px\")\n      };\n      var duration = menuProps.duration;\n      menuAniControl.setTo(+(duration !== null && duration !== void 0 ? duration : 200), function () {\n        emitEvent(val ? \"open\" : \"close\");\n        if (val) {\n          state.isShowItems = val;\n        }\n        state.isExpanded = !val;\n      }, function () {\n        state.isExpanded = val;\n      }, function () {\n        if (!val) {\n          state.isShowItems = val;\n        }\n        emitEvent(val ? \"opened\" : \"closed\");\n      });\n    };\n    watch(function () {\n      return menuState.activeId === itemId.value;\n    }, function (val) {\n      return setExpand(val);\n    });\n    var radioSelect = ref();\n    var checkSelect = ref([]);\n    var treeState = reactive({\n      leafLevel: 0,\n      selectList: []\n    });\n    var styleTreeRadio = computed(function () {\n      return function (value2, level) {\n        var _ref4;\n        return [\"\".concat(name, \"__radio\"), (_ref4 = {}, _defineProperty(_ref4, \"\".concat(prefix, \"-is-tick\"), level === treeState.leafLevel), _defineProperty(_ref4, \"\".concat(prefix, \"-is-checked\"), value2 === treeState.selectList[level]), _ref4)];\n      };\n    });\n    var selectTreeNode = function selectTreeNode(level, value2) {\n      var rebuildTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var tempValue = treeState.selectList.slice(0, level);\n      tempValue[level] = value2;\n      treeState.selectList = tempValue;\n      if (rebuildTree) {\n        buildTreeOptions();\n      }\n    };\n    var treeOptions = ref([]);\n    var buildTreeOptions = function buildTreeOptions() {\n      var options = props.options;\n      var selectList = treeState.selectList;\n      var newTreeOptions = [];\n      var level = -1;\n      var node = {\n        title: \"\",\n        value: \"\",\n        disabled: false,\n        options: options\n      };\n      var _loop = function _loop() {\n        var list = node.options;\n        newTreeOptions.push(_toConsumableArray(list));\n        level += 1;\n        var thisValue = selectList[level];\n        if (thisValue === void 0) {\n          var firstChild = list[0];\n          if (firstChild.options) {\n            selectTreeNode(level, firstChild.value, false);\n            node = firstChild;\n          } else {\n            selectTreeNode(level, props.multiple ? [] : void 0, false);\n            return \"break\";\n          }\n        } else if (!Array.isArray(thisValue)) {\n          var child = list.find(function (child2) {\n            return child2.value === thisValue;\n          });\n          node = child;\n        } else {\n          node = void 0;\n        }\n      };\n      while ((_node = node) !== null && _node !== void 0 && _node.options) {\n        var _node;\n        var _ret = _loop();\n        if (_ret === \"break\") break;\n      }\n      treeState.leafLevel = Math.max(0, level);\n      treeOptions.value = newTreeOptions;\n    };\n    if (props.optionsLayout === \"tree\") {\n      watch(function () {\n        return JSON.stringify({\n          options: props.options\n        });\n      }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return nextTick();\n              case 2:\n                buildTreeOptions();\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })));\n      buildTreeOptions();\n    }\n    var updateSelectValue = function updateSelectValue(val) {\n      var layout = props.optionsLayout;\n      if (layout === \"tree\") {\n        treeState.selectList = val !== null && val !== void 0 ? val : [];\n        buildTreeOptions();\n      } else if (layout === \"columns\") {\n        if (!props.multiple) {\n          var _ref6;\n          var list = props.options;\n          var firstChild = list === null || list === void 0 ? void 0 : list[0];\n          var newValue = (_ref6 = val !== null && val !== void 0 ? val : firstChild === null || firstChild === void 0 ? void 0 : firstChild.value) !== null && _ref6 !== void 0 ? _ref6 : null;\n          radioSelect.value = newValue;\n        } else if (props.multiple) {\n          if (props.optionsLayout === \"columns\") {\n            checkSelect.value = val !== null && val !== void 0 ? val : [];\n          }\n        }\n      }\n    };\n    updateSelectValue(passInValue.value || null);\n    watch(function () {\n      return passInValue.value;\n    }, function (val) {\n      if (!val) return;\n      updateSelectValue(val);\n    });\n    var isBtnDisabled = computed(function () {\n      switch (props.optionsLayout) {\n        case \"columns\":\n          return checkSelect.value.length <= 0;\n        case \"tree\":\n          if (!props.multiple) {\n            return treeState.selectList[treeState.leafLevel] === void 0;\n          }\n          if (props.multiple) {\n            var selectList = treeState.selectList[treeState.leafLevel];\n            return selectList && selectList.length <= 0;\n          }\n      }\n      return true;\n    });\n    var resetSelect = function resetSelect() {\n      switch (props.optionsLayout) {\n        case \"columns\":\n          checkSelect.value = [];\n          break;\n        case \"tree\":\n          treeState.selectList = [];\n          break;\n      }\n    };\n    var confirmSelect = function confirmSelect() {\n      var values;\n      switch (props.optionsLayout) {\n        case \"columns\":\n          values = checkSelect.value;\n          break;\n        case \"tree\":\n          values = treeState.selectList;\n          break;\n      }\n      values = JSON.parse(JSON.stringify(values));\n      setValue(values);\n      collapseMenu();\n    };\n    watch(radioSelect, function (val) {\n      if (props.multiple || props.optionsLayout === \"tree\") return;\n      if (!state.isShowItems) return;\n      var value2 = passInValue.value || [];\n      if (value2[0] === val) return;\n      if (val) {\n        setValue(val);\n      }\n      collapseMenu();\n    });\n    var onClickOverlay = function onClickOverlay() {\n      if (menuProps.closeOnClickOverlay) {\n        collapseMenu();\n      }\n    };\n    var TiconCheckIcon = h(CheckIcon);\n    var convertTreeRadioType = function convertTreeRadioType(value2) {\n      return value2;\n    };\n    var convertTreeCheckType = function convertTreeCheckType(value2) {\n      return value2;\n    };\n    return _objectSpread$1(_objectSpread$1(_objectSpread$1({\n      name: ref(name)\n    }, toRefs(props)), toRefs(state)), {}, {\n      classes: classes,\n      styleContent: styleContent,\n      isBtnDisabled: isBtnDisabled,\n      radioSelect: radioSelect,\n      checkSelect: checkSelect,\n      treeOptions: treeOptions,\n      treeState: treeState,\n      styleTreeRadio: styleTreeRadio,\n      isCheckedRadio: isCheckedRadio,\n      selectTreeNode: selectTreeNode,\n      styleDropRadio: styleDropRadio,\n      expandMenu: expandMenu,\n      collapseMenu: collapseMenu,\n      resetSelect: resetSelect,\n      confirmSelect: confirmSelect,\n      onClickOverlay: onClickOverlay,\n      renderCheckIcon: [TiconCheckIcon],\n      convertTreeRadioType: convertTreeRadioType,\n      convertTreeCheckType: convertTreeCheckType\n    });\n  }\n});\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_t_radio = resolveComponent(\"t-radio\");\n  var _component_t_radio_group = resolveComponent(\"t-radio-group\");\n  var _component_t_checkbox = resolveComponent(\"t-checkbox\");\n  var _component_t_checkbox_group = resolveComponent(\"t-checkbox-group\");\n  var _component_t_button = resolveComponent(\"t-button\");\n  return _ctx.isShowItems ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.classes),\n    style: normalizeStyle(_objectSpread({}, _ctx.expandStyle))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.styleContent),\n    style: normalizeStyle(_objectSpread({}, _ctx.transitionStyle))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__bd\"))\n  }, [renderSlot(_ctx.$slots, \"default\", {}, function () {\n    return [_ctx.optionsLayout === \"columns\" ? (openBlock(), createElementBlock(Fragment, {\n      key: 0\n    }, [!_ctx.multiple ? (openBlock(), createBlock(_component_t_radio_group, {\n      key: 0,\n      modelValue: _ctx.radioSelect,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n        return _ctx.radioSelect = $event;\n      })\n    }, {\n      default: withCtx(function () {\n        return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.options, function (option) {\n          return openBlock(), createBlock(_component_t_radio, {\n            key: option.value,\n            value: option.value,\n            label: option.title,\n            disabled: option.disabled,\n            class: normalizeClass(_ctx.styleDropRadio(option.value)),\n            align: \"right\",\n            checked: _ctx.isCheckedRadio(option.value),\n            icon: _ctx.renderCheckIcon\n          }, null, 8, [\"value\", \"label\", \"disabled\", \"class\", \"checked\", \"icon\"]);\n        }), 128))];\n      }),\n      _: 1\n    }, 8, [\"modelValue\"])) : (openBlock(), createBlock(_component_t_checkbox_group, {\n      key: 1,\n      modelValue: _ctx.checkSelect,\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n        return _ctx.checkSelect = $event;\n      })\n    }, {\n      default: withCtx(function () {\n        return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.options, function (option) {\n          return openBlock(), createBlock(_component_t_checkbox, {\n            key: option.value,\n            borderless: \"\",\n            value: option.value,\n            label: option.title,\n            disabled: option.disabled\n          }, null, 8, [\"value\", \"label\", \"disabled\"]);\n        }), 128))];\n      }),\n      _: 1\n    }, 8, [\"modelValue\"]))], 64)) : _ctx.optionsLayout === \"tree\" ? (openBlock(true), createElementBlock(Fragment, {\n      key: 1\n    }, renderList(_ctx.treeOptions, function (_, level) {\n      return openBlock(), createElementBlock(\"div\", {\n        key: level,\n        class: normalizeClass(\"\".concat(_ctx.name, \"__tree-group\"))\n      }, [level < _ctx.treeState.leafLevel ? (openBlock(), createBlock(_component_t_radio_group, {\n        key: 0,\n        \"model-value\": _ctx.convertTreeRadioType(_ctx.treeState.selectList[level]),\n        \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n          return _ctx.selectTreeNode(level, $event);\n        }\n      }, {\n        default: withCtx(function () {\n          return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.treeOptions[level], function (option) {\n            return openBlock(), createBlock(_component_t_radio, {\n              key: option.value,\n              class: normalizeClass(_ctx.styleTreeRadio(option.value, level)),\n              value: option.value,\n              label: option.title,\n              disabled: option.disabled,\n              align: \"right\",\n              icon: [],\n              borderless: \"\"\n            }, null, 8, [\"class\", \"value\", \"label\", \"disabled\"]);\n          }), 128))];\n        }),\n        _: 2\n      }, 1032, [\"model-value\", \"onUpdate:modelValue\"])) : (openBlock(), createElementBlock(Fragment, {\n        key: 1\n      }, [!_ctx.multiple ? (openBlock(), createBlock(_component_t_radio_group, {\n        key: 0,\n        value: _ctx.convertTreeRadioType(_ctx.treeState.selectList[level]),\n        \"onUpdate:value\": function onUpdateValue($event) {\n          return _ctx.selectTreeNode(level, $event);\n        }\n      }, {\n        default: withCtx(function () {\n          return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.treeOptions[level], function (option) {\n            return openBlock(), createBlock(_component_t_radio, {\n              key: option.value,\n              value: option.value,\n              label: option.title,\n              disabled: option.disabled,\n              class: normalizeClass(_ctx.styleTreeRadio(option.value, level)),\n              align: \"right\",\n              borderless: \"\"\n            }, null, 8, [\"value\", \"label\", \"disabled\", \"class\"]);\n          }), 128))];\n        }),\n        _: 2\n      }, 1032, [\"value\", \"onUpdate:value\"])) : (openBlock(), createBlock(_component_t_checkbox_group, {\n        key: 1,\n        value: _ctx.convertTreeCheckType(_ctx.treeState.selectList[level]),\n        \"onUpdate:value\": function onUpdateValue($event) {\n          return _ctx.selectTreeNode(level, $event);\n        }\n      }, {\n        default: withCtx(function () {\n          return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.treeOptions[level], function (option) {\n            return openBlock(), createBlock(_component_t_checkbox, {\n              key: option.value,\n              value: option.value,\n              label: option.title,\n              disabled: option.disabled,\n              align: \"right\",\n              borderless: \"\"\n            }, null, 8, [\"value\", \"label\", \"disabled\"]);\n          }), 128))];\n        }),\n        _: 2\n      }, 1032, [\"value\", \"onUpdate:value\"]))], 64))], 2);\n    }), 128)) : createCommentVNode(\"\", true)];\n  })], 2), _ctx.multiple || _ctx.optionsLayout === \"tree\" ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(\"\".concat(_ctx.name, \"__ft\"))\n  }, [createVNode(_component_t_button, {\n    variant: \"outline\",\n    disabled: _ctx.isBtnDisabled,\n    onClick: _ctx.resetSelect\n  }, {\n    default: withCtx(function () {\n      return [createTextVNode(\"\\u91CD\\u7F6E\")];\n    }),\n    _: 1\n  }, 8, [\"disabled\", \"onClick\"]), createVNode(_component_t_button, {\n    theme: \"primary\",\n    disabled: _ctx.isBtnDisabled,\n    onClick: _ctx.confirmSelect\n  }, {\n    default: withCtx(function () {\n      return [createTextVNode(\"\\u786E\\u5B9A\")];\n    }),\n    _: 1\n  }, 8, [\"disabled\", \"onClick\"])], 2)) : createCommentVNode(\"\", true)], 6)], 6)) : createCommentVNode(\"\", true);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":"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","names":["prefix","config","name","defineComponent","components","TRadio","TButton","TCheckbox","TRadioGroup","TCheckboxGroup","props","emits","setup","context","emitEvent","emit","toRefs","value","modelValue","useVModel","defaultValue","onChange","_useVModel2","passInValue","setValue","inject","expandMenu","collapseMenu","computed","state","ref","onBeforeMount","itemId","menuState","childCount","reactive","showOverlay","menuProps","overlay","isShowItems","isExpanded","expandStyle","transitionStyle","transition","multiple","optionsLayout","options","isCheckedRadio","radioSelect","styleDropRadio","optionsColumns","isTree","treeCol","treeState","setExpand","val","bottom","zIndex","top","duration","menuAniControl","watch","leafLevel","selectList","styleTreeRadio","level","selectTreeNode","rebuildTree","tempValue","buildTreeOptions","newTreeOptions","node","title","disabled","list","push","thisValue","firstChild","Array","child","_ret","max","treeOptions","JSON","stringify","_context","nextTick","updateSelectValue","layout","checkSelect","length","resetSelect","confirmSelect","values","onClickOverlay","closeOnClickOverlay","h","CheckIcon","convertTreeRadioType","convertTreeCheckType","classes","styleContent","isBtnDisabled","renderCheckIcon","TiconCheckIcon","_ctx","_createElementBlock","class","style","_createElementVNode","_renderSlot","_Fragment","key","_createBlock","_component_t_radio_group","option","_component_t_radio","label","_normalizeClass","align","checked","icon","_component_t_checkbox_group","_component_t_checkbox","borderless","$event","_openBlock","_createVNode","_component_t_button","variant","onClick","theme"],"sources":["../../src/dropdown-menu/dropdown-item.vue","../../src/dropdown-menu/dropdown-item.vue?vue&type=template&id=e0d03006&lang.js"],"sourcesContent":["<template>\n  <div v-if=\"isShowItems\" :class=\"classes\" :style=\"{ ...expandStyle }\">\n    <!-- <t-overlay v-if=\"isShowItems && showOverlay\" @click=\"onClickOverlay\" /> -->\n    <div :class=\"styleContent\" :style=\"{ ...transitionStyle }\">\n      <div :class=\"`${name}__bd`\">\n        <slot>\n          <template v-if=\"optionsLayout === 'columns'\">\n            <template v-if=\"!multiple\">\n              <!-- 单选列表 -->\n              <t-radio-group v-model=\"radioSelect\">\n                <template v-for=\"option in options\" :key=\"option.value\">\n                  <t-radio\n                    :value=\"option.value\"\n                    :label=\"option.title\"\n                    :disabled=\"option.disabled\"\n                    :class=\"styleDropRadio(option.value)\"\n                    align=\"right\"\n                    :checked=\"isCheckedRadio(option.value)\"\n                    :icon=\"renderCheckIcon\"\n                  />\n                </template>\n              </t-radio-group>\n            </template>\n            <template v-else>\n              <!-- 多选列表 -->\n              <t-checkbox-group v-model=\"checkSelect\">\n                <template v-for=\"option in options\" :key=\"option.value\">\n                  <t-checkbox borderless :value=\"option.value\" :label=\"option.title\" :disabled=\"option.disabled\" />\n                </template>\n              </t-checkbox-group>\n            </template>\n          </template>\n          <template v-else-if=\"optionsLayout === 'tree'\">\n            <!-- 树形列表 ST -->\n            <div v-for=\"(_, level) in treeOptions\" :key=\"level\" :class=\"`${name}__tree-group`\">\n              <t-radio-group\n                v-if=\"level < treeState.leafLevel\"\n                :model-value=\"convertTreeRadioType(treeState.selectList[level])\"\n                @update:model-value=\"selectTreeNode(level, $event)\"\n              >\n                <!-- 树形列表 - 父级节点 ST -->\n                <template v-for=\"option in treeOptions[level]\" :key=\"option.value\">\n                  <t-radio\n                    :class=\"styleTreeRadio(option.value, level)\"\n                    :value=\"option.value\"\n                    :label=\"option.title\"\n                    :disabled=\"option.disabled\"\n                    align=\"right\"\n                    :icon=\"[]\"\n                    borderless\n                  />\n                </template>\n                <!-- 树形列表 - 父级节点 ED -->\n              </t-radio-group>\n              <template v-else>\n                <!-- 树形列表 - 叶子节点 ST -->\n                <template v-if=\"!multiple\">\n                  <!-- 树形列表 - 叶子节点（单选） ST -->\n                  <t-radio-group\n                    :value=\"convertTreeRadioType(treeState.selectList[level])\"\n                    @update:value=\"selectTreeNode(level, $event)\"\n                  >\n                    <template v-for=\"option in treeOptions[level]\" :key=\"option.value\">\n                      <t-radio\n                        :value=\"option.value\"\n                        :label=\"option.title\"\n                        :disabled=\"option.disabled\"\n                        :class=\"styleTreeRadio(option.value, level)\"\n                        align=\"right\"\n                        borderless\n                      />\n                    </template>\n                  </t-radio-group>\n                  <!-- 树形列表 - 叶子节点（单选） ED -->\n                </template>\n                <template v-else>\n                  <!-- 树形列表 - 叶子节点（多选） ST -->\n                  <t-checkbox-group\n                    :value=\"convertTreeCheckType(treeState.selectList[level])\"\n                    @update:value=\"selectTreeNode(level, $event)\"\n                  >\n                    <template v-for=\"option in treeOptions[level]\" :key=\"option.value\">\n                      <t-checkbox\n                        :value=\"option.value\"\n                        :label=\"option.title\"\n                        :disabled=\"option.disabled\"\n                        align=\"right\"\n                        borderless\n                      ></t-checkbox>\n                    </template>\n                  </t-checkbox-group>\n                  <!-- 树形列表 - 叶子节点（多选） ED -->\n                </template>\n                <!-- 树形列表 - 叶子节点 ED -->\n              </template>\n            </div>\n            <!-- 树形列表 ED -->\n          </template>\n        </slot>\n      </div>\n      <div v-if=\"multiple || optionsLayout === 'tree'\" :class=\"`${name}__ft`\">\n        <t-button variant=\"outline\" :disabled=\"isBtnDisabled\" @click=\"resetSelect\">重置</t-button>\n        <t-button theme=\"primary\" :disabled=\"isBtnDisabled\" @click=\"confirmSelect\">确定</t-button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { CheckIcon } from 'tdesign-icons-vue-next';\nimport {\n  h,\n  ref,\n  watch,\n  toRefs,\n  inject,\n  computed,\n  reactive,\n  nextTick,\n  SetupContext,\n  onBeforeMount,\n  defineComponent,\n} from 'vue';\nimport { TNode } from '../common';\nimport TRadio from '../radio';\nimport config from '../config';\nimport TButton from '../button';\nimport TCheckbox, { CheckboxGroup as TCheckboxGroup } from '../checkbox';\nimport TRadioGroup from '../radio-group';\nimport TransAniControl from './trans-ani-control';\nimport { useVModel, useEmitEvent } from '../shared';\nimport DropdownItemProps from './dropdown-item-props';\nimport { DropdownMenuState, DropdownMenuControl } from './context';\nimport { TdDropdownMenuProps, TdDropdownItemProps, TdDropdownItemOption, TdDropdownItemOptionValueType } from './type';\n\nconst { prefix } = config;\nconst name = `${prefix}-dropdown-item`;\n\ninterface TdDropdownTreeState {\n  /**\n   * 叶子层级\n   */\n  leafLevel: number;\n  /**\n   * 树的各级选项\n   */\n  selectList: TdDropdownTreeValueType[];\n}\n\n/**\n * 树选中项目（单选/多选）\n */\ntype TdDropdownTreeValueType = TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined;\n\nexport default defineComponent({\n  name,\n  components: { TRadio, TButton, TCheckbox, TRadioGroup, TCheckboxGroup },\n  props: DropdownItemProps,\n  emits: ['change', 'open', 'opened', 'close', 'closed', 'update:value', 'update:modelValue'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    // 受控 value 属性\n    const { value, modelValue } = toRefs(props);\n    const [passInValue, setValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n    // 从父组件取属性、状态和控制函数\n    const menuProps = inject('dropdownMenuProps') as TdDropdownMenuProps;\n    const menuState = inject('dropdownMenuState') as DropdownMenuState;\n    const { expandMenu, collapseMenu } = inject('dropdownMenuControl') as DropdownMenuControl;\n    const menuAniControl = inject('dropdownAniControl') as TransAniControl;\n\n    // 组件样式\n    const classes = computed(() => [\n      `${name}`,\n      {\n        [`${prefix}-is-expanded`]: state.isExpanded,\n      },\n    ]);\n\n    const itemId = ref(0);\n    onBeforeMount(() => {\n      itemId.value = menuState.childCount;\n      menuState.childCount += 1;\n    });\n\n    const state = reactive({\n      showOverlay: computed(() => menuProps.overlay),\n      isShowItems: false,\n      isExpanded: false,\n      expandStyle: {},\n      transitionStyle: computed(() => ({\n        transition: `transform ${menuProps.duration}ms ease`,\n        '-webkit-transition': `transform ${menuProps.duration}ms ease`,\n      })),\n      multiple: computed(() => props.multiple),\n      optionsLayout: computed(() => props.optionsLayout),\n      options: computed(() => props.options),\n    });\n    const isCheckedRadio = (value: TdDropdownItemOptionValueType) => value === radioSelect.value;\n    const styleDropRadio = (value: TdDropdownItemOptionValueType) => [\n      `${name}__radio`,\n      {\n        [`${prefix}-is-tick`]: !props.multiple,\n        [`${prefix}-is-checked`]: isCheckedRadio(value),\n      },\n    ];\n    const styleContent = computed(() => {\n      const { optionsLayout } = props;\n      const layoutCol = +(props.optionsColumns ?? 0);\n      const isTree = optionsLayout === 'tree';\n      const treeCol = isTree ? treeState.leafLevel + 1 : 0;\n      return [\n        `${name}__content`,\n        {\n          [`${prefix}-is-tree`]: isTree,\n          [`${prefix}-is-single`]: !isTree && !props.multiple,\n          [`${prefix}-is-multi`]: !isTree && props.multiple,\n          [`${prefix}-is-col1`]: layoutCol === 1 || treeCol === 1,\n          [`${prefix}-is-col2`]: layoutCol === 2 || treeCol === 2,\n          [`${prefix}-is-col3`]: layoutCol === 3 || treeCol === 3,\n        },\n      ];\n    });\n    // 设置展开/收起状态\n    const setExpand = (val: boolean) => {\n      // 菜单定位\n      const { bottom } = menuState.barRect;\n      state.expandStyle = {\n        zIndex: menuProps.zIndex,\n        top: `${bottom}px`,\n      };\n      // console.log(`dropdown-item(${itemId.value}) changing state: `, val);\n      const { duration } = menuProps;\n      // 动画状态控制\n      menuAniControl.setTo(\n        +(duration ?? 200),\n        () => {\n          // Now do:\n          emitEvent(val ? 'open' : 'close');\n          if (val) {\n            state.isShowItems = val;\n          }\n          state.isExpanded = !val;\n        },\n        () => {\n          // Next tick do:\n          state.isExpanded = val;\n        },\n        () => {\n          // Finally do:\n          if (!val) {\n            state.isShowItems = val;\n          }\n          emitEvent(val ? 'opened' : 'closed');\n        },\n      );\n    };\n\n    // 根据父组件状态，判断当前是否展开\n    watch(\n      () => menuState.activeId === itemId.value,\n      (val: boolean) => setExpand(val),\n    );\n\n    const radioSelect = ref<TdDropdownItemOptionValueType | undefined>();\n    const checkSelect = ref<TdDropdownItemOptionValueType[]>([]);\n    const treeState = reactive<TdDropdownTreeState>({\n      leafLevel: 0,\n      selectList: [],\n    });\n    const styleTreeRadio = computed(() => (value: string, level: number) => [\n      `${name}__radio`,\n      {\n        [`${prefix}-is-tick`]: level === treeState.leafLevel,\n        [`${prefix}-is-checked`]: value === treeState.selectList[level],\n      },\n    ]);\n    // 点击树形节点的时候\n    const selectTreeNode = (level: number, value: TdDropdownTreeValueType, rebuildTree = true) => {\n      // console.log('level:', level, 'value:', value);\n      // 当前节点\n      const tempValue: TdDropdownTreeValueType[] = treeState.selectList.slice(0, level);\n      tempValue[level] = value;\n      treeState.selectList = tempValue;\n      if (rebuildTree) {\n        buildTreeOptions();\n      }\n    };\n    // 处理后的树形选项列表\n    const treeOptions = ref<TdDropdownItemOption[]>([]);\n    const buildTreeOptions = () => {\n      const { options } = props;\n      const { selectList } = treeState;\n      const newTreeOptions = [];\n      let level = -1;\n      let node: TdDropdownItemOption | undefined = {\n        title: '',\n        value: '',\n        disabled: false,\n        options,\n      };\n      while (node?.options) {\n        // 当前层级节点的列表\n        const list: TdDropdownItemOption[] = node.options;\n        newTreeOptions.push([...list]);\n        level += 1;\n        // 当前层级列表选中项\n        const thisValue: TdDropdownTreeValueType | undefined = selectList[level];\n        if (thisValue === undefined) {\n          const firstChild = list[0];\n          if (firstChild.options) {\n            // 还有子节点，当前层级作为单选处理\n            selectTreeNode(level, firstChild.value, false);\n            node = firstChild;\n          } else {\n            // 没有子节点，结束处理\n            selectTreeNode(level, props.multiple ? [] : undefined, false);\n            break;\n          }\n        } else if (!Array.isArray(thisValue)) {\n          const child: TdDropdownItemOption | undefined = list.find(\n            (child: TdDropdownItemOption) => child.value === thisValue,\n          );\n          node = child;\n        } else {\n          node = undefined;\n        }\n      }\n      treeState.leafLevel = Math.max(0, level);\n      treeOptions.value = newTreeOptions as [];\n    };\n    if (props.optionsLayout === 'tree') {\n      watch(\n        () =>\n          JSON.stringify({\n            options: props.options,\n          }),\n        async () => {\n          // fix: 这次微任务结束后，再重建选项。否则 oldVal 无法更新，导致无限调用\n          await nextTick();\n          buildTreeOptions();\n        },\n      );\n      buildTreeOptions();\n    }\n    // 根据传入值更新当前选中\n    const updateSelectValue = (\n      val: TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | TdDropdownTreeValueType[] | null,\n    ) => {\n      const layout = props.optionsLayout;\n      if (layout === 'tree') {\n        treeState.selectList = (val ?? []) as TdDropdownTreeValueType[];\n        buildTreeOptions();\n      } else if (layout === 'columns') {\n        if (!props.multiple) {\n          const list = props.options as TdDropdownItemOption[];\n          const firstChild = list?.[0];\n          const newValue = val ?? firstChild?.value ?? null;\n          radioSelect.value = newValue as TdDropdownItemOptionValueType;\n        } else if (props.multiple) {\n          if (props.optionsLayout === 'columns') {\n            checkSelect.value = (val ?? []) as TdDropdownItemOptionValueType[];\n          }\n        }\n      }\n    };\n    // 初始值更新一次选中项\n    updateSelectValue(passInValue.value || null);\n    // 跟踪 modelValue 更新选项\n    watch(\n      () => passInValue.value,\n      (val) => {\n        if (!val) return;\n        updateSelectValue(val);\n      },\n    );\n    // 底部按键是否可用\n    const isBtnDisabled = computed(() => {\n      switch (props.optionsLayout) {\n        case 'columns':\n          return checkSelect.value.length <= 0;\n        case 'tree':\n          if (!props.multiple) {\n            return treeState.selectList[treeState.leafLevel] === undefined;\n          }\n          if (props.multiple) {\n            const selectList = treeState.selectList[treeState.leafLevel] as [];\n            return selectList && selectList.length <= 0;\n          }\n      }\n      return true;\n    });\n    // 重置\n    const resetSelect = () => {\n      switch (props.optionsLayout) {\n        case 'columns':\n          checkSelect.value = [];\n          break;\n        case 'tree':\n          treeState.selectList = [];\n          break;\n      }\n    };\n    // 确认\n    const confirmSelect = () => {\n      let values;\n      switch (props.optionsLayout) {\n        case 'columns':\n          values = checkSelect.value;\n          break;\n        case 'tree':\n          values = treeState.selectList;\n          break;\n      }\n      values = JSON.parse(JSON.stringify(values));\n      setValue(values);\n      collapseMenu();\n    };\n    // 单选值监控\n    watch(radioSelect, (val) => {\n      if (props.multiple || props.optionsLayout === 'tree') return;\n      if (!state.isShowItems) return;\n      const value = passInValue.value || [];\n      if (value[0] === val) return;\n      if (val) {\n        setValue(val);\n      }\n      collapseMenu();\n    });\n    // 点击遮罩层\n    const onClickOverlay = () => {\n      if (menuProps.closeOnClickOverlay) {\n        collapseMenu();\n      }\n    };\n    // 创建小图标\n    const TiconCheckIcon = h(CheckIcon);\n    // 树形节点的类型转换\n    const convertTreeRadioType = (value: TdDropdownTreeValueType) => value as TdDropdownItemOptionValueType;\n    const convertTreeCheckType = (value: TdDropdownTreeValueType) => value as TdDropdownItemOptionValueType[];\n    return {\n      name: ref(name),\n      ...toRefs(props),\n      ...toRefs(state),\n      classes,\n      styleContent,\n      isBtnDisabled,\n      radioSelect,\n      checkSelect,\n      treeOptions,\n      treeState,\n      styleTreeRadio,\n      isCheckedRadio,\n      selectTreeNode,\n      styleDropRadio,\n      expandMenu,\n      collapseMenu,\n      resetSelect,\n      confirmSelect,\n      onClickOverlay,\n      renderCheckIcon: [TiconCheckIcon as unknown as TNode],\n      convertTreeRadioType,\n      convertTreeCheckType,\n    };\n  },\n});\n</script>\n","<template>\n  <div v-if=\"isShowItems\" :class=\"classes\" :style=\"{ ...expandStyle }\">\n    <!-- <t-overlay v-if=\"isShowItems && showOverlay\" @click=\"onClickOverlay\" /> -->\n    <div :class=\"styleContent\" :style=\"{ ...transitionStyle }\">\n      <div :class=\"`${name}__bd`\">\n        <slot>\n          <template v-if=\"optionsLayout === 'columns'\">\n            <template v-if=\"!multiple\">\n              <!-- 单选列表 -->\n              <t-radio-group v-model=\"radioSelect\">\n                <template v-for=\"option in options\" :key=\"option.value\">\n                  <t-radio\n                    :value=\"option.value\"\n                    :label=\"option.title\"\n                    :disabled=\"option.disabled\"\n                    :class=\"styleDropRadio(option.value)\"\n                    align=\"right\"\n                    :checked=\"isCheckedRadio(option.value)\"\n                    :icon=\"renderCheckIcon\"\n                  />\n                </template>\n              </t-radio-group>\n            </template>\n            <template v-else>\n              <!-- 多选列表 -->\n              <t-checkbox-group v-model=\"checkSelect\">\n                <template v-for=\"option in options\" :key=\"option.value\">\n                  <t-checkbox borderless :value=\"option.value\" :label=\"option.title\" :disabled=\"option.disabled\" />\n                </template>\n              </t-checkbox-group>\n            </template>\n          </template>\n          <template v-else-if=\"optionsLayout === 'tree'\">\n            <!-- 树形列表 ST -->\n            <div v-for=\"(_, level) in treeOptions\" :key=\"level\" :class=\"`${name}__tree-group`\">\n              <t-radio-group\n                v-if=\"level < treeState.leafLevel\"\n                :model-value=\"convertTreeRadioType(treeState.selectList[level])\"\n                @update:model-value=\"selectTreeNode(level, $event)\"\n              >\n                <!-- 树形列表 - 父级节点 ST -->\n                <template v-for=\"option in treeOptions[level]\" :key=\"option.value\">\n                  <t-radio\n                    :class=\"styleTreeRadio(option.value, level)\"\n                    :value=\"option.value\"\n                    :label=\"option.title\"\n                    :disabled=\"option.disabled\"\n                    align=\"right\"\n                    :icon=\"[]\"\n                    borderless\n                  />\n                </template>\n                <!-- 树形列表 - 父级节点 ED -->\n              </t-radio-group>\n              <template v-else>\n                <!-- 树形列表 - 叶子节点 ST -->\n                <template v-if=\"!multiple\">\n                  <!-- 树形列表 - 叶子节点（单选） ST -->\n                  <t-radio-group\n                    :value=\"convertTreeRadioType(treeState.selectList[level])\"\n                    @update:value=\"selectTreeNode(level, $event)\"\n                  >\n                    <template v-for=\"option in treeOptions[level]\" :key=\"option.value\">\n                      <t-radio\n                        :value=\"option.value\"\n                        :label=\"option.title\"\n                        :disabled=\"option.disabled\"\n                        :class=\"styleTreeRadio(option.value, level)\"\n                        align=\"right\"\n                        borderless\n                      />\n                    </template>\n                  </t-radio-group>\n                  <!-- 树形列表 - 叶子节点（单选） ED -->\n                </template>\n                <template v-else>\n                  <!-- 树形列表 - 叶子节点（多选） ST -->\n                  <t-checkbox-group\n                    :value=\"convertTreeCheckType(treeState.selectList[level])\"\n                    @update:value=\"selectTreeNode(level, $event)\"\n                  >\n                    <template v-for=\"option in treeOptions[level]\" :key=\"option.value\">\n                      <t-checkbox\n                        :value=\"option.value\"\n                        :label=\"option.title\"\n                        :disabled=\"option.disabled\"\n                        align=\"right\"\n                        borderless\n                      ></t-checkbox>\n                    </template>\n                  </t-checkbox-group>\n                  <!-- 树形列表 - 叶子节点（多选） ED -->\n                </template>\n                <!-- 树形列表 - 叶子节点 ED -->\n              </template>\n            </div>\n            <!-- 树形列表 ED -->\n          </template>\n        </slot>\n      </div>\n      <div v-if=\"multiple || optionsLayout === 'tree'\" :class=\"`${name}__ft`\">\n        <t-button variant=\"outline\" :disabled=\"isBtnDisabled\" @click=\"resetSelect\">重置</t-button>\n        <t-button theme=\"primary\" :disabled=\"isBtnDisabled\" @click=\"confirmSelect\">确定</t-button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { CheckIcon } from 'tdesign-icons-vue-next';\nimport {\n  h,\n  ref,\n  watch,\n  toRefs,\n  inject,\n  computed,\n  reactive,\n  nextTick,\n  SetupContext,\n  onBeforeMount,\n  defineComponent,\n} from 'vue';\nimport { TNode } from '../common';\nimport TRadio from '../radio';\nimport config from '../config';\nimport TButton from '../button';\nimport TCheckbox, { CheckboxGroup as TCheckboxGroup } from '../checkbox';\nimport TRadioGroup from '../radio-group';\nimport TransAniControl from './trans-ani-control';\nimport { useVModel, useEmitEvent } from '../shared';\nimport DropdownItemProps from './dropdown-item-props';\nimport { DropdownMenuState, DropdownMenuControl } from './context';\nimport { TdDropdownMenuProps, TdDropdownItemProps, TdDropdownItemOption, TdDropdownItemOptionValueType } from './type';\n\nconst { prefix } = config;\nconst name = `${prefix}-dropdown-item`;\n\ninterface TdDropdownTreeState {\n  /**\n   * 叶子层级\n   */\n  leafLevel: number;\n  /**\n   * 树的各级选项\n   */\n  selectList: TdDropdownTreeValueType[];\n}\n\n/**\n * 树选中项目（单选/多选）\n */\ntype TdDropdownTreeValueType = TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | undefined;\n\nexport default defineComponent({\n  name,\n  components: { TRadio, TButton, TCheckbox, TRadioGroup, TCheckboxGroup },\n  props: DropdownItemProps,\n  emits: ['change', 'open', 'opened', 'close', 'closed', 'update:value', 'update:modelValue'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    // 受控 value 属性\n    const { value, modelValue } = toRefs(props);\n    const [passInValue, setValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n    // 从父组件取属性、状态和控制函数\n    const menuProps = inject('dropdownMenuProps') as TdDropdownMenuProps;\n    const menuState = inject('dropdownMenuState') as DropdownMenuState;\n    const { expandMenu, collapseMenu } = inject('dropdownMenuControl') as DropdownMenuControl;\n    const menuAniControl = inject('dropdownAniControl') as TransAniControl;\n\n    // 组件样式\n    const classes = computed(() => [\n      `${name}`,\n      {\n        [`${prefix}-is-expanded`]: state.isExpanded,\n      },\n    ]);\n\n    const itemId = ref(0);\n    onBeforeMount(() => {\n      itemId.value = menuState.childCount;\n      menuState.childCount += 1;\n    });\n\n    const state = reactive({\n      showOverlay: computed(() => menuProps.overlay),\n      isShowItems: false,\n      isExpanded: false,\n      expandStyle: {},\n      transitionStyle: computed(() => ({\n        transition: `transform ${menuProps.duration}ms ease`,\n        '-webkit-transition': `transform ${menuProps.duration}ms ease`,\n      })),\n      multiple: computed(() => props.multiple),\n      optionsLayout: computed(() => props.optionsLayout),\n      options: computed(() => props.options),\n    });\n    const isCheckedRadio = (value: TdDropdownItemOptionValueType) => value === radioSelect.value;\n    const styleDropRadio = (value: TdDropdownItemOptionValueType) => [\n      `${name}__radio`,\n      {\n        [`${prefix}-is-tick`]: !props.multiple,\n        [`${prefix}-is-checked`]: isCheckedRadio(value),\n      },\n    ];\n    const styleContent = computed(() => {\n      const { optionsLayout } = props;\n      const layoutCol = +(props.optionsColumns ?? 0);\n      const isTree = optionsLayout === 'tree';\n      const treeCol = isTree ? treeState.leafLevel + 1 : 0;\n      return [\n        `${name}__content`,\n        {\n          [`${prefix}-is-tree`]: isTree,\n          [`${prefix}-is-single`]: !isTree && !props.multiple,\n          [`${prefix}-is-multi`]: !isTree && props.multiple,\n          [`${prefix}-is-col1`]: layoutCol === 1 || treeCol === 1,\n          [`${prefix}-is-col2`]: layoutCol === 2 || treeCol === 2,\n          [`${prefix}-is-col3`]: layoutCol === 3 || treeCol === 3,\n        },\n      ];\n    });\n    // 设置展开/收起状态\n    const setExpand = (val: boolean) => {\n      // 菜单定位\n      const { bottom } = menuState.barRect;\n      state.expandStyle = {\n        zIndex: menuProps.zIndex,\n        top: `${bottom}px`,\n      };\n      // console.log(`dropdown-item(${itemId.value}) changing state: `, val);\n      const { duration } = menuProps;\n      // 动画状态控制\n      menuAniControl.setTo(\n        +(duration ?? 200),\n        () => {\n          // Now do:\n          emitEvent(val ? 'open' : 'close');\n          if (val) {\n            state.isShowItems = val;\n          }\n          state.isExpanded = !val;\n        },\n        () => {\n          // Next tick do:\n          state.isExpanded = val;\n        },\n        () => {\n          // Finally do:\n          if (!val) {\n            state.isShowItems = val;\n          }\n          emitEvent(val ? 'opened' : 'closed');\n        },\n      );\n    };\n\n    // 根据父组件状态，判断当前是否展开\n    watch(\n      () => menuState.activeId === itemId.value,\n      (val: boolean) => setExpand(val),\n    );\n\n    const radioSelect = ref<TdDropdownItemOptionValueType | undefined>();\n    const checkSelect = ref<TdDropdownItemOptionValueType[]>([]);\n    const treeState = reactive<TdDropdownTreeState>({\n      leafLevel: 0,\n      selectList: [],\n    });\n    const styleTreeRadio = computed(() => (value: string, level: number) => [\n      `${name}__radio`,\n      {\n        [`${prefix}-is-tick`]: level === treeState.leafLevel,\n        [`${prefix}-is-checked`]: value === treeState.selectList[level],\n      },\n    ]);\n    // 点击树形节点的时候\n    const selectTreeNode = (level: number, value: TdDropdownTreeValueType, rebuildTree = true) => {\n      // console.log('level:', level, 'value:', value);\n      // 当前节点\n      const tempValue: TdDropdownTreeValueType[] = treeState.selectList.slice(0, level);\n      tempValue[level] = value;\n      treeState.selectList = tempValue;\n      if (rebuildTree) {\n        buildTreeOptions();\n      }\n    };\n    // 处理后的树形选项列表\n    const treeOptions = ref<TdDropdownItemOption[]>([]);\n    const buildTreeOptions = () => {\n      const { options } = props;\n      const { selectList } = treeState;\n      const newTreeOptions = [];\n      let level = -1;\n      let node: TdDropdownItemOption | undefined = {\n        title: '',\n        value: '',\n        disabled: false,\n        options,\n      };\n      while (node?.options) {\n        // 当前层级节点的列表\n        const list: TdDropdownItemOption[] = node.options;\n        newTreeOptions.push([...list]);\n        level += 1;\n        // 当前层级列表选中项\n        const thisValue: TdDropdownTreeValueType | undefined = selectList[level];\n        if (thisValue === undefined) {\n          const firstChild = list[0];\n          if (firstChild.options) {\n            // 还有子节点，当前层级作为单选处理\n            selectTreeNode(level, firstChild.value, false);\n            node = firstChild;\n          } else {\n            // 没有子节点，结束处理\n            selectTreeNode(level, props.multiple ? [] : undefined, false);\n            break;\n          }\n        } else if (!Array.isArray(thisValue)) {\n          const child: TdDropdownItemOption | undefined = list.find(\n            (child: TdDropdownItemOption) => child.value === thisValue,\n          );\n          node = child;\n        } else {\n          node = undefined;\n        }\n      }\n      treeState.leafLevel = Math.max(0, level);\n      treeOptions.value = newTreeOptions as [];\n    };\n    if (props.optionsLayout === 'tree') {\n      watch(\n        () =>\n          JSON.stringify({\n            options: props.options,\n          }),\n        async () => {\n          // fix: 这次微任务结束后，再重建选项。否则 oldVal 无法更新，导致无限调用\n          await nextTick();\n          buildTreeOptions();\n        },\n      );\n      buildTreeOptions();\n    }\n    // 根据传入值更新当前选中\n    const updateSelectValue = (\n      val: TdDropdownItemOptionValueType | TdDropdownItemOptionValueType[] | TdDropdownTreeValueType[] | null,\n    ) => {\n      const layout = props.optionsLayout;\n      if (layout === 'tree') {\n        treeState.selectList = (val ?? []) as TdDropdownTreeValueType[];\n        buildTreeOptions();\n      } else if (layout === 'columns') {\n        if (!props.multiple) {\n          const list = props.options as TdDropdownItemOption[];\n          const firstChild = list?.[0];\n          const newValue = val ?? firstChild?.value ?? null;\n          radioSelect.value = newValue as TdDropdownItemOptionValueType;\n        } else if (props.multiple) {\n          if (props.optionsLayout === 'columns') {\n            checkSelect.value = (val ?? []) as TdDropdownItemOptionValueType[];\n          }\n        }\n      }\n    };\n    // 初始值更新一次选中项\n    updateSelectValue(passInValue.value || null);\n    // 跟踪 modelValue 更新选项\n    watch(\n      () => passInValue.value,\n      (val) => {\n        if (!val) return;\n        updateSelectValue(val);\n      },\n    );\n    // 底部按键是否可用\n    const isBtnDisabled = computed(() => {\n      switch (props.optionsLayout) {\n        case 'columns':\n          return checkSelect.value.length <= 0;\n        case 'tree':\n          if (!props.multiple) {\n            return treeState.selectList[treeState.leafLevel] === undefined;\n          }\n          if (props.multiple) {\n            const selectList = treeState.selectList[treeState.leafLevel] as [];\n            return selectList && selectList.length <= 0;\n          }\n      }\n      return true;\n    });\n    // 重置\n    const resetSelect = () => {\n      switch (props.optionsLayout) {\n        case 'columns':\n          checkSelect.value = [];\n          break;\n        case 'tree':\n          treeState.selectList = [];\n          break;\n      }\n    };\n    // 确认\n    const confirmSelect = () => {\n      let values;\n      switch (props.optionsLayout) {\n        case 'columns':\n          values = checkSelect.value;\n          break;\n        case 'tree':\n          values = treeState.selectList;\n          break;\n      }\n      values = JSON.parse(JSON.stringify(values));\n      setValue(values);\n      collapseMenu();\n    };\n    // 单选值监控\n    watch(radioSelect, (val) => {\n      if (props.multiple || props.optionsLayout === 'tree') return;\n      if (!state.isShowItems) return;\n      const value = passInValue.value || [];\n      if (value[0] === val) return;\n      if (val) {\n        setValue(val);\n      }\n      collapseMenu();\n    });\n    // 点击遮罩层\n    const onClickOverlay = () => {\n      if (menuProps.closeOnClickOverlay) {\n        collapseMenu();\n      }\n    };\n    // 创建小图标\n    const TiconCheckIcon = h(CheckIcon);\n    // 树形节点的类型转换\n    const convertTreeRadioType = (value: TdDropdownTreeValueType) => value as TdDropdownItemOptionValueType;\n    const convertTreeCheckType = (value: TdDropdownTreeValueType) => value as TdDropdownItemOptionValueType[];\n    return {\n      name: ref(name),\n      ...toRefs(props),\n      ...toRefs(state),\n      classes,\n      styleContent,\n      isBtnDisabled,\n      radioSelect,\n      checkSelect,\n      treeOptions,\n      treeState,\n      styleTreeRadio,\n      isCheckedRadio,\n      selectTreeNode,\n      styleDropRadio,\n      expandMenu,\n      collapseMenu,\n      resetSelect,\n      confirmSelect,\n      onClickOverlay,\n      renderCheckIcon: [TiconCheckIcon as unknown as TNode],\n      convertTreeRadioType,\n      convertTreeCheckType,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}