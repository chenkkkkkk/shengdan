{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _typeof from '@babel/runtime/helpers/typeof';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport { defineComponent, computed, provide, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, renderSlot, Fragment, renderList, createBlock } from 'vue';\nimport config from '../config.js';\nimport CheckboxProps from './checkbox-group-props.js';\nimport script$1 from './checkbox.js';\nimport '../shared/index.js';\nimport './hooks/index.js';\nimport { useDefault } from '../shared/useDefault/index.js';\nimport { getOptions } from './hooks/getOptions.js';\nimport { setCheckAllStatus } from './hooks/setCheckAllStatus.js';\nimport 'tdesign-icons-vue-next';\nimport './props.js';\nimport '../shared/constants.js';\nimport '../shared/render-tnode.js';\nimport '../shared/render.js';\nimport 'lodash/camelCase';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useEmitEvent/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '../shared/useVModel/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport 'lodash/intersection';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-checkbox-group\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    Checkbox: script$1\n  },\n  props: CheckboxProps,\n  emits: [\"update:value\", \"update:modelValue\", \"change\"],\n  setup: function setup(props, context) {\n    var isArray = Array.isArray;\n    var _useDefault = useDefault(props, context.emit, \"value\", \"change\"),\n      _useDefault2 = _slicedToArray(_useDefault, 2),\n      innerValue = _useDefault2[0],\n      setinnerValue = _useDefault2[1];\n    var optionList = getOptions(props, context.slots);\n    var checkedSet = computed(function () {\n      if (isArray(innerValue.value)) {\n        return new Set(innerValue.value);\n      }\n      return /* @__PURE__ */new Set();\n    });\n    var checkAllStatus = setCheckAllStatus(optionList, innerValue, checkedSet);\n    var maxExceeded = computed(function () {\n      return props.max !== void 0 && innerValue.value.length === props.max;\n    });\n    var onCheckedChange = function onCheckedChange(p) {\n      var checked = p.checked,\n        checkAll = p.checkAll,\n        e = p.e;\n      if (checkAll) {\n        onCheckAllChange(checked, {\n          e: e\n        });\n      } else {\n        handleCheckboxChange(p);\n      }\n    };\n    var handleCheckboxChange = function handleCheckboxChange(data) {\n      var currentValue = data.option.value;\n      if (isArray(innerValue.value)) {\n        if (currentValue === void 0) {\n          return;\n        }\n        var val = _toConsumableArray(innerValue.value);\n        if (data.checked) {\n          val.push(currentValue);\n        } else {\n          var i = val.indexOf(currentValue);\n          val.splice(i, 1);\n        }\n        setinnerValue(val, {\n          e: data.e,\n          current: data.option.value,\n          type: data.checked ? \"check\" : \"uncheck\"\n        });\n      } else {\n        console.warn(\"TDesign CheckboxGroup Warn: `value` must be an array, instead of \".concat(_typeof(innerValue.value)));\n      }\n    };\n    var getAllCheckboxValue = function getAllCheckboxValue() {\n      var val = /* @__PURE__ */new Set();\n      for (var i = 0, len = optionList.value.length; i < len; i++) {\n        var item = optionList.value[i];\n        if (item.checkAll) continue;\n        if (item.value === void 0) continue;\n        val.add(item.value);\n        if (maxExceeded.value) break;\n      }\n      return _toConsumableArray(val);\n    };\n    var onCheckAllChange = function onCheckAllChange(checked, context2) {\n      var value = checked ? getAllCheckboxValue() : [];\n      setinnerValue(value, {\n        e: context2.e,\n        type: checked ? \"check\" : \"uncheck\",\n        current: void 0\n      });\n    };\n    provide(\"checkboxGroup\", _objectSpread(_objectSpread({}, toRefs(props)), {}, {\n      innerValue: innerValue,\n      checkAllStatus: checkAllStatus,\n      checkedSet: checkedSet,\n      onCheckedChange: onCheckedChange\n    }));\n    return {\n      prefix: prefix,\n      optionList: optionList\n    };\n  }\n});\nvar _hoisted_1 = {\n  key: 1\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_checkbox = resolveComponent(\"checkbox\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.prefix, \"-checkbox-group\"))\n  }, [!(_ctx.options && _ctx.options.length) ? renderSlot(_ctx.$slots, \"default\", {\n    key: 0\n  }) : (openBlock(), createElementBlock(\"span\", _hoisted_1, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.optionList, function (item, idx) {\n    return openBlock(), createBlock(_component_checkbox, {\n      key: idx,\n      name: item.name,\n      label: item.label,\n      value: item.value,\n      \"check-all\": item.checkAll\n    }, null, 8, [\"name\", \"label\", \"value\", \"check-all\"]);\n  }), 128))]))], 2);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAQA,SAAWC,OAAXD;AACR,IAAME,OAAUF;AAMhB,aAAeG,eAAgB;EAC7BD;EACAE,UAAY;IACVC;GACF;EACAC,KAAO;EACPC,KAAO,GAAC,cAAgB,uBAAqB,QAAQ;EACrDC,OAAMF,sBAAYG,OAAuB;IACjC,IAAEC,UAAYC,MAAZD;IACF,IAA8BE,yBAClCN,OACAG,OAAQ,OACR,SACA,SACF;MAAAI;MALOC,UAAY;MAAAC,aAAa;IAMhC,IAAMC,UAAa,cAAWV,KAAO,UAAQW,KAAK;IAC5C,iBAAaC,SAAS,YAAM;MAC5B,YAAQJ,UAAW,MAAK,CAAG;QACtB,WAAIK,GAAI,YAAWC,KAAK;MACjC;MACA,0BAAWD,GAAI;IACjB,CAAC;IACD,IAAME,cAAiB,qBAAkBL,UAAY,cAAYM,UAAU;IACrE,kBAAcJ,SAAS,YAAM;MACjC,OAAOZ,MAAMiB,GAAQ,eAAaT,UAAW,OAAMU,WAAWlB,KAAM;IACtE,CAAC;IAEK,sBAAkB,SAAlBmB,gBAAmBC,CAAkF;MACzG,IAAQC,UAAyBD,EAAzBC;QAASC,QAAU,GAAMF,EAAhBE,QAAU;QAAAC,IAAMH,EAANG;MAC3B,IAAID,QAAU;QACKE,0BAAS;UAAED;QAAE,CAAC;MACjC,CAAO;QACLE,qBAAqBL,CAAC;MACxB;KACF;IAEM,2BAAuB,SAAvBK,qBAAwBC,IAAkE;MACxF,mBAAeA,KAAKC,MAAO;MAC7B,YAAQnB,UAAW,MAAK,CAAG;QAE7B,IAAIoB,iBAAiB,KAAW;UAC9B;QACF;QACA,IAAMC,GAAM,sBAAIrB,WAAWM,KAAK;QAChC,IAAIY,KAAKL,OAAS;UAChBQ,IAAIC,KAAKF,YAAY;QACvB,CAAO;UACC,QAAIC,GAAI,SAAQD,YAAY;UAC9BC,WAAOE,GAAG,CAAC;QACjB;QACAtB,cAAcoB,GAAK;UACjBN,GAAGG,IAAK;UACRM,SAASN,KAAKC,MAAO;UACrBM,MAAMP,IAAK,WAAU,OAAU;QACjC,CAAC;MACH,CAAO;QACLQ,QAAQC,IAAK,oFAA6E3B,WAAWM,KAAO;MAC9G;KACF;IACA,IAAMsB,sBAAsB,SAAtBA,sBAAgD;MAC9C,6BAAUvB,GAA2C;MAClD,aAAI,GAAGwB,GAAM,cAAWvB,MAAMI,MAAQ,MAAImB,KAAKN,CAAK;QACrD,WAAOrB,WAAWI,KAAM;QAC9B,IAAIwB,IAAK,WAAU;QACnB,IAAIA,KAAKxB,KAAU,aAAW;QAC1Be,QAAIS,KAAKxB,KAAK;QAClB,IAAIyB,WAAY,QAAO;MACzB;MACO,0BAAIV,GAAG;KAChB;IACM,uBAAmB,SAAnBL,iBAAoBH,SAAkBlB,QAAiD;MAC3F,IAAMW,KAAQ,aAAUsB,mBAAoB,KAAI,EAAC;MACjD3B,cAAcK,KAAO;QACnBS,GAAGpB,QAAQ;QACX8B,MAAMZ,UAAU,OAAU;QAC1BW,OAAS;MACX,CAAC;KACH;IAEAQ,QAAQ,eAAiB,kCACpBC,OAAOzC,KAAK;MACfQ;MACAO;MACAC;MACAG;KACD;IACM;MACLzB;MACAgB;KACF;EACF;AACF,CAAC;;;;;;oBC1HC,qBAYK;IAZCgC,sBAAUC,eAAMjD;QACNiD,IAAQ,YAAGA,KAAOC,OAAC,WAAjCC,WAA2CF;IAAAG;EAAA,iBAC3C,qBASM,sBARJC,mCAOC,WANuB,kCAAd,gBAAMC,GAAG;sBADnB,cAOCC;MALEH,GAAK;MACLlD,MAAM0C,IAAK;MACXY,OAAOZ,IAAK;MACZxB,OAAOwB,IAAK;MACZ,aAAWA,IAAK","names":["prefix","config","name","defineComponent","components","Checkbox","props","emits","setup","context","isArray","Array","useDefault","_useDefault2","innerValue","setinnerValue","optionList","slots","computed","Set","value","checkAllStatus","checkedSet","max","length","onCheckedChange","p","checked","checkAll","e","onCheckAllChange","handleCheckboxChange","data","option","currentValue","val","push","i","current","type","console","warn","getAllCheckboxValue","len","item","maxExceeded","provide","toRefs","class","_ctx","options","_renderSlot","key","_openBlock","idx","_component_checkbox","label"],"sources":["../../src/checkbox/group.vue","../../src/checkbox/group.vue?vue&type=template&id=0c3c91c0&lang.js"],"sourcesContent":["<template>\n  <div :class=\"`${prefix}-checkbox-group`\">\n    <slot v-if=\"!(options && options.length)\" />\n    <span v-else>\n      <checkbox\n        v-for=\"(item, idx) in optionList\"\n        :key=\"idx\"\n        :name=\"item.name\"\n        :label=\"item.label\"\n        :value=\"item.value\"\n        :check-all=\"item.checkAll\"\n      />\n    </span>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { SetupContext, provide, ref, computed, defineComponent, watch, toRefs, VNode, reactive, onMounted } from 'vue';\nimport config from '../config';\nimport CheckboxProps from './checkbox-group-props';\nimport Checkbox from './checkbox.vue';\nimport { CheckboxGroupValue, TdCheckboxGroupProps, TdCheckboxProps } from './type';\nimport { useDefault } from '../shared';\nimport { getOptions, setCheckAllStatus } from './hooks';\n\nconst { prefix } = config;\nconst name = `${prefix}-checkbox-group`;\n\nexport interface Child {\n  value: string | number;\n}\n\nexport default defineComponent({\n  name,\n  components: {\n    Checkbox,\n  },\n  props: CheckboxProps,\n  emits: ['update:value', 'update:modelValue', 'change'],\n  setup(props: any, context: SetupContext) {\n    const { isArray } = Array;\n    const [innerValue, setinnerValue] = useDefault<CheckboxGroupValue, TdCheckboxGroupProps>(\n      props,\n      context.emit,\n      'value',\n      'change',\n    );\n    const optionList = getOptions(props, context.slots);\n    const checkedSet = computed(() => {\n      if (isArray(innerValue.value)) {\n        return new Set(innerValue.value);\n      }\n      return new Set();\n    });\n    const checkAllStatus = setCheckAllStatus(optionList, innerValue, checkedSet);\n    const maxExceeded = computed(() => {\n      return props.max !== undefined && innerValue.value.length === props.max;\n    });\n\n    const onCheckedChange = (p: { checked: boolean; checkAll: boolean; e: Event; option: TdCheckboxProps }) => {\n      const { checked, checkAll, e } = p;\n      if (checkAll) {\n        onCheckAllChange(checked, { e });\n      } else {\n        handleCheckboxChange(p);\n      }\n    };\n\n    const handleCheckboxChange = (data: { checked: boolean; e: Event; option: TdCheckboxProps }) => {\n      const currentValue = data.option.value;\n      if (isArray(innerValue.value)) {\n        // TODO: need to test more\n        if (currentValue === undefined) {\n          return;\n        }\n        const val = [...innerValue.value];\n        if (data.checked) {\n          val.push(currentValue);\n        } else {\n          const i = val.indexOf(currentValue);\n          val.splice(i, 1);\n        }\n        setinnerValue(val, {\n          e: data.e,\n          current: data.option.value,\n          type: data.checked ? 'check' : 'uncheck',\n        });\n      } else {\n        console.warn(`TDesign CheckboxGroup Warn: \\`value\\` must be an array, instead of ${typeof innerValue.value}`);\n      }\n    };\n    const getAllCheckboxValue = (): CheckboxGroupValue => {\n      const val = new Set<NonNullable<TdCheckboxProps['value']>>();\n      for (let i = 0, len = optionList.value.length; i < len; i++) {\n        const item = optionList.value[i];\n        if (item.checkAll) continue;\n        if (item.value === undefined) continue;\n        val.add(item.value);\n        if (maxExceeded.value) break;\n      }\n      return [...val];\n    };\n    const onCheckAllChange = (checked: boolean, context: { e: Event; source?: 't-checkbox' }) => {\n      const value = checked ? getAllCheckboxValue() : [];\n      setinnerValue(value, {\n        e: context.e,\n        type: checked ? 'check' : 'uncheck',\n        current: undefined,\n      });\n    };\n\n    provide('checkboxGroup', {\n      ...toRefs(props),\n      innerValue,\n      checkAllStatus,\n      checkedSet,\n      onCheckedChange,\n    });\n    return {\n      prefix,\n      optionList,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"`${prefix}-checkbox-group`\">\n    <slot v-if=\"!(options && options.length)\" />\n    <span v-else>\n      <checkbox\n        v-for=\"(item, idx) in optionList\"\n        :key=\"idx\"\n        :name=\"item.name\"\n        :label=\"item.label\"\n        :value=\"item.value\"\n        :check-all=\"item.checkAll\"\n      />\n    </span>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { SetupContext, provide, ref, computed, defineComponent, watch, toRefs, VNode, reactive, onMounted } from 'vue';\nimport config from '../config';\nimport CheckboxProps from './checkbox-group-props';\nimport Checkbox from './checkbox.vue';\nimport { CheckboxGroupValue, TdCheckboxGroupProps, TdCheckboxProps } from './type';\nimport { useDefault } from '../shared';\nimport { getOptions, setCheckAllStatus } from './hooks';\n\nconst { prefix } = config;\nconst name = `${prefix}-checkbox-group`;\n\nexport interface Child {\n  value: string | number;\n}\n\nexport default defineComponent({\n  name,\n  components: {\n    Checkbox,\n  },\n  props: CheckboxProps,\n  emits: ['update:value', 'update:modelValue', 'change'],\n  setup(props: any, context: SetupContext) {\n    const { isArray } = Array;\n    const [innerValue, setinnerValue] = useDefault<CheckboxGroupValue, TdCheckboxGroupProps>(\n      props,\n      context.emit,\n      'value',\n      'change',\n    );\n    const optionList = getOptions(props, context.slots);\n    const checkedSet = computed(() => {\n      if (isArray(innerValue.value)) {\n        return new Set(innerValue.value);\n      }\n      return new Set();\n    });\n    const checkAllStatus = setCheckAllStatus(optionList, innerValue, checkedSet);\n    const maxExceeded = computed(() => {\n      return props.max !== undefined && innerValue.value.length === props.max;\n    });\n\n    const onCheckedChange = (p: { checked: boolean; checkAll: boolean; e: Event; option: TdCheckboxProps }) => {\n      const { checked, checkAll, e } = p;\n      if (checkAll) {\n        onCheckAllChange(checked, { e });\n      } else {\n        handleCheckboxChange(p);\n      }\n    };\n\n    const handleCheckboxChange = (data: { checked: boolean; e: Event; option: TdCheckboxProps }) => {\n      const currentValue = data.option.value;\n      if (isArray(innerValue.value)) {\n        // TODO: need to test more\n        if (currentValue === undefined) {\n          return;\n        }\n        const val = [...innerValue.value];\n        if (data.checked) {\n          val.push(currentValue);\n        } else {\n          const i = val.indexOf(currentValue);\n          val.splice(i, 1);\n        }\n        setinnerValue(val, {\n          e: data.e,\n          current: data.option.value,\n          type: data.checked ? 'check' : 'uncheck',\n        });\n      } else {\n        console.warn(`TDesign CheckboxGroup Warn: \\`value\\` must be an array, instead of ${typeof innerValue.value}`);\n      }\n    };\n    const getAllCheckboxValue = (): CheckboxGroupValue => {\n      const val = new Set<NonNullable<TdCheckboxProps['value']>>();\n      for (let i = 0, len = optionList.value.length; i < len; i++) {\n        const item = optionList.value[i];\n        if (item.checkAll) continue;\n        if (item.value === undefined) continue;\n        val.add(item.value);\n        if (maxExceeded.value) break;\n      }\n      return [...val];\n    };\n    const onCheckAllChange = (checked: boolean, context: { e: Event; source?: 't-checkbox' }) => {\n      const value = checked ? getAllCheckboxValue() : [];\n      setinnerValue(value, {\n        e: context.e,\n        type: checked ? 'check' : 'uncheck',\n        current: undefined,\n      });\n    };\n\n    provide('checkboxGroup', {\n      ...toRefs(props),\n      innerValue,\n      checkAllStatus,\n      checkedSet,\n      onCheckedChange,\n    });\n    return {\n      prefix,\n      optionList,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}