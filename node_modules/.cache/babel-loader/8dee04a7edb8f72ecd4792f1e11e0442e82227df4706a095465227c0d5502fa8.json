{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * tdesign v0.14.1\n * (c) 2022 TDesign Group\n * @license MIT\n */\n\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { defineComponent, computed, ref, toRefs, Fragment, onMounted, onBeforeUnmount, nextTick, provide, readonly, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, normalizeProps, guardReactiveProps, withCtx, createElementVNode, renderList, createBlock, normalizeStyle, createCommentVNode, renderSlot } from 'vue';\nimport config from '../config.js';\nimport TabsProps from './props.js';\nimport script$1 from './tab-nav-item.js';\nimport '../shared/index.js';\nimport ClASSNAMES from '../shared/constants.js';\nimport _Sticky from '../sticky/index.js';\nimport { useVModel } from '../shared/useVModel/index.js';\nimport './tab-panel-props.js';\nimport '../shared/render-tnode.js';\nimport '../shared/render.js';\nimport '@babel/runtime/helpers/typeof';\nimport 'lodash/camelCase';\nimport '../shared/functions.js';\nimport '../shared/util.js';\nimport '../shared/component.js';\nimport '../shared/useToggle/index.js';\nimport '../shared/useCountDown/index.js';\nimport '@babel/runtime/helpers/asyncToGenerator';\nimport '@babel/runtime/regenerator';\nimport '@vueuse/core';\nimport '../shared/useCountDown/utils.js';\nimport '../shared/useDefault/index.js';\nimport '../shared/useEmitEvent/index.js';\nimport '../shared/useChildSlots/index.js';\nimport '../shared/useTouch/index.js';\nimport '../shared/useScrollParent/index.js';\nimport '../shared/useExpose/index.js';\nimport '../shared/useTest/index.js';\nimport '../sticky/sticky.js';\nimport '../sticky/props.js';\nimport './style/css.js';\nimport '../sticky/type.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar prefix = config.prefix;\nvar name = \"\".concat(prefix, \"-tabs\");\nvar script = defineComponent({\n  name: name,\n  components: {\n    TabNavItem: script$1,\n    TSticky: _Sticky\n  },\n  props: TabsProps,\n  emits: [\"update:value\", \"update:modelValue\"],\n  setup: function setup(props, context) {\n    var placement = computed(function () {\n      return props.placement;\n    });\n    var showBottomLine = computed(function () {\n      return props.showBottomLine;\n    });\n    var stickyProps = computed(function () {\n      return _objectSpread({\n        disabled: true\n      }, props.stickyProps);\n    });\n    var activeClass = ClASSNAMES.STATUS.active;\n    var disabledClass = ClASSNAMES.STATUS.disabled;\n    var classes = computed(function () {\n      return [\"\".concat(name), \"\".concat(prefix, \"-is-\").concat(placement.value), props.size ? ClASSNAMES.SIZE[props.size] : \"\"];\n    });\n    var navClasses = ref([\"\".concat(name, \"__nav\")]);\n    var isScroll = ref(false);\n    var _toRefs = toRefs(props),\n      value = _toRefs.value,\n      modelValue = _toRefs.modelValue;\n    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),\n      _useVModel2 = _slicedToArray(_useVModel, 2),\n      currentValue = _useVModel2[0],\n      setCurrentValue = _useVModel2[1];\n    var itemProps = computed(function () {\n      if (props.list) {\n        return props.list;\n      }\n      var children = context.slots.default ? context.slots.default() : [];\n      var res = [];\n      var _label = [];\n      children.forEach(function (child) {\n        var _child$children;\n        if (child.type === Fragment) {\n          res.push.apply(res, _toConsumableArray(child.children));\n        } else {\n          res.push(child);\n        }\n        if ((_child$children = child.children) !== null && _child$children !== void 0 && _child$children.label) {\n          _label.push(child.children.label()[0] || null);\n        }\n      });\n      children = res.filter(function (child) {\n        return child.type.name === \"\".concat(prefix, \"-tab-panel\");\n      });\n      return children.map(function (item, index) {\n        return _objectSpread(_objectSpread({}, item.props), {}, {\n          label: function label() {\n            return _label[index] || item.props.label;\n          }\n        });\n      });\n    });\n    var navScroll = ref(null);\n    var navWrap = ref(null);\n    var navLine = ref(null);\n    var lineStyle = ref(\"\");\n    var moveToActiveTab = function moveToActiveTab() {\n      if (navWrap.value && navLine.value && showBottomLine.value) {\n        var tab = navWrap.value.querySelector(\".\".concat(activeClass));\n        if (!tab) return;\n        var line = navLine.value;\n        if (placement.value === \"left\") {\n          lineStyle.value = \"transform: translateY(\".concat(tab.offsetTop, \"px);\").concat(props.animation ? \"transition-duration:\".concat(props.animation.duration, \"ms\") : \"\");\n        } else {\n          lineStyle.value = \"transform: translateX(\".concat(Number(tab.offsetLeft) + Number(tab.offsetWidth) / 2 - line.offsetWidth / 2, \"px);\").concat(props.animation ? \"transition-duration:\".concat(props.animation.duration, \"ms\") : \"\");\n        }\n      }\n    };\n    onMounted(function () {\n      var _navWrap$value, _navScroll$value;\n      isScroll.value = (((_navWrap$value = navWrap.value) === null || _navWrap$value === void 0 ? void 0 : _navWrap$value.offsetWidth) || 0) > (((_navScroll$value = navScroll.value) === null || _navScroll$value === void 0 ? void 0 : _navScroll$value.offsetWidth) || 0);\n      isScroll.value && navClasses.value.push(\"\".concat(prefix, \"-is-scrollable\"));\n      window.addEventListener(\"resize\", moveToActiveTab, false);\n      setTimeout(function () {\n        moveToActiveTab();\n      }, 300);\n    });\n    onBeforeUnmount(function () {\n      window.removeEventListener(\"resize\", moveToActiveTab);\n    });\n    var tabClick = function tabClick(event, item) {\n      var value2 = item.value,\n        disabled = item.disabled;\n      if (disabled || currentValue.value === value2) {\n        return false;\n      }\n      setCurrentValue(value2);\n      nextTick(function () {\n        moveToActiveTab();\n      });\n    };\n    provide(\"currentValue\", readonly(currentValue));\n    return {\n      name: name,\n      prefix: prefix,\n      classes: classes,\n      navClasses: navClasses,\n      activeClass: activeClass,\n      disabledClass: disabledClass,\n      currentValue: currentValue,\n      tabClick: tabClick,\n      showBottomLine: showBottomLine,\n      itemProps: itemProps,\n      navScroll: navScroll,\n      navWrap: navWrap,\n      navLine: navLine,\n      lineStyle: lineStyle,\n      moveToActiveTab: moveToActiveTab,\n      stickyProps: stickyProps\n    };\n  }\n});\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_tab_nav_item = resolveComponent(\"tab-nav-item\");\n  var _component_t_sticky = resolveComponent(\"t-sticky\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.classes)\n  }, [createVNode(_component_t_sticky, normalizeProps(guardReactiveProps(_ctx.stickyProps)), {\n    default: withCtx(function () {\n      return [createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.navClasses)\n      }, [createElementVNode(\"div\", {\n        ref: \"navScroll\",\n        class: normalizeClass(\"\".concat(_ctx.name, \"__nav-container\"))\n      }, [createElementVNode(\"div\", {\n        ref: \"navWrap\",\n        class: normalizeClass(\"\".concat(_ctx.name, \"__nav-wrap\"))\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.itemProps, function (item) {\n        var _normalizeClass2;\n        return openBlock(), createBlock(_component_tab_nav_item, {\n          key: item.value,\n          label: item.label,\n          class: normalizeClass((_normalizeClass2 = {}, _defineProperty(_normalizeClass2, \"\".concat(_ctx.name, \"__nav-item\"), true), _defineProperty(_normalizeClass2, _ctx.activeClass, item.value === _ctx.currentValue), _defineProperty(_normalizeClass2, _ctx.disabledClass, item.disabled), _normalizeClass2)),\n          onClick: function onClick(e) {\n            return _ctx.tabClick(e, item);\n          }\n        }, null, 8, [\"label\", \"class\", \"onClick\"]);\n      }), 128)), _ctx.showBottomLine ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        ref: \"navLine\",\n        class: normalizeClass(\"\".concat(_ctx.name, \"__nav-line\")),\n        style: normalizeStyle(_ctx.lineStyle)\n      }, null, 6)) : createCommentVNode(\"\", true)], 2)], 2)], 2)];\n    }),\n    _: 1\n  }, 16), createElementVNode(\"div\", {\n    class: normalizeClass(\"\".concat(_ctx.name, \"__content\"))\n  }, [renderSlot(_ctx.$slots, \"default\")], 2)], 2);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"mappings":"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","names":["prefix","config","name","defineComponent","components","TabNavItem","TSticky","props","emits","setup","context","placement","showBottomLine","computed","disabled","CLASSNAMES","STATUS","size","navClasses","ref","toRefs","value","modelValue","useVModel","defaultValue","onChange","_useVModel2","currentValue","setCurrentValue","list","slots","res","label","children","child","type","Fragment","push","filter","item","index","moveToActiveTab","navWrap","navLine","tab","activeClass","line","lineStyle","animation","duration","Number","offsetLeft","offsetWidth","onMounted","isScroll","_navWrap$value","_navScroll$value","window","setTimeout","onBeforeUnmount","tabClick","event","nextTick","provide","readonly","classes","disabledClass","itemProps","navScroll","stickyProps","class","_createVNode","_component_t_sticky","_ctx","_createElementVNode","_createElementBlock","_component_tab_nav_item","key","_normalizeClass","onClick","e","style","_renderSlot"],"sources":["../../src/tabs/tabs.vue","../../src/tabs/tabs.vue?vue&type=template&id=502d9748&lang.js"],"sourcesContent":["<template>\n  <div :class=\"classes\">\n    <t-sticky v-bind=\"stickyProps\">\n      <div :class=\"navClasses\">\n        <div ref=\"navScroll\" :class=\"`${name}__nav-container`\">\n          <div ref=\"navWrap\" :class=\"`${name}__nav-wrap`\">\n            <tab-nav-item\n              v-for=\"item in itemProps\"\n              :key=\"item.value\"\n              :label=\"item.label\"\n              :class=\"{\n                [`${name}__nav-item`]: true,\n                [activeClass]: item.value === currentValue,\n                [disabledClass]: item.disabled,\n              }\"\n              @click=\"(e) => tabClick(e, item)\"\n            >\n            </tab-nav-item>\n            <div v-if=\"showBottomLine\" ref=\"navLine\" :class=\"`${name}__nav-line`\" :style=\"lineStyle\"></div>\n          </div>\n        </div>\n      </div>\n    </t-sticky>\n    <div :class=\"`${name}__content`\">\n      <slot> </slot>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  onMounted,\n  provide,\n  ref,\n  toRefs,\n  SetupContext,\n  nextTick,\n  onBeforeUnmount,\n  readonly,\n  Fragment,\n} from 'vue';\nimport config from '../config';\nimport TabsProps from './props';\nimport TabNavItem from './tab-nav-item.vue';\nimport { useVModel } from '../shared';\nimport CLASSNAMES from '../shared/constants';\nimport TSticky from '../sticky';\n\nconst { prefix } = config;\nconst name = `${prefix}-tabs`;\n\nexport default defineComponent({\n  name,\n  components: { TabNavItem, TSticky },\n  props: TabsProps,\n  emits: ['update:value', 'update:modelValue'],\n  setup(props, context: SetupContext) {\n    const placement = computed(() => props.placement);\n    const showBottomLine = computed(() => props.showBottomLine);\n    const stickyProps = computed(() => ({ disabled: true, ...props.stickyProps }));\n    const activeClass = CLASSNAMES.STATUS.active;\n    const disabledClass = CLASSNAMES.STATUS.disabled;\n    const classes = computed(() => [\n      `${name}`,\n      `${prefix}-is-${placement.value}`,\n      props.size ? CLASSNAMES.SIZE[props.size] : '',\n    ]);\n    const navClasses = ref([`${name}__nav`]);\n    const isScroll = ref(false);\n\n    const { value, modelValue } = toRefs(props);\n    const [currentValue, setCurrentValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n\n    const itemProps = computed(() => {\n      if (props.list) {\n        return props.list;\n      }\n      let children: any[] = context.slots.default ? context.slots.default() : [];\n\n      const res: any[] = [];\n      const label: any[] = [];\n      children.forEach((child) => {\n        if (child.type === Fragment) {\n          res.push(...child.children);\n        } else {\n          res.push(child);\n        }\n        if (child.children?.label) {\n          label.push(child.children.label()[0] || null);\n        }\n      });\n\n      children = res.filter((child: any) => child.type.name === `${prefix}-tab-panel`);\n      return children.map((item: any, index: number) => ({\n        ...item.props,\n        label: () => label[index] || item.props.label,\n      }));\n    });\n    const navScroll = ref<HTMLElement | null>(null);\n    const navWrap = ref<HTMLElement | null>(null);\n    const navLine = ref<HTMLElement | null>(null);\n    const lineStyle = ref('');\n    const moveToActiveTab = () => {\n      if (navWrap.value && navLine.value && showBottomLine.value) {\n        const tab = navWrap.value.querySelector<HTMLElement>(`.${activeClass}`);\n        if (!tab) return;\n        const line = navLine.value;\n        if (placement.value === 'left') {\n          lineStyle.value = `transform: translateY(${tab.offsetTop}px);${\n            props.animation ? `transition-duration:${props.animation.duration}ms` : ''\n          }`;\n        } else {\n          lineStyle.value = `transform: translateX(${\n            Number(tab.offsetLeft) + Number(tab.offsetWidth) / 2 - line.offsetWidth / 2\n          }px);${props.animation ? `transition-duration:${props.animation.duration}ms` : ''}`;\n        }\n      }\n    };\n\n    onMounted(() => {\n      isScroll.value = (navWrap.value?.offsetWidth || 0) > (navScroll.value?.offsetWidth || 0);\n      isScroll.value && navClasses.value.push(`${prefix}-is-scrollable`);\n      window.addEventListener('resize', moveToActiveTab, false);\n      setTimeout(() => {\n        moveToActiveTab();\n      }, 300);\n    });\n    onBeforeUnmount(() => {\n      window.removeEventListener('resize', moveToActiveTab);\n    });\n\n    const tabClick = (event: Event, item: Record<string, unknown>) => {\n      const { value, disabled } = item as any;\n      if (disabled || currentValue.value === value) {\n        return false;\n      }\n      setCurrentValue(value);\n      nextTick(() => {\n        moveToActiveTab();\n      });\n    };\n    provide('currentValue', readonly(currentValue));\n\n    return {\n      name,\n      prefix,\n      classes,\n      navClasses,\n      activeClass,\n      disabledClass,\n      currentValue,\n      tabClick,\n      showBottomLine,\n      itemProps,\n      navScroll,\n      navWrap,\n      navLine,\n      lineStyle,\n      moveToActiveTab,\n      stickyProps,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"classes\">\n    <t-sticky v-bind=\"stickyProps\">\n      <div :class=\"navClasses\">\n        <div ref=\"navScroll\" :class=\"`${name}__nav-container`\">\n          <div ref=\"navWrap\" :class=\"`${name}__nav-wrap`\">\n            <tab-nav-item\n              v-for=\"item in itemProps\"\n              :key=\"item.value\"\n              :label=\"item.label\"\n              :class=\"{\n                [`${name}__nav-item`]: true,\n                [activeClass]: item.value === currentValue,\n                [disabledClass]: item.disabled,\n              }\"\n              @click=\"(e) => tabClick(e, item)\"\n            >\n            </tab-nav-item>\n            <div v-if=\"showBottomLine\" ref=\"navLine\" :class=\"`${name}__nav-line`\" :style=\"lineStyle\"></div>\n          </div>\n        </div>\n      </div>\n    </t-sticky>\n    <div :class=\"`${name}__content`\">\n      <slot> </slot>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  onMounted,\n  provide,\n  ref,\n  toRefs,\n  SetupContext,\n  nextTick,\n  onBeforeUnmount,\n  readonly,\n  Fragment,\n} from 'vue';\nimport config from '../config';\nimport TabsProps from './props';\nimport TabNavItem from './tab-nav-item.vue';\nimport { useVModel } from '../shared';\nimport CLASSNAMES from '../shared/constants';\nimport TSticky from '../sticky';\n\nconst { prefix } = config;\nconst name = `${prefix}-tabs`;\n\nexport default defineComponent({\n  name,\n  components: { TabNavItem, TSticky },\n  props: TabsProps,\n  emits: ['update:value', 'update:modelValue'],\n  setup(props, context: SetupContext) {\n    const placement = computed(() => props.placement);\n    const showBottomLine = computed(() => props.showBottomLine);\n    const stickyProps = computed(() => ({ disabled: true, ...props.stickyProps }));\n    const activeClass = CLASSNAMES.STATUS.active;\n    const disabledClass = CLASSNAMES.STATUS.disabled;\n    const classes = computed(() => [\n      `${name}`,\n      `${prefix}-is-${placement.value}`,\n      props.size ? CLASSNAMES.SIZE[props.size] : '',\n    ]);\n    const navClasses = ref([`${name}__nav`]);\n    const isScroll = ref(false);\n\n    const { value, modelValue } = toRefs(props);\n    const [currentValue, setCurrentValue] = useVModel(value, modelValue, props.defaultValue, props.onChange);\n\n    const itemProps = computed(() => {\n      if (props.list) {\n        return props.list;\n      }\n      let children: any[] = context.slots.default ? context.slots.default() : [];\n\n      const res: any[] = [];\n      const label: any[] = [];\n      children.forEach((child) => {\n        if (child.type === Fragment) {\n          res.push(...child.children);\n        } else {\n          res.push(child);\n        }\n        if (child.children?.label) {\n          label.push(child.children.label()[0] || null);\n        }\n      });\n\n      children = res.filter((child: any) => child.type.name === `${prefix}-tab-panel`);\n      return children.map((item: any, index: number) => ({\n        ...item.props,\n        label: () => label[index] || item.props.label,\n      }));\n    });\n    const navScroll = ref<HTMLElement | null>(null);\n    const navWrap = ref<HTMLElement | null>(null);\n    const navLine = ref<HTMLElement | null>(null);\n    const lineStyle = ref('');\n    const moveToActiveTab = () => {\n      if (navWrap.value && navLine.value && showBottomLine.value) {\n        const tab = navWrap.value.querySelector<HTMLElement>(`.${activeClass}`);\n        if (!tab) return;\n        const line = navLine.value;\n        if (placement.value === 'left') {\n          lineStyle.value = `transform: translateY(${tab.offsetTop}px);${\n            props.animation ? `transition-duration:${props.animation.duration}ms` : ''\n          }`;\n        } else {\n          lineStyle.value = `transform: translateX(${\n            Number(tab.offsetLeft) + Number(tab.offsetWidth) / 2 - line.offsetWidth / 2\n          }px);${props.animation ? `transition-duration:${props.animation.duration}ms` : ''}`;\n        }\n      }\n    };\n\n    onMounted(() => {\n      isScroll.value = (navWrap.value?.offsetWidth || 0) > (navScroll.value?.offsetWidth || 0);\n      isScroll.value && navClasses.value.push(`${prefix}-is-scrollable`);\n      window.addEventListener('resize', moveToActiveTab, false);\n      setTimeout(() => {\n        moveToActiveTab();\n      }, 300);\n    });\n    onBeforeUnmount(() => {\n      window.removeEventListener('resize', moveToActiveTab);\n    });\n\n    const tabClick = (event: Event, item: Record<string, unknown>) => {\n      const { value, disabled } = item as any;\n      if (disabled || currentValue.value === value) {\n        return false;\n      }\n      setCurrentValue(value);\n      nextTick(() => {\n        moveToActiveTab();\n      });\n    };\n    provide('currentValue', readonly(currentValue));\n\n    return {\n      name,\n      prefix,\n      classes,\n      navClasses,\n      activeClass,\n      disabledClass,\n      currentValue,\n      tabClick,\n      showBottomLine,\n      itemProps,\n      navScroll,\n      navWrap,\n      navLine,\n      lineStyle,\n      moveToActiveTab,\n      stickyProps,\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}