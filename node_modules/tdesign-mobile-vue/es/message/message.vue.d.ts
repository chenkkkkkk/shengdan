import { h } from 'vue';
import { DrawMarquee } from './type';
declare const _default: import("vue").DefineComponent<{
    align: {
        type: import("vue").PropType<import("./type").MessageAlignType | undefined>;
        default: import("./type").MessageAlignType | undefined;
        validator(val: import("./type").MessageAlignType | undefined): boolean;
    };
    closeBtn: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("../common").SlotReturnValue) | undefined>;
        default: boolean;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue) | undefined>;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    icon: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("../common").SlotReturnValue) | undefined>;
        default: boolean;
    };
    marquee: {
        type: import("vue").PropType<boolean | DrawMarquee | undefined>;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<(string | number)[] | undefined>;
    };
    theme: {
        type: import("vue").PropType<import("./type").MessageThemeList | undefined>;
        default: import("./type").MessageThemeList | undefined;
        validator(val: import("./type").MessageThemeList | undefined): boolean;
    };
    visible: {
        type: BooleanConstructor;
        default: undefined;
    };
    modelValue: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onChange: import("vue").PropType<((visible: boolean) => void) | undefined>;
    onClose: import("vue").PropType<((context?: {
        trigger: "duration" | "close-click";
    } | undefined) => void) | undefined>;
    onClosed: import("vue").PropType<(() => void) | undefined>;
    onOpen: import("vue").PropType<(() => void) | undefined>;
    onOpened: import("vue").PropType<(() => void) | undefined>;
}, {
    currentVisible: import("vue").Ref<any>;
    rootClasses: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    textWrapClasses: import("vue").ComputedRef<{
        [x: string]: any;
    }>;
    rootStyles: import("vue").ComputedRef<{
        length: number;
        toString(): string;
        toLocaleString(): string;
        pop(): undefined;
        push(...items: never[]): number;
        concat(...items: ConcatArray<never>[]): never[];
        concat(...items: ConcatArray<never>[]): never[];
        join(separator?: string | undefined): string;
        reverse(): never[];
        shift(): undefined;
        slice(start?: number | undefined, end?: number | undefined): never[];
        sort(compareFn?: ((a: never, b: never) => number) | undefined): never[];
        splice(start: number, deleteCount?: number | undefined): never[];
        splice(start: number, deleteCount: number, ...items: never[]): never[];
        unshift(...items: never[]): number;
        indexOf(searchElement: never, fromIndex?: number | undefined): number;
        lastIndexOf(searchElement: never, fromIndex?: number | undefined): number;
        every<S extends never>(predicate: (value: never, index: number, array: never[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: never, index: number, array: never[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any): U[];
        filter<S_1 extends never>(predicate: (value: never, index: number, array: never[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): never[];
        reduce(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never): never;
        reduce(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never, initialValue: never): never;
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: never, currentIndex: number, array: never[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never): never;
        reduceRight(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never, initialValue: never): never;
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: never, currentIndex: number, array: never[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends never>(predicate: (this: void, value: never, index: number, obj: never[]) => value is S_2, thisArg?: any): S_2 | undefined;
        find(predicate: (value: never, index: number, obj: never[]) => unknown, thisArg?: any): undefined;
        findIndex(predicate: (value: never, index: number, obj: never[]) => unknown, thisArg?: any): number;
        fill(value: never, start?: number | undefined, end?: number | undefined): never[];
        copyWithin(target: number, start: number, end?: number | undefined): never[];
        entries(): IterableIterator<[number, never]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<never>;
        includes(searchElement: never, fromIndex?: number | undefined): boolean;
        flatMap<U_3, This = undefined>(callback: (this: This, value: never, index: number, array: never[]) => U_3 | readonly U_3[], thisArg?: This | undefined): U_3[];
        flat<A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[];
        at(index: number): undefined;
        [Symbol.iterator](): IterableIterator<never>;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
        zIndex: any;
    } | {
        top: string;
        right: string;
        left: string;
        zIndex: any;
    }>;
    computedPrefixIcon: import("vue").ComputedRef<any>;
    computedContent: import("vue").ComputedRef<any>;
    computedCloseBtn: import("vue").ComputedRef<any>;
    textWrapDOM: import("vue").Ref<any>;
    textDOM: import("vue").Ref<any>;
    animateStyle: import("vue").ComputedRef<{
        transform: string;
        transitionDuration: string;
        transitionTimingFunction: string;
    }>;
    onClose: () => void;
    handleTransitionend: () => void;
    afterEnter: () => void;
    afterLeave: () => void;
    duration: import("vue").Ref<number>;
    offset: import("vue").Ref<number>;
    listWidth: import("vue").Ref<number>;
    itemWidth: import("vue").Ref<number>;
    scroll: import("vue").Ref<{
        marquee: boolean;
        speed: number;
        loop: number;
        delay: number;
    }>;
    name: import("vue").Ref<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "open" | "close" | "opened" | "closed" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    align: {
        type: import("vue").PropType<import("./type").MessageAlignType | undefined>;
        default: import("./type").MessageAlignType | undefined;
        validator(val: import("./type").MessageAlignType | undefined): boolean;
    };
    closeBtn: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("../common").SlotReturnValue) | undefined>;
        default: boolean;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof h) => import("../common").SlotReturnValue) | undefined>;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    icon: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("../common").SlotReturnValue) | undefined>;
        default: boolean;
    };
    marquee: {
        type: import("vue").PropType<boolean | DrawMarquee | undefined>;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<(string | number)[] | undefined>;
    };
    theme: {
        type: import("vue").PropType<import("./type").MessageThemeList | undefined>;
        default: import("./type").MessageThemeList | undefined;
        validator(val: import("./type").MessageThemeList | undefined): boolean;
    };
    visible: {
        type: BooleanConstructor;
        default: undefined;
    };
    modelValue: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultVisible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onChange: import("vue").PropType<((visible: boolean) => void) | undefined>;
    onClose: import("vue").PropType<((context?: {
        trigger: "duration" | "close-click";
    } | undefined) => void) | undefined>;
    onClosed: import("vue").PropType<(() => void) | undefined>;
    onOpen: import("vue").PropType<(() => void) | undefined>;
    onOpened: import("vue").PropType<(() => void) | undefined>;
}>>, {
    modelValue: boolean;
    align: import("./type").MessageAlignType | undefined;
    duration: number;
    visible: boolean;
    defaultVisible: boolean;
    icon: boolean | ((h: typeof h) => import("../common").SlotReturnValue) | undefined;
    theme: import("./type").MessageThemeList | undefined;
    marquee: boolean | DrawMarquee | undefined;
    closeBtn: boolean | ((h: typeof h) => import("../common").SlotReturnValue) | undefined;
}>;
export default _default;
