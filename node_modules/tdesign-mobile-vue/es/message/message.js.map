{"version":3,"file":"message.js","sources":["../../src/message/message.vue","../../src/message/message.vue?vue&type=template&id=eade9a48&lang.js"],"sourcesContent":["<template>\n  <transition name=\"message\" @after-leave=\"afterLeave\" @after-enter=\"afterEnter\">\n    <div v-if=\"currentVisible\" ref=\"root\" :class=\"rootClasses\" :style=\"rootStyles\">\n      <t-node v-if=\"computedPrefixIcon\" :content=\"computedPrefixIcon\"></t-node>\n      <div ref=\"textWrapDOM\" :class=\"textWrapClasses\">\n        <div\n          ref=\"textDOM\"\n          :class=\"`${name}__text`\"\n          :style=\"scroll.marquee ? animateStyle : ''\"\n          @transitionend=\"handleTransitionend()\"\n        >\n          <t-node v-if=\"computedContent\" :content=\"computedContent\"></t-node>\n        </div>\n      </div>\n      <div v-if=\"computedCloseBtn\" @click=\"onClose\">\n        <t-node :content=\"computedCloseBtn\"></t-node>\n      </div>\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\">\nimport {\n  h,\n  ref,\n  computed,\n  watch,\n  defineComponent,\n  getCurrentInstance,\n  SetupContext,\n  toRefs,\n  reactive,\n  nextTick,\n  onMounted,\n} from 'vue';\nimport { CheckCircleFilledIcon, ErrorCircleFilledIcon, CloseIcon } from 'tdesign-icons-vue-next';\nimport { isFunction } from 'lodash';\nimport { off } from 'process';\nimport messageProps from './props';\nimport { DrawMarquee } from './type';\nimport config from '../config';\nimport { renderContent, renderTNode, TNode, useEmitEvent, useVModel } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-message`;\nconst iconDefault = {\n  info: h(ErrorCircleFilledIcon),\n  success: h(CheckCircleFilledIcon),\n  warning: h(ErrorCircleFilledIcon),\n  error: h(ErrorCircleFilledIcon),\n};\n\nexport default defineComponent({\n  name,\n  components: { TNode },\n  props: messageProps,\n  emits: ['change', 'open', 'opened', 'close', 'closed'],\n  setup(props: any, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const internalInstance = getCurrentInstance();\n\n    // 初始化动画相关数据\n    const state = reactive({\n      duration: 0,\n      offset: 0,\n      listWidth: 0,\n      itemWidth: 0,\n      scroll: {\n        marquee: false,\n        speed: 50,\n        loop: -1, // 值为 -1 表示循环播放，值为 0 表示不循环播放\n        delay: 0,\n      },\n    });\n\n    const { visible, modelValue } = toRefs(props);\n    const [currentVisible, setVisible] = useVModel(visible, modelValue, props.defaultVisible, props.onChange);\n    const rootClasses = computed(() => ({\n      [name]: true,\n      [`${name}--${props.theme}`]: true,\n      [`${name}-align--${props.align}`]: !!props.align,\n    }));\n\n    const textWrapClasses = computed(() => ({\n      [`${name}__text-wrap`]: true,\n      [`${name}__text-nowrap`]: props.marquee,\n    }));\n\n    const changeNumToStr = (arr: []) => {\n      return arr.map(function (item) {\n        return typeof item === 'number' ? `${item}px` : item;\n      });\n    };\n\n    const getMessageStylesOffset = (offset: []) => {\n      const arr = changeNumToStr(offset);\n      return {\n        top: arr[0],\n        right: arr[1],\n        left: arr[1],\n      };\n    };\n\n    const rootStyles = computed(() => {\n      const { offset } = props;\n      const offsetStyle = offset ? getMessageStylesOffset(offset) : [];\n      return {\n        zIndex: props.zIndex,\n        ...offsetStyle,\n      };\n    });\n\n    const computedPrefixIcon = computed(() => {\n      const { icon } = props;\n      if (!icon) return null;\n      if (icon && !context.slots.icon && !isFunction(icon)) {\n        const theme = props.theme as string;\n        return iconDefault?.[theme] || null;\n      }\n      return renderTNode(internalInstance, 'icon');\n    });\n\n    // content\n    const computedContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n\n    // closeBtn\n    const computedCloseBtn = computed(() => {\n      const { closeBtn } = props;\n      if (isFunction(closeBtn || context.slots.closeBtn)) {\n        return renderTNode(internalInstance, 'closeBtn');\n      }\n      if (closeBtn) {\n        const closeIcon = h(CloseIcon);\n        return closeIcon;\n      }\n      return null;\n    });\n\n    // 动画\n    const animateStyle = computed(() => ({\n      transform: state.offset ? `translateX(${state.offset}px)` : '',\n      transitionDuration: `${state.duration}s`,\n      transitionTimingFunction: 'linear',\n    }));\n\n    const textWrapDOM = ref();\n    const textDOM = ref();\n\n    const handleScrolling = () => {\n      if (!props?.marquee || (props?.marquee as DrawMarquee)?.loop === 0) {\n        return;\n      }\n      // 初始化动画参数\n      if (typeof props.marquee === 'boolean') {\n        state.scroll = { ...state.scroll, marquee: props.marquee };\n      }\n      const marquee = props.marquee as DrawMarquee;\n      state.scroll = {\n        marquee: true,\n        loop: typeof marquee?.loop === 'undefined' ? state.scroll.loop : marquee.loop,\n        speed: marquee.speed ?? state.scroll.speed,\n        delay: marquee.delay ?? state.scroll.delay,\n      };\n      // 设置动画\n      setTimeout(() => {\n        const textWrapDOMWidth = textWrapDOM.value?.getBoundingClientRect().width;\n        const textDOMWidth = textDOM.value?.getBoundingClientRect().width;\n        state.offset = -textDOMWidth;\n        state.duration = textDOMWidth / state.scroll.speed;\n        state.listWidth = textWrapDOMWidth;\n        state.itemWidth = textDOMWidth;\n      }, state.scroll.delay);\n    };\n\n    // 动画结束后，初始化动画\n    const handleTransitionend = () => {\n      state.scroll.loop = --state.scroll.loop;\n      if (state.scroll.loop === 0) {\n        state.scroll = {\n          ...state.scroll,\n          marquee: false,\n        };\n        return;\n      }\n      state.offset = state.listWidth;\n      state.duration = 0;\n\n      setTimeout(() => {\n        state.offset = -state.itemWidth;\n        state.duration = (state.itemWidth + state.listWidth) / state.scroll.speed;\n      }, 0);\n    };\n\n    const onClose = () => {\n      emitEvent('close');\n      setVisible(false);\n    };\n\n    const handleDuration = () => {\n      if (props.duration > 0) {\n        setTimeout(() => {\n          emitEvent('durationEnd');\n          onClose();\n        }, props.duration);\n      }\n    };\n\n    onMounted(() => {\n      nextTick(() => {\n        if (currentVisible.value) {\n          handleScrolling();\n        }\n      });\n    });\n\n    watch(\n      () => currentVisible.value,\n      (val) => {\n        if (val === false) return;\n        emitEvent('open');\n        setVisible(true);\n        handleDuration();\n        nextTick(() => {\n          state.offset = state.listWidth;\n          state.duration = 0;\n          handleScrolling();\n        });\n      },\n    );\n\n    return {\n      name: ref(name),\n      ...toRefs(state),\n      currentVisible,\n      rootClasses,\n      textWrapClasses,\n      rootStyles,\n      computedPrefixIcon,\n      computedContent,\n      computedCloseBtn,\n      textWrapDOM,\n      textDOM,\n      animateStyle,\n      onClose,\n      handleTransitionend,\n      afterEnter: () => emitEvent('opened'),\n      afterLeave: () => emitEvent('closed'),\n    };\n  },\n});\n</script>\n","<template>\n  <transition name=\"message\" @after-leave=\"afterLeave\" @after-enter=\"afterEnter\">\n    <div v-if=\"currentVisible\" ref=\"root\" :class=\"rootClasses\" :style=\"rootStyles\">\n      <t-node v-if=\"computedPrefixIcon\" :content=\"computedPrefixIcon\"></t-node>\n      <div ref=\"textWrapDOM\" :class=\"textWrapClasses\">\n        <div\n          ref=\"textDOM\"\n          :class=\"`${name}__text`\"\n          :style=\"scroll.marquee ? animateStyle : ''\"\n          @transitionend=\"handleTransitionend()\"\n        >\n          <t-node v-if=\"computedContent\" :content=\"computedContent\"></t-node>\n        </div>\n      </div>\n      <div v-if=\"computedCloseBtn\" @click=\"onClose\">\n        <t-node :content=\"computedCloseBtn\"></t-node>\n      </div>\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\">\nimport {\n  h,\n  ref,\n  computed,\n  watch,\n  defineComponent,\n  getCurrentInstance,\n  SetupContext,\n  toRefs,\n  reactive,\n  nextTick,\n  onMounted,\n} from 'vue';\nimport { CheckCircleFilledIcon, ErrorCircleFilledIcon, CloseIcon } from 'tdesign-icons-vue-next';\nimport { isFunction } from 'lodash';\nimport { off } from 'process';\nimport messageProps from './props';\nimport { DrawMarquee } from './type';\nimport config from '../config';\nimport { renderContent, renderTNode, TNode, useEmitEvent, useVModel } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-message`;\nconst iconDefault = {\n  info: h(ErrorCircleFilledIcon),\n  success: h(CheckCircleFilledIcon),\n  warning: h(ErrorCircleFilledIcon),\n  error: h(ErrorCircleFilledIcon),\n};\n\nexport default defineComponent({\n  name,\n  components: { TNode },\n  props: messageProps,\n  emits: ['change', 'open', 'opened', 'close', 'closed'],\n  setup(props: any, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const internalInstance = getCurrentInstance();\n\n    // 初始化动画相关数据\n    const state = reactive({\n      duration: 0,\n      offset: 0,\n      listWidth: 0,\n      itemWidth: 0,\n      scroll: {\n        marquee: false,\n        speed: 50,\n        loop: -1, // 值为 -1 表示循环播放，值为 0 表示不循环播放\n        delay: 0,\n      },\n    });\n\n    const { visible, modelValue } = toRefs(props);\n    const [currentVisible, setVisible] = useVModel(visible, modelValue, props.defaultVisible, props.onChange);\n    const rootClasses = computed(() => ({\n      [name]: true,\n      [`${name}--${props.theme}`]: true,\n      [`${name}-align--${props.align}`]: !!props.align,\n    }));\n\n    const textWrapClasses = computed(() => ({\n      [`${name}__text-wrap`]: true,\n      [`${name}__text-nowrap`]: props.marquee,\n    }));\n\n    const changeNumToStr = (arr: []) => {\n      return arr.map(function (item) {\n        return typeof item === 'number' ? `${item}px` : item;\n      });\n    };\n\n    const getMessageStylesOffset = (offset: []) => {\n      const arr = changeNumToStr(offset);\n      return {\n        top: arr[0],\n        right: arr[1],\n        left: arr[1],\n      };\n    };\n\n    const rootStyles = computed(() => {\n      const { offset } = props;\n      const offsetStyle = offset ? getMessageStylesOffset(offset) : [];\n      return {\n        zIndex: props.zIndex,\n        ...offsetStyle,\n      };\n    });\n\n    const computedPrefixIcon = computed(() => {\n      const { icon } = props;\n      if (!icon) return null;\n      if (icon && !context.slots.icon && !isFunction(icon)) {\n        const theme = props.theme as string;\n        return iconDefault?.[theme] || null;\n      }\n      return renderTNode(internalInstance, 'icon');\n    });\n\n    // content\n    const computedContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n\n    // closeBtn\n    const computedCloseBtn = computed(() => {\n      const { closeBtn } = props;\n      if (isFunction(closeBtn || context.slots.closeBtn)) {\n        return renderTNode(internalInstance, 'closeBtn');\n      }\n      if (closeBtn) {\n        const closeIcon = h(CloseIcon);\n        return closeIcon;\n      }\n      return null;\n    });\n\n    // 动画\n    const animateStyle = computed(() => ({\n      transform: state.offset ? `translateX(${state.offset}px)` : '',\n      transitionDuration: `${state.duration}s`,\n      transitionTimingFunction: 'linear',\n    }));\n\n    const textWrapDOM = ref();\n    const textDOM = ref();\n\n    const handleScrolling = () => {\n      if (!props?.marquee || (props?.marquee as DrawMarquee)?.loop === 0) {\n        return;\n      }\n      // 初始化动画参数\n      if (typeof props.marquee === 'boolean') {\n        state.scroll = { ...state.scroll, marquee: props.marquee };\n      }\n      const marquee = props.marquee as DrawMarquee;\n      state.scroll = {\n        marquee: true,\n        loop: typeof marquee?.loop === 'undefined' ? state.scroll.loop : marquee.loop,\n        speed: marquee.speed ?? state.scroll.speed,\n        delay: marquee.delay ?? state.scroll.delay,\n      };\n      // 设置动画\n      setTimeout(() => {\n        const textWrapDOMWidth = textWrapDOM.value?.getBoundingClientRect().width;\n        const textDOMWidth = textDOM.value?.getBoundingClientRect().width;\n        state.offset = -textDOMWidth;\n        state.duration = textDOMWidth / state.scroll.speed;\n        state.listWidth = textWrapDOMWidth;\n        state.itemWidth = textDOMWidth;\n      }, state.scroll.delay);\n    };\n\n    // 动画结束后，初始化动画\n    const handleTransitionend = () => {\n      state.scroll.loop = --state.scroll.loop;\n      if (state.scroll.loop === 0) {\n        state.scroll = {\n          ...state.scroll,\n          marquee: false,\n        };\n        return;\n      }\n      state.offset = state.listWidth;\n      state.duration = 0;\n\n      setTimeout(() => {\n        state.offset = -state.itemWidth;\n        state.duration = (state.itemWidth + state.listWidth) / state.scroll.speed;\n      }, 0);\n    };\n\n    const onClose = () => {\n      emitEvent('close');\n      setVisible(false);\n    };\n\n    const handleDuration = () => {\n      if (props.duration > 0) {\n        setTimeout(() => {\n          emitEvent('durationEnd');\n          onClose();\n        }, props.duration);\n      }\n    };\n\n    onMounted(() => {\n      nextTick(() => {\n        if (currentVisible.value) {\n          handleScrolling();\n        }\n      });\n    });\n\n    watch(\n      () => currentVisible.value,\n      (val) => {\n        if (val === false) return;\n        emitEvent('open');\n        setVisible(true);\n        handleDuration();\n        nextTick(() => {\n          state.offset = state.listWidth;\n          state.duration = 0;\n          handleScrolling();\n        });\n      },\n    );\n\n    return {\n      name: ref(name),\n      ...toRefs(state),\n      currentVisible,\n      rootClasses,\n      textWrapClasses,\n      rootStyles,\n      computedPrefixIcon,\n      computedContent,\n      computedCloseBtn,\n      textWrapDOM,\n      textDOM,\n      animateStyle,\n      onClose,\n      handleTransitionend,\n      afterEnter: () => emitEvent('opened'),\n      afterLeave: () => emitEvent('closed'),\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","name","iconDefault","info","h","ErrorCircleFilledIcon","success","CheckCircleFilledIcon","warning","error","defineComponent","components","TNode","props","messageProps","emits","setup","context","emitEvent","useEmitEvent","emit","internalInstance","getCurrentInstance","state","reactive","duration","offset","listWidth","itemWidth","scroll","marquee","speed","loop","delay","toRefs","visible","modelValue","useVModel","defaultVisible","onChange","currentVisible","setVisible","rootClasses","computed","theme","align","textWrapClasses","changeNumToStr","arr","map","item","getMessageStylesOffset","top","right","left","rootStyles","offsetStyle","zIndex","computedPrefixIcon","icon","slots","isFunction","renderTNode","computedContent","renderContent","computedCloseBtn","closeBtn","closeIcon","CloseIcon","animateStyle","transform","transitionDuration","transitionTimingFunction","textWrapDOM","ref","textDOM","handleScrolling","setTimeout","textWrapDOMWidth","value","getBoundingClientRect","width","textDOMWidth","handleTransitionend","onClose","handleDuration","onMounted","nextTick","watch","val","afterEnter","afterLeave","_createBlock","_Transition","onAfterLeave","_ctx","onAfterEnter","_createElementBlock","class","style","_component_t_node","content","_createElementVNode","_normalizeStyle","onTransitionend","onClick","_createVNode"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,IAAQA,SAAWC,MAAA,CAAXD;AACR,IAAME,OAAUF,EAAAA,CAAAA,MAAAA,CAAAA,MAAA,EAAA,UAAA,CAAA,CAAA;AAChB,IAAMG,WAAc,GAAA;AAClBC,EAAAA,IAAA,EAAMC,EAAEC,qBAAqB,CAAA;AAC7BC,EAAAA,OAAA,EAASF,EAAEG,qBAAqB,CAAA;AAChCC,EAAAA,OAAA,EAASJ,EAAEC,qBAAqB,CAAA;EAChCI,KAAA,EAAOL,EAAEC,qBAAqB,CAAA;AAChC,CAAA,CAAA;AAEA,aAAeK,eAAgB,CAAA;AAC7BT,EAAAA,IAAA,EAAAA,IAAA;AACAU,EAAAA,UAAA,EAAY;AAAEC,IAAAA,KAAM,EAANA,cAAAA;GAAM;AACpBC,EAAAA,KAAO,EAAAC,YAAA;EACPC,OAAO,CAAC,QAAA,EAAU,MAAQ,EAAA,QAAA,EAAU,SAAS,QAAQ,CAAA;AACrDC,EAAAA,KAAA,EAAMH,SAAAA,KAAAA,CAAAA,OAAYI,OAAuB,EAAA;IACvC,IAAMC,SAAY,GAAAC,YAAA,CAAaN,KAAO,EAAAI,OAAA,CAAQG,IAAI,CAAA,CAAA;IAClD,IAAMC,mBAAmBC,kBAAmB,EAAA,CAAA;IAG5C,IAAMC,QAAQC,QAAS,CAAA;AACrBC,MAAAA,QAAU,EAAA,CAAA;AACVC,MAAAA,MAAQ,EAAA,CAAA;AACRC,MAAAA,SAAW,EAAA,CAAA;AACXC,MAAAA,SAAW,EAAA,CAAA;AACXC,MAAAA,MAAQ,EAAA;AACNC,QAAAA,OAAS,EAAA,KAAA;AACTC,QAAAA,KAAO,EAAA,EAAA;QACPC,IAAM,EAAA,CAAA,CAAA;AACNC,QAAAA,KAAO,EAAA,CAAA;AACT,OAAA;AACF,KAAC,CAAA,CAAA;IAED,IAAgCC,OAAAA,GAAAA,OAAOrB,KAAK,CAAA;AAApCsB,MAAAA,OAAA,WAAAA,OAAA;AAASC,MAAAA,UAAW,WAAXA,UAAW,CAAA;AACtB,IAAA,IAAA,UAAA,GAA+BC,SAAA,CAAUF,SAASC,UAAY,EAAAvB,KAAA,CAAMyB,cAAgB,EAAAzB,KAAA,CAAM0B,QAAQ,CAAA;AAAA,MAAA,WAAA,GAAA,cAAA,CAAA,UAAA,EAAA,CAAA,CAAA;MAAjGC,cAAgB,GAAA,WAAA,CAAA,CAAA,CAAA;MAAAC,UAAU,GAAA,WAAA,CAAA,CAAA,CAAA,CAAA;IAC3B,IAAAC,WAAA,GAAcC,SAAS,YAAA;AAAA,MAAA,IAAA,IAAA,CAAA;MAAA,OAC1B1C,IAAAA,GAAAA,EAAAA,EAAAA,eAAAA,CAAAA,IAAAA,EAAAA,IAAO,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,IAAA,EAAA,EAAA,CAAA,MAAA,CACJA,IAAS,EAAAY,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAA,CAAM+B,KAAU,CAAA,EAAA,IAAA,mCACzB3C,IAAA,EAAA,UAAA,CAAA,CAAA,MAAA,CAAeY,MAAMgC,KAAU,GAAA,CAAC,CAAChC,KAAM,CAAAgC,KAAA,CAAA,EAAA,IAAA,CAAA;AAAA,KAC3C,CAAA,CAAA;IAEI,IAAAC,eAAA,GAAkBH,SAAS,YAAA;AAAA,MAAA,IAAA,KAAA,CAAA;MAAA,OAC3B1C,KAAAA,GAAAA,EAAAA,EAAAA,eAAAA,CAAAA,KAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,IAAoB,kBAAA,IAAA,CAAA,EAAA,eAAA,CAAA,KAAA,EAAA,EAAA,CAAA,MAAA,CACpBA,IAAA,EAAsBY,eAAAA,CAAAA,EAAAA,KAAM,CAAAiB,OAAA,CAAA,EAAA,KAAA,CAAA;AAAA,KAChC,CAAA,CAAA;AAEI,IAAA,IAAAiB,cAAA,GAAiB,SAAjBA,cAAA,CAAkBC,GAAY,EAAA;AAC3B,MAAA,OAAAA,GAAA,CAAIC,GAAI,CAAA,UAAUC,IAAM,EAAA;AAC7B,QAAA,OAAO,OAAOA,IAAA,KAAS,QAAW,GAAGA,EAAAA,CAAAA,MAAAA,CAAAA,IAAW,UAAAA,IAAA,CAAA;AAClD,OAAC,CAAA,CAAA;KACH,CAAA;AAEM,IAAA,IAAAC,sBAAA,GAAyB,SAAzBA,sBAAA,CAA0BzB,MAAe,EAAA;AACvC,MAAA,IAAAsB,GAAA,GAAMD,eAAerB,MAAM,CAAA,CAAA;MAC1B,OAAA;AACL0B,QAAAA,KAAKJ,GAAI,CAAA,CAAA,CAAA;AACTK,QAAAA,OAAOL,GAAI,CAAA,CAAA,CAAA;QACXM,MAAMN,GAAI,CAAA,CAAA,CAAA;OACZ,CAAA;KACF,CAAA;AAEM,IAAA,IAAAO,UAAA,GAAaZ,SAAS,YAAM;AAC1B,MAAA,IAAEjB,SAAWb,KAAA,CAAXa;MACR,IAAM8B,WAAc,GAAA9B,MAAA,GAASyB,sBAAuB,CAAAzB,MAAM,IAAI,EAAC,CAAA;AACxD,MAAA,OAAA,aAAA,CAAA;QACL+B,QAAQ5C,KAAM,CAAA4C,MAAAA;AAAA,OAAA,EACXD,WAAA,CAAA,CAAA;AAEP,KAAC,CAAA,CAAA;AAEK,IAAA,IAAAE,kBAAA,GAAqBf,SAAS,YAAM;AAClC,MAAA,IAAEgB,OAAS9C,KAAA,CAAT8C;AACR,MAAA,IAAI,CAACA,IAAA,EAAa,OAAA,IAAA,CAAA;AACd,MAAA,IAAAA,IAAA,IAAQ,CAAC1C,OAAQ,CAAA2C,KAAA,CAAMD,QAAQ,CAACE,UAAA,CAAWF,IAAI,CAAG,EAAA;AACpD,QAAA,IAAMf,QAAQ/B,KAAM,CAAA+B,KAAA,CAAA;QACpB,OAAO,CAAA1C,wBAAAA,kCAAAA,YAAc0C,KAAU,CAAA,KAAA,IAAA,CAAA;AACjC,OAAA;AACO,MAAA,OAAAkB,WAAA,CAAYzC,kBAAkB,MAAM,CAAA,CAAA;AAC7C,KAAC,CAAA,CAAA;IAGD,IAAM0C,kBAAkBpB,QAAS,CAAA,YAAA;AAAA,MAAA,OAAMqB,cAAc3C,gBAAkB,EAAA,SAAA,EAAW,SAAS,CAAC,CAAA;KAAA,CAAA,CAAA;AAGtF,IAAA,IAAA4C,gBAAA,GAAmBtB,SAAS,YAAM;AAChC,MAAA,IAAEuB,WAAarD,KAAA,CAAbqD;MACR,IAAIL,UAAW,CAAAK,QAAA,IAAYjD,OAAQ,CAAA2C,KAAA,CAAMM,QAAQ,CAAG,EAAA;AAC3C,QAAA,OAAAJ,WAAA,CAAYzC,kBAAkB,UAAU,CAAA,CAAA;AACjD,OAAA;AACA,MAAA,IAAI6C,QAAU,EAAA;AACN,QAAA,IAAAC,SAAA,GAAY/D,EAAEgE,SAAS,CAAA,CAAA;AACtB,QAAA,OAAAD,SAAA,CAAA;AACT,OAAA;AACO,MAAA,OAAA,IAAA,CAAA;AACT,KAAC,CAAA,CAAA;IAGK,IAAAE,YAAA,GAAe1B,SAAS,YAAA;MAAA,OAAO;QACnC2B,SAAW,EAAA/C,KAAA,CAAMG,MAAS,wBAAcH,MAAMG,MAAc,EAAA,KAAA,CAAA,GAAA,EAAA;AAC5D6C,QAAAA,kBAAA,EAAuBhD,EAAAA,CAAAA,MAAAA,CAAAA,KAAM,CAAAE,QAAA,EAAA,GAAA,CAAA;AAC7B+C,QAAAA,wBAA0B,EAAA,QAAA;OAC1B,CAAA;AAAA,KAAA,CAAA,CAAA;IAEF,IAAMC,cAAcC,GAAI,EAAA,CAAA;IACxB,IAAMC,UAAUD,GAAI,EAAA,CAAA;AAEpB,IAAA,IAAME,kBAAkB,SAAlBA,kBAAwB;AAAA,MAAA,IAAA,cAAA,EAAA,cAAA,EAAA,cAAA,CAAA;MAC5B,IAAI,EAAC/D,KAAO,KAAPA,IAAAA,IAAAA,KAAO,eAAPA,KAAO,CAAAiB,OAAA,CAAA,IAAY,CAAAjB,KAAO,aAAPA,KAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,cAAA,GAAPA,KAAO,CAAAiB,OAAA,mDAAP,cAAgCE,CAAAA,UAAS,CAAG,EAAA;AAClE,QAAA,OAAA;AACF,OAAA;AAEI,MAAA,IAAA,OAAOnB,KAAM,CAAAiB,OAAA,KAAY,SAAW,EAAA;AACtCP,QAAAA,KAAA,CAAMM,SAAcN,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAAAA,MAAMM,MAAQ,CAAA,EAAA,EAAA,EAAA;UAAAC,OAAA,EAASjB,MAAMiB,OAAAA;SAAQ,CAAA,CAAA;AAC3D,OAAA;AACA,MAAA,IAAMA,UAAUjB,KAAM,CAAAiB,OAAA,CAAA;MACtBP,KAAA,CAAMM,MAAS,GAAA;AACbC,QAAAA,OAAS,EAAA,IAAA;QACTE,IAAA,EAAM,QAAOF,OAAS,KAAA,IAAA,IAATA,OAAS,KAATA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAS,CAAAE,IAAA,CAAA,KAAS,cAAcT,KAAM,CAAAM,MAAA,CAAOG,OAAOF,OAAQ,CAAAE,IAAA;QACzED,KAAO,EAAA,CAAA,cAAA,GAAAD,OAAA,CAAQC,KAAS,2DAAAR,KAAA,CAAMM,MAAO,CAAAE,KAAA;QACrCE,KAAO,EAAA,CAAA,cAAA,GAAAH,OAAA,CAAQG,KAAS,2DAAAV,KAAA,CAAMM,MAAO,CAAAI,KAAAA;OACvC,CAAA;AAEA4C,MAAAA,UAAA,CAAW,YAAM;AAAA,QAAA,IAAA,kBAAA,EAAA,cAAA,CAAA;QACf,IAAMC,gBAAmB,GAAAL,CAAAA,kBAAAA,GAAAA,WAAA,CAAYM,KAAO,uDAAnB,kBAAmBC,CAAAA,qBAAA,EAAwB,CAAAC,KAAA,CAAA;QACpE,IAAMC,YAAe,GAAAP,CAAAA,cAAAA,GAAAA,OAAA,CAAQI,KAAO,mDAAf,cAAeC,CAAAA,qBAAA,EAAwB,CAAAC,KAAA,CAAA;AAC5D1D,QAAAA,KAAA,CAAMG,SAAS,CAACwD,YAAA,CAAA;QACV3D,KAAA,CAAAE,QAAA,GAAWyD,YAAe,GAAA3D,KAAA,CAAMM,MAAO,CAAAE,KAAA,CAAA;QAC7CR,KAAA,CAAMI,SAAY,GAAAmD,gBAAA,CAAA;QAClBvD,KAAA,CAAMK,SAAY,GAAAsD,YAAA,CAAA;AACpB,OAAA,EAAG3D,KAAM,CAAAM,MAAA,CAAOI,KAAK,CAAA,CAAA;KACvB,CAAA;AAGA,IAAA,IAAMkD,sBAAsB,SAAtBA,sBAA4B;MAChC5D,KAAA,CAAMM,MAAO,CAAAG,IAAA,GAAO,EAAET,KAAA,CAAMM,MAAO,CAAAG,IAAA,CAAA;AAC/B,MAAA,IAAAT,KAAA,CAAMM,MAAO,CAAAG,IAAA,KAAS,CAAG,EAAA;AAC3BT,QAAAA,KAAA,CAAMM,MAAS,GACVN,aAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EAAAA,KAAM,CAAAM,MAAA,CAAA,EAAA,EAAA,EAAA;AACTC,UAAAA,OAAS,EAAA,KAAA;SACX,CAAA,CAAA;AACA,QAAA,OAAA;AACF,OAAA;AACAP,MAAAA,KAAA,CAAMG,SAASH,KAAM,CAAAI,SAAA,CAAA;MACrBJ,KAAA,CAAME,QAAW,GAAA,CAAA,CAAA;AAEjBoD,MAAAA,UAAA,CAAW,YAAM;AACTtD,QAAAA,KAAA,CAAAG,MAAA,GAAS,CAACH,KAAM,CAAAK,SAAA,CAAA;AACtBL,QAAAA,KAAA,CAAME,YAAYF,KAAM,CAAAK,SAAA,GAAYL,KAAM,CAAAI,SAAA,IAAaJ,MAAMM,MAAO,CAAAE,KAAA,CAAA;SACnE,CAAC,CAAA,CAAA;KACN,CAAA;AAEA,IAAA,IAAMqD,UAAU,SAAVA,UAAgB;MACpBlE,SAAA,CAAU,OAAO,CAAA,CAAA;MACjBuB,UAAA,CAAW,KAAK,CAAA,CAAA;KAClB,CAAA;AAEA,IAAA,IAAM4C,iBAAiB,SAAjBA,iBAAuB;AACvB,MAAA,IAAAxE,KAAA,CAAMY,WAAW,CAAG,EAAA;AACtBoD,QAAAA,UAAA,CAAW,YAAM;UACf3D,SAAA,CAAU,aAAa,CAAA,CAAA;AACfkE,UAAAA,OAAA,EAAA,CAAA;AACV,SAAA,EAAGvE,MAAMY,QAAQ,CAAA,CAAA;AACnB,OAAA;KACF,CAAA;AAEA6D,IAAAA,SAAA,CAAU,YAAM;AACdC,MAAAA,QAAA,CAAS,YAAM;QACb,IAAI/C,eAAeuC,KAAO,EAAA;AACRH,UAAAA,eAAA,EAAA,CAAA;AAClB,SAAA;AACF,OAAC,CAAA,CAAA;AACH,KAAC,CAAA,CAAA;AAEDY,IAAAA,KAAA,CACE,YAAA;MAAA,OAAMhD,cAAe,CAAAuC,KAAA,CAAA;KACrB,EAAA,UAACU,GAAQ,EAAA;MACP,IAAIA,GAAQ,KAAA,KAAA,EAAO,OAAA;MACnBvE,SAAA,CAAU,MAAM,CAAA,CAAA;MAChBuB,UAAA,CAAW,IAAI,CAAA,CAAA;AACA4C,MAAAA,cAAA,EAAA,CAAA;AACfE,MAAAA,QAAA,CAAS,YAAM;AACbhE,QAAAA,KAAA,CAAMG,SAASH,KAAM,CAAAI,SAAA,CAAA;QACrBJ,KAAA,CAAME,QAAW,GAAA,CAAA,CAAA;AACDmD,QAAAA,eAAA,EAAA,CAAA;AAClB,OAAC,CAAA,CAAA;AACH,KAAA,CACF,CAAA;AAEO,IAAA,OAAA,aAAA,CAAA,aAAA,CAAA;MACL3E,IAAA,EAAMyE,IAAIzE,IAAI,CAAA;KACXiC,EAAAA,OAAOX,KAAK,CAAA,CAAA,EAAA,EAAA,EAAA;AACfiB,MAAAA,cAAA,EAAAA,cAAA;AACAE,MAAAA,WAAA,EAAAA,WAAA;AACAI,MAAAA,eAAA,EAAAA,eAAA;AACAS,MAAAA,UAAA,EAAAA,UAAA;AACAG,MAAAA,kBAAA,EAAAA,kBAAA;AACAK,MAAAA,eAAA,EAAAA,eAAA;AACAE,MAAAA,gBAAA,EAAAA,gBAAA;AACAQ,MAAAA,WAAA,EAAAA,WAAA;AACAE,MAAAA,OAAA,EAAAA,OAAA;AACAN,MAAAA,YAAA,EAAAA,YAAA;AACAe,MAAAA,OAAA,EAAAA,OAAA;AACAD,MAAAA,mBAAA,EAAAA,mBAAA;AACAO,MAAAA,UAAA,EAAY,SAAA,UAAA,GAAA;QAAA,OAAMxE,SAAA,CAAU,QAAQ,CAAA,CAAA;AAAA,OAAA;AACpCyE,MAAAA,UAAA,EAAY,SAAA,UAAA,GAAA;QAAA,OAAMzE,SAAA,CAAU,QAAQ,CAAA,CAAA;AAAA,OAAA;AAAA,KAAA,CAAA,CAAA;AAExC,GAAA;AACF,CAAC,CAAA;;;;oBCxPC,EAAA0E,WAAA,CAiBYC,UAAA,EAAA;AAjBA5F,IAAAA,IAAK,EAAA,SAAA;IAAW6F,cAAaC,IAAU,CAAAJ,UAAA;IAAGK,cAAaD,IAAU,CAAAL,UAAAA;;qBAC3E,YAAA;MAAA,OAeK,CAfMK,IAAc,CAAAvD,cAAA,iBAAzByD,mBAeK,KAAA,EAAA;;AAfsBvB,QAAAA,GAAI,EAAA,MAAA;AAAQwB,QAAAA,KAAA,gBAAO,CAAAH,IAAA,CAAWrD,WAAA,CAAA;AAAGyD,QAAAA,KAAA,gBAAO,CAAAJ,IAAA,CAAUxC,UAAA,CAAA;UAC7DwC,IAAkB,CAAArC,kBAAA,iBAAhCkC,YAAwEQ,iBAAA,EAAA;;QAArCC,SAASN,IAAkB,CAAArC,kBAAAA;gEAC9D4C,mBASK,KAAA,EAAA;AATA5B,QAAAA,GAAI,EAAA,aAAA;AAAewB,QAAAA,KAAA,gBAAO,CAAAH,IAAA,CAAejD,eAAA,CAAA;UAC5CwD,mBAOK,KAAA,EAAA;AANH5B,QAAAA,GAAI,EAAA,SAAA;AACHwB,QAAAA,gCAAUH,IAAA,CAAI9F,IAAA,EAAA,QAAA,CAAA,CAAA;AACdkG,QAAAA,OAAOI,cAAA,CAAAR,IAAA,CAAAlE,OAAOC,OAAU,GAAAiE,IAAA,CAAa1B,eAAA,EAAA,CAAA;AACrCmC,QAAAA;iBAAeT,KAAmBZ,mBAAA,EAAA,CAAA;AAAA,SAAA,CAAA;UAErBY,IAAe,CAAAhC,eAAA,iBAA7B6B,YAAkEQ,iBAAA,EAAA;;QAAlCC,SAASN,IAAe,CAAAhC,eAAAA;2EAGjDgC,IAAgB,CAAA9B,gBAAA,iBAA3BgC,mBAEK,KAAA,EAAA;;QAFyBQ;iBAAOV,IAAA,CAAOX,OAAA,IAAAW,IAAA,CAAAX,OAAA,CAAAW,KAAAA,CAAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,SAAA,CAAA;UAC1CW,WAAA,CAA4CN,iBAAA,EAAA;QAAnCC,OAAS,EAAAN,IAAA,CAAgB9B,gBAAAA;AAAA,OAAA,EAAA,IAAA,EAAA,CAAA,EAAA,CAAA,SAAA,CAAA,CAAA;;;;;;;;;;"}