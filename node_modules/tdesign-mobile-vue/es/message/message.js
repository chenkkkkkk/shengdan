/**
 * tdesign v0.14.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { h, defineComponent, getCurrentInstance, reactive, toRefs, computed, ref, onMounted, nextTick, watch, resolveComponent, openBlock, createBlock, Transition, withCtx, createElementBlock, normalizeClass, normalizeStyle, createCommentVNode, createElementVNode, createVNode } from 'vue';
import { ErrorCircleFilledIcon, CheckCircleFilledIcon, CloseIcon } from 'tdesign-icons-vue-next';
import { isFunction } from 'lodash';
import messageProps from './props.js';
import config from '../config.js';
import '../shared/index.js';
import TNodeComponent from '../shared/render-tnode.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import { useVModel } from '../shared/useVModel/index.js';
import { renderTNode, renderContent } from '../shared/render.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '@babel/runtime/helpers/typeof';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config.prefix;
var name = "".concat(prefix, "-message");
var iconDefault = {
  info: h(ErrorCircleFilledIcon),
  success: h(CheckCircleFilledIcon),
  warning: h(ErrorCircleFilledIcon),
  error: h(ErrorCircleFilledIcon)
};
var script = defineComponent({
  name: name,
  components: {
    TNode: TNodeComponent
  },
  props: messageProps,
  emits: ["change", "open", "opened", "close", "closed"],
  setup: function setup(props, context) {
    var emitEvent = useEmitEvent(props, context.emit);
    var internalInstance = getCurrentInstance();
    var state = reactive({
      duration: 0,
      offset: 0,
      listWidth: 0,
      itemWidth: 0,
      scroll: {
        marquee: false,
        speed: 50,
        loop: -1,
        delay: 0
      }
    });
    var _toRefs = toRefs(props),
      visible = _toRefs.visible,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(visible, modelValue, props.defaultVisible, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      currentVisible = _useVModel2[0],
      setVisible = _useVModel2[1];
    var rootClasses = computed(function () {
      var _ref;
      return _ref = {}, _defineProperty(_ref, name, true), _defineProperty(_ref, "".concat(name, "--").concat(props.theme), true), _defineProperty(_ref, "".concat(name, "-align--").concat(props.align), !!props.align), _ref;
    });
    var textWrapClasses = computed(function () {
      var _ref2;
      return _ref2 = {}, _defineProperty(_ref2, "".concat(name, "__text-wrap"), true), _defineProperty(_ref2, "".concat(name, "__text-nowrap"), props.marquee), _ref2;
    });
    var changeNumToStr = function changeNumToStr(arr) {
      return arr.map(function (item) {
        return typeof item === "number" ? "".concat(item, "px") : item;
      });
    };
    var getMessageStylesOffset = function getMessageStylesOffset(offset) {
      var arr = changeNumToStr(offset);
      return {
        top: arr[0],
        right: arr[1],
        left: arr[1]
      };
    };
    var rootStyles = computed(function () {
      var offset = props.offset;
      var offsetStyle = offset ? getMessageStylesOffset(offset) : [];
      return _objectSpread({
        zIndex: props.zIndex
      }, offsetStyle);
    });
    var computedPrefixIcon = computed(function () {
      var icon = props.icon;
      if (!icon) return null;
      if (icon && !context.slots.icon && !isFunction(icon)) {
        var theme = props.theme;
        return (iconDefault === null || iconDefault === void 0 ? void 0 : iconDefault[theme]) || null;
      }
      return renderTNode(internalInstance, "icon");
    });
    var computedContent = computed(function () {
      return renderContent(internalInstance, "default", "content");
    });
    var computedCloseBtn = computed(function () {
      var closeBtn = props.closeBtn;
      if (isFunction(closeBtn || context.slots.closeBtn)) {
        return renderTNode(internalInstance, "closeBtn");
      }
      if (closeBtn) {
        var closeIcon = h(CloseIcon);
        return closeIcon;
      }
      return null;
    });
    var animateStyle = computed(function () {
      return {
        transform: state.offset ? "translateX(".concat(state.offset, "px)") : "",
        transitionDuration: "".concat(state.duration, "s"),
        transitionTimingFunction: "linear"
      };
    });
    var textWrapDOM = ref();
    var textDOM = ref();
    var handleScrolling = function handleScrolling() {
      var _props$marquee, _marquee$speed, _marquee$delay;
      if (!(props !== null && props !== void 0 && props.marquee) || (props === null || props === void 0 ? void 0 : (_props$marquee = props.marquee) === null || _props$marquee === void 0 ? void 0 : _props$marquee.loop) === 0) {
        return;
      }
      if (typeof props.marquee === "boolean") {
        state.scroll = _objectSpread(_objectSpread({}, state.scroll), {}, {
          marquee: props.marquee
        });
      }
      var marquee = props.marquee;
      state.scroll = {
        marquee: true,
        loop: typeof (marquee === null || marquee === void 0 ? void 0 : marquee.loop) === "undefined" ? state.scroll.loop : marquee.loop,
        speed: (_marquee$speed = marquee.speed) !== null && _marquee$speed !== void 0 ? _marquee$speed : state.scroll.speed,
        delay: (_marquee$delay = marquee.delay) !== null && _marquee$delay !== void 0 ? _marquee$delay : state.scroll.delay
      };
      setTimeout(function () {
        var _textWrapDOM$value, _textDOM$value;
        var textWrapDOMWidth = (_textWrapDOM$value = textWrapDOM.value) === null || _textWrapDOM$value === void 0 ? void 0 : _textWrapDOM$value.getBoundingClientRect().width;
        var textDOMWidth = (_textDOM$value = textDOM.value) === null || _textDOM$value === void 0 ? void 0 : _textDOM$value.getBoundingClientRect().width;
        state.offset = -textDOMWidth;
        state.duration = textDOMWidth / state.scroll.speed;
        state.listWidth = textWrapDOMWidth;
        state.itemWidth = textDOMWidth;
      }, state.scroll.delay);
    };
    var handleTransitionend = function handleTransitionend() {
      state.scroll.loop = --state.scroll.loop;
      if (state.scroll.loop === 0) {
        state.scroll = _objectSpread(_objectSpread({}, state.scroll), {}, {
          marquee: false
        });
        return;
      }
      state.offset = state.listWidth;
      state.duration = 0;
      setTimeout(function () {
        state.offset = -state.itemWidth;
        state.duration = (state.itemWidth + state.listWidth) / state.scroll.speed;
      }, 0);
    };
    var onClose = function onClose() {
      emitEvent("close");
      setVisible(false);
    };
    var handleDuration = function handleDuration() {
      if (props.duration > 0) {
        setTimeout(function () {
          emitEvent("durationEnd");
          onClose();
        }, props.duration);
      }
    };
    onMounted(function () {
      nextTick(function () {
        if (currentVisible.value) {
          handleScrolling();
        }
      });
    });
    watch(function () {
      return currentVisible.value;
    }, function (val) {
      if (val === false) return;
      emitEvent("open");
      setVisible(true);
      handleDuration();
      nextTick(function () {
        state.offset = state.listWidth;
        state.duration = 0;
        handleScrolling();
      });
    });
    return _objectSpread(_objectSpread({
      name: ref(name)
    }, toRefs(state)), {}, {
      currentVisible: currentVisible,
      rootClasses: rootClasses,
      textWrapClasses: textWrapClasses,
      rootStyles: rootStyles,
      computedPrefixIcon: computedPrefixIcon,
      computedContent: computedContent,
      computedCloseBtn: computedCloseBtn,
      textWrapDOM: textWrapDOM,
      textDOM: textDOM,
      animateStyle: animateStyle,
      onClose: onClose,
      handleTransitionend: handleTransitionend,
      afterEnter: function afterEnter() {
        return emitEvent("opened");
      },
      afterLeave: function afterLeave() {
        return emitEvent("closed");
      }
    });
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_node = resolveComponent("t-node");
  return openBlock(), createBlock(Transition, {
    name: "message",
    onAfterLeave: _ctx.afterLeave,
    onAfterEnter: _ctx.afterEnter
  }, {
    default: withCtx(function () {
      return [_ctx.currentVisible ? (openBlock(), createElementBlock("div", {
        key: 0,
        ref: "root",
        class: normalizeClass(_ctx.rootClasses),
        style: normalizeStyle(_ctx.rootStyles)
      }, [_ctx.computedPrefixIcon ? (openBlock(), createBlock(_component_t_node, {
        key: 0,
        content: _ctx.computedPrefixIcon
      }, null, 8, ["content"])) : createCommentVNode("", true), createElementVNode("div", {
        ref: "textWrapDOM",
        class: normalizeClass(_ctx.textWrapClasses)
      }, [createElementVNode("div", {
        ref: "textDOM",
        class: normalizeClass("".concat(_ctx.name, "__text")),
        style: normalizeStyle(_ctx.scroll.marquee ? _ctx.animateStyle : ""),
        onTransitionend: _cache[0] || (_cache[0] = function ($event) {
          return _ctx.handleTransitionend();
        })
      }, [_ctx.computedContent ? (openBlock(), createBlock(_component_t_node, {
        key: 0,
        content: _ctx.computedContent
      }, null, 8, ["content"])) : createCommentVNode("", true)], 38)], 2), _ctx.computedCloseBtn ? (openBlock(), createElementBlock("div", {
        key: 1,
        onClick: _cache[1] || (_cache[1] = function () {
          return _ctx.onClose && _ctx.onClose.apply(_ctx, arguments);
        })
      }, [createVNode(_component_t_node, {
        content: _ctx.computedCloseBtn
      }, null, 8, ["content"])])) : createCommentVNode("", true)], 6)) : createCommentVNode("", true)];
    }),
    _: 1
  }, 8, ["onAfterLeave", "onAfterEnter"]);
}

script.render = render;

export { script as default };
//# sourceMappingURL=message.js.map
