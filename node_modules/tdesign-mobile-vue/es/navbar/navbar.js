/**
 * tdesign v0.14.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

import { defineComponent, getCurrentInstance, toRefs, computed, resolveComponent, withDirectives, openBlock, createElementBlock, normalizeClass, normalizeStyle, createVNode, createCommentVNode, createElementVNode, vShow } from 'vue';
import { ChevronLeftIcon, HomeIcon } from 'tdesign-icons-vue-next';
import config from '../config.js';
import '../shared/index.js';
import NavbarProps from './props.js';
import TNodeComponent from '../shared/render-tnode.js';
import { renderTNode } from '../shared/render.js';
import { useEmitEvent } from '../shared/useEmitEvent/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import 'lodash/camelCase';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '@babel/runtime/helpers/defineProperty';
import '@babel/runtime/helpers/typeof';

var prefix = config.prefix;
var name = "".concat(prefix, "-navbar");
var script = defineComponent({
  name: name,
  components: {
    TChevronLeftIcon: ChevronLeftIcon,
    TNode: TNodeComponent,
    THomeIcon: HomeIcon
  },
  props: NavbarProps,
  emits: ["left-click", "right-click"],
  setup: function setup(props, context) {
    var internalInstance = getCurrentInstance();
    var _toRefs = toRefs(props),
      title = _toRefs.title,
      titleMaxLength = _toRefs.titleMaxLength,
      fixed = _toRefs.fixed,
      background = _toRefs.background;
    var navStyle = computed(function () {
      return "position: ".concat(fixed.value ? "fixed" : "relative", "; background: ").concat(background.value || "", ";");
    });
    var titleContent = computed(function () {
      if (titleMaxLength.value != null && title.value) {
        if (titleMaxLength.value <= 0) {
          console.warn("titleMaxLength must be greater than 0");
        } else {
          return title.value.length <= titleMaxLength.value ? props.title : "".concat(title.value.slice(0, titleMaxLength.value), "...");
        }
      }
      return renderTNode(internalInstance, "title");
    });
    var leftContent = computed(function () {
      return renderTNode(internalInstance, "left-icon");
    });
    var rightContent = computed(function () {
      return renderTNode(internalInstance, "right-icon");
    });
    var homeContent = computed(function () {
      return renderTNode(internalInstance, "home-icon");
    });
    var emitEvent = useEmitEvent(props, context.emit);
    var handleLeftClick = function handleLeftClick() {
      emitEvent("left-click");
    };
    var handleRightClick = function handleRightClick() {
      emitEvent("right-click");
    };
    return {
      name: name,
      titleContent: titleContent,
      leftContent: leftContent,
      rightContent: rightContent,
      navStyle: navStyle,
      homeContent: homeContent,
      handleLeftClick: handleLeftClick,
      handleRightClick: handleRightClick
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_chevron_left_icon = resolveComponent("t-chevron-left-icon");
  var _component_t_home_icon = resolveComponent("t-home-icon");
  var _component_t_node = resolveComponent("t-node");
  return withDirectives((openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.name),
    style: normalizeStyle("".concat(_ctx.navStyle))
  }, [_ctx.homeContent || _ctx.leftContent ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass("".concat(_ctx.name, "__back"))
  }, [_ctx.leftIcon === true ? (openBlock(), createElementBlock("span", {
    key: 0,
    class: normalizeClass("".concat(_ctx.name, "__back--arrow")),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.handleLeftClick && _ctx.handleLeftClick.apply(_ctx, arguments);
    })
  }, [createVNode(_component_t_chevron_left_icon)], 2)) : createCommentVNode("", true), _ctx.homeIcon === true ? (openBlock(), createElementBlock("span", {
    key: 1,
    class: normalizeClass("".concat(_ctx.name, "__back--arrow"))
  }, [createVNode(_component_t_home_icon)], 2)) : createCommentVNode("", true), createVNode(_component_t_node, {
    content: _ctx.homeContent
  }, null, 8, ["content"]), createVNode(_component_t_node, {
    content: _ctx.leftContent
  }, null, 8, ["content"])], 2)) : createCommentVNode("", true), createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__text"))
  }, [createVNode(_component_t_node, {
    content: _ctx.titleContent
  }, null, 8, ["content"])], 2), createElementVNode("div", {
    class: normalizeClass("".concat(_ctx.name, "__right")),
    onClick: _cache[1] || (_cache[1] = function () {
      return _ctx.handleRightClick && _ctx.handleRightClick.apply(_ctx, arguments);
    })
  }, [createVNode(_component_t_node, {
    content: _ctx.rightContent
  }, null, 8, ["content"])], 2)], 6)), [[vShow, _ctx.visible]]);
}

script.render = render;

export { script as default };
//# sourceMappingURL=navbar.js.map
