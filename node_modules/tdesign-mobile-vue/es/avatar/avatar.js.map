{"version":3,"file":"avatar.js","sources":["../../src/avatar/avatar.vue","../../src/avatar/avatar.vue?vue&type=template&id=e8e1eade&lang.js"],"sourcesContent":["<template>\n  <div :class=\"avatarClass\" :style=\"customSize\">\n    <div :class=\"`${name}__inner`\">\n      <t-image\n        v-if=\"image && !hideOnLoadFailed\"\n        :style=\"customSize\"\n        v-bind=\"customImageProps\"\n        @load=\"handleImgLoadCompleted\"\n        @error=\"handleImgLoadError\"\n      />\n      <div v-else-if=\"iconContent !== undefined\" :class=\"`${name}__icon`\">\n        <t-node :content=\"iconContent\"></t-node>\n      </div>\n      <span v-else>\n        <t-node :content=\"avatarContent\"></t-node>\n      </span>\n    </div>\n    <div v-if=\"badgeProps\" :class=\"`${name}__badge`\">\n      <t-badge\n        :count=\"badgeProps.count\"\n        :max-count=\"badgeProps.maxCount\"\n        :dot=\"badgeProps.dot\"\n        :content=\"badgeProps.content\"\n        :size=\"badgeProps.size\"\n        :offset=\"badgeProps.offset\"\n      >\n      </t-badge>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, toRefs, defineComponent, getCurrentInstance, inject, ref, SetupContext } from 'vue';\nimport TBadge from '../badge';\nimport TImage from '../image';\nimport config from '../config';\nimport AvatarProps from './props';\nimport { TdAvatarGroupProps } from './type';\nimport CLASSNAMES from '../shared/constants';\nimport { renderContent, renderTNode, TNode, useEmitEvent } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-avatar`;\n\nexport default defineComponent({\n  name,\n  components: { TNode, TBadge, TImage },\n  props: AvatarProps,\n  emits: ['error'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const internalInstance = getCurrentInstance();\n    const avatarGroupProps = inject('avatarGroup', {}) as TdAvatarGroupProps;\n    const iconContent = computed(() => renderTNode(internalInstance, 'icon'));\n    const avatarContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const sizeValue = ref(props.size || (avatarGroupProps && avatarGroupProps.size));\n    const avatarClass = computed(() => [\n      `${name}`,\n      sizeValue.value ? CLASSNAMES.SIZE[sizeValue.value] : '',\n      {\n        [`${name}--${props.shape}`]: props.shape,\n      },\n    ]);\n\n    const isCustomSize = computed(() => sizeValue.value && !CLASSNAMES.SIZE[sizeValue.value]);\n    const customSize = computed(() => {\n      return isCustomSize.value\n        ? {\n            height: sizeValue.value,\n            width: sizeValue.value,\n          }\n        : {};\n    });\n    const handleImgLoadCompleted = (e: any) => {\n      emitEvent('load', e);\n    };\n    const handleImgLoadError = (e: any) => {\n      emitEvent('error', e);\n    };\n\n    const baseImageProps = {\n      src: props.image,\n      alt: props.alt,\n    };\n    const customImageProps = computed(() => ({\n      ...props.imageProps,\n      ...baseImageProps,\n    }));\n\n    return {\n      name,\n      ...toRefs(props),\n      iconContent,\n      avatarContent,\n      avatarClass,\n      customSize,\n      handleImgLoadCompleted,\n      handleImgLoadError,\n      customImageProps,\n    };\n  },\n});\n</script>\n","<template>\n  <div :class=\"avatarClass\" :style=\"customSize\">\n    <div :class=\"`${name}__inner`\">\n      <t-image\n        v-if=\"image && !hideOnLoadFailed\"\n        :style=\"customSize\"\n        v-bind=\"customImageProps\"\n        @load=\"handleImgLoadCompleted\"\n        @error=\"handleImgLoadError\"\n      />\n      <div v-else-if=\"iconContent !== undefined\" :class=\"`${name}__icon`\">\n        <t-node :content=\"iconContent\"></t-node>\n      </div>\n      <span v-else>\n        <t-node :content=\"avatarContent\"></t-node>\n      </span>\n    </div>\n    <div v-if=\"badgeProps\" :class=\"`${name}__badge`\">\n      <t-badge\n        :count=\"badgeProps.count\"\n        :max-count=\"badgeProps.maxCount\"\n        :dot=\"badgeProps.dot\"\n        :content=\"badgeProps.content\"\n        :size=\"badgeProps.size\"\n        :offset=\"badgeProps.offset\"\n      >\n      </t-badge>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, toRefs, defineComponent, getCurrentInstance, inject, ref, SetupContext } from 'vue';\nimport TBadge from '../badge';\nimport TImage from '../image';\nimport config from '../config';\nimport AvatarProps from './props';\nimport { TdAvatarGroupProps } from './type';\nimport CLASSNAMES from '../shared/constants';\nimport { renderContent, renderTNode, TNode, useEmitEvent } from '../shared';\n\nconst { prefix } = config;\nconst name = `${prefix}-avatar`;\n\nexport default defineComponent({\n  name,\n  components: { TNode, TBadge, TImage },\n  props: AvatarProps,\n  emits: ['error'],\n  setup(props, context: SetupContext) {\n    const emitEvent = useEmitEvent(props, context.emit);\n    const internalInstance = getCurrentInstance();\n    const avatarGroupProps = inject('avatarGroup', {}) as TdAvatarGroupProps;\n    const iconContent = computed(() => renderTNode(internalInstance, 'icon'));\n    const avatarContent = computed(() => renderContent(internalInstance, 'default', 'content'));\n    const sizeValue = ref(props.size || (avatarGroupProps && avatarGroupProps.size));\n    const avatarClass = computed(() => [\n      `${name}`,\n      sizeValue.value ? CLASSNAMES.SIZE[sizeValue.value] : '',\n      {\n        [`${name}--${props.shape}`]: props.shape,\n      },\n    ]);\n\n    const isCustomSize = computed(() => sizeValue.value && !CLASSNAMES.SIZE[sizeValue.value]);\n    const customSize = computed(() => {\n      return isCustomSize.value\n        ? {\n            height: sizeValue.value,\n            width: sizeValue.value,\n          }\n        : {};\n    });\n    const handleImgLoadCompleted = (e: any) => {\n      emitEvent('load', e);\n    };\n    const handleImgLoadError = (e: any) => {\n      emitEvent('error', e);\n    };\n\n    const baseImageProps = {\n      src: props.image,\n      alt: props.alt,\n    };\n    const customImageProps = computed(() => ({\n      ...props.imageProps,\n      ...baseImageProps,\n    }));\n\n    return {\n      name,\n      ...toRefs(props),\n      iconContent,\n      avatarContent,\n      avatarClass,\n      customSize,\n      handleImgLoadCompleted,\n      handleImgLoadError,\n      customImageProps,\n    };\n  },\n});\n</script>\n"],"names":["prefix","config","name","defineComponent","components","TNode","TBadge","TImage","props","AvatarProps","emits","setup","context","emitEvent","useEmitEvent","emit","internalInstance","getCurrentInstance","avatarGroupProps","inject","iconContent","computed","renderTNode","avatarContent","renderContent","sizeValue","ref","size","avatarClass","value","CLASSNAMES","SIZE","shape","isCustomSize","customSize","height","width","handleImgLoadCompleted","e","handleImgLoadError","baseImageProps","src","image","alt","customImageProps","imageProps","toRefs","_createElementBlock","class","_ctx","style","_createElementVNode","hideOnLoadFailed","_openBlock","_createBlock","_component_t_image","_mergeProps","onLoad","onError","_createVNode","_component_t_node","content","_hoisted_1","badgeProps","_component_t_badge","count","maxCount","dot","offset"],"mappings":"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"}