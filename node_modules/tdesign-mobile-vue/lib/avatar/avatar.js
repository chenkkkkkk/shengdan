/**
 * tdesign v0.14.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var badge_index = require('../badge/index.js');
var image_index = require('../image/index.js');
var config = require('../config.js');
var avatar_props = require('./props.js');
var shared_constants = require('../shared/constants.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
var shared_render = require('../shared/render.js');
require('../badge/badge.js');
require('@babel/runtime/helpers/slicedToArray');
require('../badge/props.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');
require('../shared/component.js');
require('../image/image.js');
require('@vueuse/core');
require('tdesign-icons-vue-next');
require('../image/props.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var prefix = config["default"].prefix;
var name = "".concat(prefix, "-avatar");
var script = vue.defineComponent({
  name: name,
  components: {
    TNode: shared_renderTnode["default"],
    TBadge: badge_index["default"],
    TImage: image_index["default"]
  },
  props: avatar_props["default"],
  emits: ["error"],
  setup: function setup(props, context) {
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props, context.emit);
    var internalInstance = vue.getCurrentInstance();
    var avatarGroupProps = vue.inject("avatarGroup", {});
    var iconContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "icon");
    });
    var avatarContent = vue.computed(function () {
      return shared_render.renderContent(internalInstance, "default", "content");
    });
    var sizeValue = vue.ref(props.size || avatarGroupProps && avatarGroupProps.size);
    var avatarClass = vue.computed(function () {
      return ["".concat(name), sizeValue.value ? shared_constants["default"].SIZE[sizeValue.value] : "", _defineProperty__default["default"]({}, "".concat(name, "--").concat(props.shape), props.shape)];
    });
    var isCustomSize = vue.computed(function () {
      return sizeValue.value && !shared_constants["default"].SIZE[sizeValue.value];
    });
    var customSize = vue.computed(function () {
      return isCustomSize.value ? {
        height: sizeValue.value,
        width: sizeValue.value
      } : {};
    });
    var handleImgLoadCompleted = function handleImgLoadCompleted(e) {
      emitEvent("load", e);
    };
    var handleImgLoadError = function handleImgLoadError(e) {
      emitEvent("error", e);
    };
    var baseImageProps = {
      src: props.image,
      alt: props.alt
    };
    var customImageProps = vue.computed(function () {
      return _objectSpread(_objectSpread({}, props.imageProps), baseImageProps);
    });
    return _objectSpread(_objectSpread({
      name: name
    }, vue.toRefs(props)), {}, {
      iconContent: iconContent,
      avatarContent: avatarContent,
      avatarClass: avatarClass,
      customSize: customSize,
      handleImgLoadCompleted: handleImgLoadCompleted,
      handleImgLoadError: handleImgLoadError,
      customImageProps: customImageProps
    });
  }
});

var _hoisted_1 = {
  key: 2
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_image = vue.resolveComponent("t-image");
  var _component_t_node = vue.resolveComponent("t-node");
  var _component_t_badge = vue.resolveComponent("t-badge");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.avatarClass),
    style: vue.normalizeStyle(_ctx.customSize)
  }, [vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__inner"))
  }, [_ctx.image && !_ctx.hideOnLoadFailed ? (vue.openBlock(), vue.createBlock(_component_t_image, vue.mergeProps({
    key: 0,
    style: _ctx.customSize
  }, _ctx.customImageProps, {
    onLoad: _ctx.handleImgLoadCompleted,
    onError: _ctx.handleImgLoadError
  }), null, 16, ["style", "onLoad", "onError"])) : _ctx.iconContent !== void 0 ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 1,
    class: vue.normalizeClass("".concat(_ctx.name, "__icon"))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.iconContent
  }, null, 8, ["content"])], 2)) : (vue.openBlock(), vue.createElementBlock("span", _hoisted_1, [vue.createVNode(_component_t_node, {
    content: _ctx.avatarContent
  }, null, 8, ["content"])]))], 2), _ctx.badgeProps ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "__badge"))
  }, [vue.createVNode(_component_t_badge, {
    count: _ctx.badgeProps.count,
    "max-count": _ctx.badgeProps.maxCount,
    dot: _ctx.badgeProps.dot,
    content: _ctx.badgeProps.content,
    size: _ctx.badgeProps.size,
    offset: _ctx.badgeProps.offset
  }, null, 8, ["count", "max-count", "dot", "content", "size", "offset"])], 2)) : vue.createCommentVNode("", true)], 6);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=avatar.js.map
