/**
 * tdesign v0.14.1
 * (c) 2022 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../config.js');
var navbar_props = require('./props.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_render = require('../shared/render.js');
var shared_useEmitEvent_index = require('../shared/useEmitEvent/index.js');
require('@babel/runtime/helpers/typeof');
require('lodash/camelCase');

var prefix = config["default"].prefix;
var name = "".concat(prefix, "-navbar");
var script = vue.defineComponent({
  name: name,
  components: {
    TChevronLeftIcon: tdesignIconsVueNext.ChevronLeftIcon,
    TNode: shared_renderTnode["default"],
    THomeIcon: tdesignIconsVueNext.HomeIcon
  },
  props: navbar_props["default"],
  emits: ["left-click", "right-click"],
  setup: function setup(props, context) {
    var internalInstance = vue.getCurrentInstance();
    var _toRefs = vue.toRefs(props),
      title = _toRefs.title,
      titleMaxLength = _toRefs.titleMaxLength,
      fixed = _toRefs.fixed,
      background = _toRefs.background;
    var navStyle = vue.computed(function () {
      return "position: ".concat(fixed.value ? "fixed" : "relative", "; background: ").concat(background.value || "", ";");
    });
    var titleContent = vue.computed(function () {
      if (titleMaxLength.value != null && title.value) {
        if (titleMaxLength.value <= 0) {
          console.warn("titleMaxLength must be greater than 0");
        } else {
          return title.value.length <= titleMaxLength.value ? props.title : "".concat(title.value.slice(0, titleMaxLength.value), "...");
        }
      }
      return shared_render.renderTNode(internalInstance, "title");
    });
    var leftContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "left-icon");
    });
    var rightContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "right-icon");
    });
    var homeContent = vue.computed(function () {
      return shared_render.renderTNode(internalInstance, "home-icon");
    });
    var emitEvent = shared_useEmitEvent_index.useEmitEvent(props, context.emit);
    var handleLeftClick = function handleLeftClick() {
      emitEvent("left-click");
    };
    var handleRightClick = function handleRightClick() {
      emitEvent("right-click");
    };
    return {
      name: name,
      titleContent: titleContent,
      leftContent: leftContent,
      rightContent: rightContent,
      navStyle: navStyle,
      homeContent: homeContent,
      handleLeftClick: handleLeftClick,
      handleRightClick: handleRightClick
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_chevron_left_icon = vue.resolveComponent("t-chevron-left-icon");
  var _component_t_home_icon = vue.resolveComponent("t-home-icon");
  var _component_t_node = vue.resolveComponent("t-node");
  return vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.name),
    style: vue.normalizeStyle("".concat(_ctx.navStyle))
  }, [_ctx.homeContent || _ctx.leftContent ? (vue.openBlock(), vue.createElementBlock("div", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "__back"))
  }, [_ctx.leftIcon === true ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 0,
    class: vue.normalizeClass("".concat(_ctx.name, "__back--arrow")),
    onClick: _cache[0] || (_cache[0] = function () {
      return _ctx.handleLeftClick && _ctx.handleLeftClick.apply(_ctx, arguments);
    })
  }, [vue.createVNode(_component_t_chevron_left_icon)], 2)) : vue.createCommentVNode("", true), _ctx.homeIcon === true ? (vue.openBlock(), vue.createElementBlock("span", {
    key: 1,
    class: vue.normalizeClass("".concat(_ctx.name, "__back--arrow"))
  }, [vue.createVNode(_component_t_home_icon)], 2)) : vue.createCommentVNode("", true), vue.createVNode(_component_t_node, {
    content: _ctx.homeContent
  }, null, 8, ["content"]), vue.createVNode(_component_t_node, {
    content: _ctx.leftContent
  }, null, 8, ["content"])], 2)) : vue.createCommentVNode("", true), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__text"))
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.titleContent
  }, null, 8, ["content"])], 2), vue.createElementVNode("div", {
    class: vue.normalizeClass("".concat(_ctx.name, "__right")),
    onClick: _cache[1] || (_cache[1] = function () {
      return _ctx.handleRightClick && _ctx.handleRightClick.apply(_ctx, arguments);
    })
  }, [vue.createVNode(_component_t_node, {
    content: _ctx.rightContent
  }, null, 8, ["content"])], 2)], 6)), [[vue.vShow, _ctx.visible]]);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=navbar.js.map
